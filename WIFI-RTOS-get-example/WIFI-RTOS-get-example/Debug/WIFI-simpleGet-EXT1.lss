
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009cb0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409cb0  00409cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00409cb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c0fc  204009d0  0040a688  000209d0  2**2
                  ALLOC
  4 .stack        00002004  2040cacc  00416784  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040ead0  00418788  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00033131  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006831  00000000  00000000  00053b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001229f  00000000  00000000  0005a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000014c0  00000000  00000000  0006c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001800  00000000  00000000  0006db18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000fa20  00000000  00000000  0006f318  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b648  00000000  00000000  0007ed38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a2d2  00000000  00000000  0009a380  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000043d0  00000000  00000000  00134654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 ea 40 20 c5 53 40 00 c3 53 40 00 c3 53 40 00     ..@ .S@..S@..S@.
  400010:	c3 53 40 00 c3 53 40 00 c3 53 40 00 00 00 00 00     .S@..S@..S@.....
	...
  40002c:	d5 02 40 00 c3 53 40 00 00 00 00 00 75 03 40 00     ..@..S@.....u.@.
  40003c:	dd 03 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     ..@..S@..S@..S@.
  40004c:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  40005c:	c3 53 40 00 c3 53 40 00 00 00 00 00 dd 4e 40 00     .S@..S@......N@.
  40006c:	f1 4e 40 00 05 4f 40 00 c3 53 40 00 c3 53 40 00     .N@..O@..S@..S@.
  40007c:	c3 53 40 00 19 4f 40 00 2d 4f 40 00 c3 53 40 00     .S@..O@.-O@..S@.
  40008c:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  40009c:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  4000ac:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  4000bc:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  4000cc:	c3 53 40 00 00 00 00 00 c3 53 40 00 00 00 00 00     .S@......S@.....
  4000dc:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  4000ec:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  4000fc:	c3 53 40 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .S@..S@..S@..S@.
  40010c:	c3 53 40 00 c3 53 40 00 00 00 00 00 00 00 00 00     .S@..S@.........
  40011c:	00 00 00 00 c3 53 40 00 c3 53 40 00 c3 53 40 00     .....S@..S@..S@.
  40012c:	c3 53 40 00 c3 53 40 00 00 00 00 00 c3 53 40 00     .S@..S@......S@.
  40013c:	c3 53 40 00                                         .S@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00409cb8 	.word	0x00409cb8

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409cb8 	.word	0x00409cb8
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00409cb8 	.word	0x00409cb8
  4001a8:	00000000 	.word	0x00000000

004001ac <vListInitialise>:
  4001ac:	f100 0308 	add.w	r3, r0, #8
  4001b0:	6043      	str	r3, [r0, #4]
  4001b2:	f04f 32ff 	mov.w	r2, #4294967295
  4001b6:	6082      	str	r2, [r0, #8]
  4001b8:	60c3      	str	r3, [r0, #12]
  4001ba:	6103      	str	r3, [r0, #16]
  4001bc:	2300      	movs	r3, #0
  4001be:	6003      	str	r3, [r0, #0]
  4001c0:	4770      	bx	lr

004001c2 <vListInitialiseItem>:
  4001c2:	2300      	movs	r3, #0
  4001c4:	6103      	str	r3, [r0, #16]
  4001c6:	4770      	bx	lr

004001c8 <vListInsertEnd>:
  4001c8:	6843      	ldr	r3, [r0, #4]
  4001ca:	604b      	str	r3, [r1, #4]
  4001cc:	689a      	ldr	r2, [r3, #8]
  4001ce:	608a      	str	r2, [r1, #8]
  4001d0:	689a      	ldr	r2, [r3, #8]
  4001d2:	6051      	str	r1, [r2, #4]
  4001d4:	6099      	str	r1, [r3, #8]
  4001d6:	6108      	str	r0, [r1, #16]
  4001d8:	6803      	ldr	r3, [r0, #0]
  4001da:	3301      	adds	r3, #1
  4001dc:	6003      	str	r3, [r0, #0]
  4001de:	4770      	bx	lr

004001e0 <vListInsert>:
  4001e0:	b430      	push	{r4, r5}
  4001e2:	680d      	ldr	r5, [r1, #0]
  4001e4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001e8:	d002      	beq.n	4001f0 <vListInsert+0x10>
  4001ea:	f100 0208 	add.w	r2, r0, #8
  4001ee:	e002      	b.n	4001f6 <vListInsert+0x16>
  4001f0:	6902      	ldr	r2, [r0, #16]
  4001f2:	e004      	b.n	4001fe <vListInsert+0x1e>
  4001f4:	461a      	mov	r2, r3
  4001f6:	6853      	ldr	r3, [r2, #4]
  4001f8:	681c      	ldr	r4, [r3, #0]
  4001fa:	42a5      	cmp	r5, r4
  4001fc:	d2fa      	bcs.n	4001f4 <vListInsert+0x14>
  4001fe:	6853      	ldr	r3, [r2, #4]
  400200:	604b      	str	r3, [r1, #4]
  400202:	6099      	str	r1, [r3, #8]
  400204:	608a      	str	r2, [r1, #8]
  400206:	6051      	str	r1, [r2, #4]
  400208:	6108      	str	r0, [r1, #16]
  40020a:	6803      	ldr	r3, [r0, #0]
  40020c:	3301      	adds	r3, #1
  40020e:	6003      	str	r3, [r0, #0]
  400210:	bc30      	pop	{r4, r5}
  400212:	4770      	bx	lr

00400214 <uxListRemove>:
  400214:	6903      	ldr	r3, [r0, #16]
  400216:	6842      	ldr	r2, [r0, #4]
  400218:	6881      	ldr	r1, [r0, #8]
  40021a:	6091      	str	r1, [r2, #8]
  40021c:	6882      	ldr	r2, [r0, #8]
  40021e:	6841      	ldr	r1, [r0, #4]
  400220:	6051      	str	r1, [r2, #4]
  400222:	685a      	ldr	r2, [r3, #4]
  400224:	4290      	cmp	r0, r2
  400226:	d005      	beq.n	400234 <uxListRemove+0x20>
  400228:	2200      	movs	r2, #0
  40022a:	6102      	str	r2, [r0, #16]
  40022c:	6818      	ldr	r0, [r3, #0]
  40022e:	3801      	subs	r0, #1
  400230:	6018      	str	r0, [r3, #0]
  400232:	4770      	bx	lr
  400234:	6882      	ldr	r2, [r0, #8]
  400236:	605a      	str	r2, [r3, #4]
  400238:	e7f6      	b.n	400228 <uxListRemove+0x14>
	...

0040023c <prvTaskExitError>:
  40023c:	4b0d      	ldr	r3, [pc, #52]	; (400274 <prvTaskExitError+0x38>)
  40023e:	681b      	ldr	r3, [r3, #0]
  400240:	f1b3 3fff 	cmp.w	r3, #4294967295
  400244:	d00a      	beq.n	40025c <prvTaskExitError+0x20>
  400246:	f04f 0380 	mov.w	r3, #128	; 0x80
  40024a:	b672      	cpsid	i
  40024c:	f383 8811 	msr	BASEPRI, r3
  400250:	f3bf 8f6f 	isb	sy
  400254:	f3bf 8f4f 	dsb	sy
  400258:	b662      	cpsie	i
  40025a:	e7fe      	b.n	40025a <prvTaskExitError+0x1e>
  40025c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400260:	b672      	cpsid	i
  400262:	f383 8811 	msr	BASEPRI, r3
  400266:	f3bf 8f6f 	isb	sy
  40026a:	f3bf 8f4f 	dsb	sy
  40026e:	b662      	cpsie	i
  400270:	e7fe      	b.n	400270 <prvTaskExitError+0x34>
  400272:	bf00      	nop
  400274:	2040000c 	.word	0x2040000c

00400278 <prvPortStartFirstTask>:
  400278:	4806      	ldr	r0, [pc, #24]	; (400294 <prvPortStartFirstTask+0x1c>)
  40027a:	6800      	ldr	r0, [r0, #0]
  40027c:	6800      	ldr	r0, [r0, #0]
  40027e:	f380 8808 	msr	MSP, r0
  400282:	b662      	cpsie	i
  400284:	b661      	cpsie	f
  400286:	f3bf 8f4f 	dsb	sy
  40028a:	f3bf 8f6f 	isb	sy
  40028e:	df00      	svc	0
  400290:	bf00      	nop
  400292:	0000      	.short	0x0000
  400294:	e000ed08 	.word	0xe000ed08

00400298 <vPortEnableVFP>:
  400298:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4002a8 <vPortEnableVFP+0x10>
  40029c:	6801      	ldr	r1, [r0, #0]
  40029e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4002a2:	6001      	str	r1, [r0, #0]
  4002a4:	4770      	bx	lr
  4002a6:	0000      	.short	0x0000
  4002a8:	e000ed88 	.word	0xe000ed88

004002ac <pxPortInitialiseStack>:
  4002ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002b0:	f840 3c04 	str.w	r3, [r0, #-4]
  4002b4:	f840 1c08 	str.w	r1, [r0, #-8]
  4002b8:	4b05      	ldr	r3, [pc, #20]	; (4002d0 <pxPortInitialiseStack+0x24>)
  4002ba:	f840 3c0c 	str.w	r3, [r0, #-12]
  4002be:	f840 2c20 	str.w	r2, [r0, #-32]
  4002c2:	f06f 0302 	mvn.w	r3, #2
  4002c6:	f840 3c24 	str.w	r3, [r0, #-36]
  4002ca:	3844      	subs	r0, #68	; 0x44
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	0040023d 	.word	0x0040023d

004002d4 <SVC_Handler>:
  4002d4:	4b06      	ldr	r3, [pc, #24]	; (4002f0 <pxCurrentTCBConst2>)
  4002d6:	6819      	ldr	r1, [r3, #0]
  4002d8:	6808      	ldr	r0, [r1, #0]
  4002da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002de:	f380 8809 	msr	PSP, r0
  4002e2:	f3bf 8f6f 	isb	sy
  4002e6:	f04f 0000 	mov.w	r0, #0
  4002ea:	f380 8811 	msr	BASEPRI, r0
  4002ee:	4770      	bx	lr

004002f0 <pxCurrentTCBConst2>:
  4002f0:	2040c1fc 	.word	0x2040c1fc
  4002f4:	4770      	bx	lr
  4002f6:	bf00      	nop

004002f8 <vPortEnterCritical>:
  4002f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4002fc:	b672      	cpsid	i
  4002fe:	f383 8811 	msr	BASEPRI, r3
  400302:	f3bf 8f6f 	isb	sy
  400306:	f3bf 8f4f 	dsb	sy
  40030a:	b662      	cpsie	i
  40030c:	4a0b      	ldr	r2, [pc, #44]	; (40033c <vPortEnterCritical+0x44>)
  40030e:	6813      	ldr	r3, [r2, #0]
  400310:	3301      	adds	r3, #1
  400312:	6013      	str	r3, [r2, #0]
  400314:	2b01      	cmp	r3, #1
  400316:	d10f      	bne.n	400338 <vPortEnterCritical+0x40>
  400318:	4b09      	ldr	r3, [pc, #36]	; (400340 <vPortEnterCritical+0x48>)
  40031a:	681b      	ldr	r3, [r3, #0]
  40031c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400320:	d00a      	beq.n	400338 <vPortEnterCritical+0x40>
  400322:	f04f 0380 	mov.w	r3, #128	; 0x80
  400326:	b672      	cpsid	i
  400328:	f383 8811 	msr	BASEPRI, r3
  40032c:	f3bf 8f6f 	isb	sy
  400330:	f3bf 8f4f 	dsb	sy
  400334:	b662      	cpsie	i
  400336:	e7fe      	b.n	400336 <vPortEnterCritical+0x3e>
  400338:	4770      	bx	lr
  40033a:	bf00      	nop
  40033c:	2040000c 	.word	0x2040000c
  400340:	e000ed04 	.word	0xe000ed04

00400344 <vPortExitCritical>:
  400344:	4b0a      	ldr	r3, [pc, #40]	; (400370 <vPortExitCritical+0x2c>)
  400346:	681b      	ldr	r3, [r3, #0]
  400348:	b953      	cbnz	r3, 400360 <vPortExitCritical+0x1c>
  40034a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40034e:	b672      	cpsid	i
  400350:	f383 8811 	msr	BASEPRI, r3
  400354:	f3bf 8f6f 	isb	sy
  400358:	f3bf 8f4f 	dsb	sy
  40035c:	b662      	cpsie	i
  40035e:	e7fe      	b.n	40035e <vPortExitCritical+0x1a>
  400360:	3b01      	subs	r3, #1
  400362:	4a03      	ldr	r2, [pc, #12]	; (400370 <vPortExitCritical+0x2c>)
  400364:	6013      	str	r3, [r2, #0]
  400366:	b90b      	cbnz	r3, 40036c <vPortExitCritical+0x28>
  400368:	f383 8811 	msr	BASEPRI, r3
  40036c:	4770      	bx	lr
  40036e:	bf00      	nop
  400370:	2040000c 	.word	0x2040000c

00400374 <PendSV_Handler>:
  400374:	f3ef 8009 	mrs	r0, PSP
  400378:	f3bf 8f6f 	isb	sy
  40037c:	4b15      	ldr	r3, [pc, #84]	; (4003d4 <pxCurrentTCBConst>)
  40037e:	681a      	ldr	r2, [r3, #0]
  400380:	f01e 0f10 	tst.w	lr, #16
  400384:	bf08      	it	eq
  400386:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40038a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40038e:	6010      	str	r0, [r2, #0]
  400390:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400394:	f04f 0080 	mov.w	r0, #128	; 0x80
  400398:	b672      	cpsid	i
  40039a:	f380 8811 	msr	BASEPRI, r0
  40039e:	f3bf 8f4f 	dsb	sy
  4003a2:	f3bf 8f6f 	isb	sy
  4003a6:	b662      	cpsie	i
  4003a8:	f001 f862 	bl	401470 <vTaskSwitchContext>
  4003ac:	f04f 0000 	mov.w	r0, #0
  4003b0:	f380 8811 	msr	BASEPRI, r0
  4003b4:	bc08      	pop	{r3}
  4003b6:	6819      	ldr	r1, [r3, #0]
  4003b8:	6808      	ldr	r0, [r1, #0]
  4003ba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003be:	f01e 0f10 	tst.w	lr, #16
  4003c2:	bf08      	it	eq
  4003c4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4003c8:	f380 8809 	msr	PSP, r0
  4003cc:	f3bf 8f6f 	isb	sy
  4003d0:	4770      	bx	lr
  4003d2:	bf00      	nop

004003d4 <pxCurrentTCBConst>:
  4003d4:	2040c1fc 	.word	0x2040c1fc
  4003d8:	4770      	bx	lr
  4003da:	bf00      	nop

004003dc <SysTick_Handler>:
  4003dc:	b508      	push	{r3, lr}
  4003de:	f3ef 8311 	mrs	r3, BASEPRI
  4003e2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4003e6:	b672      	cpsid	i
  4003e8:	f382 8811 	msr	BASEPRI, r2
  4003ec:	f3bf 8f6f 	isb	sy
  4003f0:	f3bf 8f4f 	dsb	sy
  4003f4:	b662      	cpsie	i
  4003f6:	4b05      	ldr	r3, [pc, #20]	; (40040c <SysTick_Handler+0x30>)
  4003f8:	4798      	blx	r3
  4003fa:	b118      	cbz	r0, 400404 <SysTick_Handler+0x28>
  4003fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400400:	4b03      	ldr	r3, [pc, #12]	; (400410 <SysTick_Handler+0x34>)
  400402:	601a      	str	r2, [r3, #0]
  400404:	2300      	movs	r3, #0
  400406:	f383 8811 	msr	BASEPRI, r3
  40040a:	bd08      	pop	{r3, pc}
  40040c:	0040116d 	.word	0x0040116d
  400410:	e000ed04 	.word	0xe000ed04

00400414 <vPortSetupTimerInterrupt>:
  400414:	4a03      	ldr	r2, [pc, #12]	; (400424 <vPortSetupTimerInterrupt+0x10>)
  400416:	4b04      	ldr	r3, [pc, #16]	; (400428 <vPortSetupTimerInterrupt+0x14>)
  400418:	601a      	str	r2, [r3, #0]
  40041a:	2207      	movs	r2, #7
  40041c:	3b04      	subs	r3, #4
  40041e:	601a      	str	r2, [r3, #0]
  400420:	4770      	bx	lr
  400422:	bf00      	nop
  400424:	000927bf 	.word	0x000927bf
  400428:	e000e014 	.word	0xe000e014

0040042c <xPortStartScheduler>:
  40042c:	b500      	push	{lr}
  40042e:	b083      	sub	sp, #12
  400430:	4b25      	ldr	r3, [pc, #148]	; (4004c8 <xPortStartScheduler+0x9c>)
  400432:	781a      	ldrb	r2, [r3, #0]
  400434:	b2d2      	uxtb	r2, r2
  400436:	9201      	str	r2, [sp, #4]
  400438:	22ff      	movs	r2, #255	; 0xff
  40043a:	701a      	strb	r2, [r3, #0]
  40043c:	781b      	ldrb	r3, [r3, #0]
  40043e:	b2db      	uxtb	r3, r3
  400440:	f88d 3003 	strb.w	r3, [sp, #3]
  400444:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400448:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40044c:	4a1f      	ldr	r2, [pc, #124]	; (4004cc <xPortStartScheduler+0xa0>)
  40044e:	7013      	strb	r3, [r2, #0]
  400450:	2207      	movs	r2, #7
  400452:	4b1f      	ldr	r3, [pc, #124]	; (4004d0 <xPortStartScheduler+0xa4>)
  400454:	601a      	str	r2, [r3, #0]
  400456:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40045a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40045e:	d010      	beq.n	400482 <xPortStartScheduler+0x56>
  400460:	2206      	movs	r2, #6
  400462:	e000      	b.n	400466 <xPortStartScheduler+0x3a>
  400464:	460a      	mov	r2, r1
  400466:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40046a:	005b      	lsls	r3, r3, #1
  40046c:	b2db      	uxtb	r3, r3
  40046e:	f88d 3003 	strb.w	r3, [sp, #3]
  400472:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400476:	1e51      	subs	r1, r2, #1
  400478:	f013 0f80 	tst.w	r3, #128	; 0x80
  40047c:	d1f2      	bne.n	400464 <xPortStartScheduler+0x38>
  40047e:	4b14      	ldr	r3, [pc, #80]	; (4004d0 <xPortStartScheduler+0xa4>)
  400480:	601a      	str	r2, [r3, #0]
  400482:	4a13      	ldr	r2, [pc, #76]	; (4004d0 <xPortStartScheduler+0xa4>)
  400484:	6813      	ldr	r3, [r2, #0]
  400486:	021b      	lsls	r3, r3, #8
  400488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40048c:	6013      	str	r3, [r2, #0]
  40048e:	9b01      	ldr	r3, [sp, #4]
  400490:	b2db      	uxtb	r3, r3
  400492:	4a0d      	ldr	r2, [pc, #52]	; (4004c8 <xPortStartScheduler+0x9c>)
  400494:	7013      	strb	r3, [r2, #0]
  400496:	4b0f      	ldr	r3, [pc, #60]	; (4004d4 <xPortStartScheduler+0xa8>)
  400498:	681a      	ldr	r2, [r3, #0]
  40049a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40049e:	601a      	str	r2, [r3, #0]
  4004a0:	681a      	ldr	r2, [r3, #0]
  4004a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4004a6:	601a      	str	r2, [r3, #0]
  4004a8:	4b0b      	ldr	r3, [pc, #44]	; (4004d8 <xPortStartScheduler+0xac>)
  4004aa:	4798      	blx	r3
  4004ac:	2200      	movs	r2, #0
  4004ae:	4b0b      	ldr	r3, [pc, #44]	; (4004dc <xPortStartScheduler+0xb0>)
  4004b0:	601a      	str	r2, [r3, #0]
  4004b2:	4b0b      	ldr	r3, [pc, #44]	; (4004e0 <xPortStartScheduler+0xb4>)
  4004b4:	4798      	blx	r3
  4004b6:	4a0b      	ldr	r2, [pc, #44]	; (4004e4 <xPortStartScheduler+0xb8>)
  4004b8:	6813      	ldr	r3, [r2, #0]
  4004ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004be:	6013      	str	r3, [r2, #0]
  4004c0:	4b09      	ldr	r3, [pc, #36]	; (4004e8 <xPortStartScheduler+0xbc>)
  4004c2:	4798      	blx	r3
  4004c4:	4b09      	ldr	r3, [pc, #36]	; (4004ec <xPortStartScheduler+0xc0>)
  4004c6:	4798      	blx	r3
  4004c8:	e000e400 	.word	0xe000e400
  4004cc:	204009ec 	.word	0x204009ec
  4004d0:	204009f0 	.word	0x204009f0
  4004d4:	e000ed20 	.word	0xe000ed20
  4004d8:	00400415 	.word	0x00400415
  4004dc:	2040000c 	.word	0x2040000c
  4004e0:	00400299 	.word	0x00400299
  4004e4:	e000ef34 	.word	0xe000ef34
  4004e8:	00400279 	.word	0x00400279
  4004ec:	0040023d 	.word	0x0040023d

004004f0 <vPortValidateInterruptPriority>:
  4004f0:	f3ef 8305 	mrs	r3, IPSR
  4004f4:	2b0f      	cmp	r3, #15
  4004f6:	d911      	bls.n	40051c <vPortValidateInterruptPriority+0x2c>
  4004f8:	4a12      	ldr	r2, [pc, #72]	; (400544 <vPortValidateInterruptPriority+0x54>)
  4004fa:	5c9b      	ldrb	r3, [r3, r2]
  4004fc:	b2db      	uxtb	r3, r3
  4004fe:	4a12      	ldr	r2, [pc, #72]	; (400548 <vPortValidateInterruptPriority+0x58>)
  400500:	7812      	ldrb	r2, [r2, #0]
  400502:	429a      	cmp	r2, r3
  400504:	d90a      	bls.n	40051c <vPortValidateInterruptPriority+0x2c>
  400506:	f04f 0380 	mov.w	r3, #128	; 0x80
  40050a:	b672      	cpsid	i
  40050c:	f383 8811 	msr	BASEPRI, r3
  400510:	f3bf 8f6f 	isb	sy
  400514:	f3bf 8f4f 	dsb	sy
  400518:	b662      	cpsie	i
  40051a:	e7fe      	b.n	40051a <vPortValidateInterruptPriority+0x2a>
  40051c:	4b0b      	ldr	r3, [pc, #44]	; (40054c <vPortValidateInterruptPriority+0x5c>)
  40051e:	681b      	ldr	r3, [r3, #0]
  400520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400524:	4a0a      	ldr	r2, [pc, #40]	; (400550 <vPortValidateInterruptPriority+0x60>)
  400526:	6812      	ldr	r2, [r2, #0]
  400528:	4293      	cmp	r3, r2
  40052a:	d90a      	bls.n	400542 <vPortValidateInterruptPriority+0x52>
  40052c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400530:	b672      	cpsid	i
  400532:	f383 8811 	msr	BASEPRI, r3
  400536:	f3bf 8f6f 	isb	sy
  40053a:	f3bf 8f4f 	dsb	sy
  40053e:	b662      	cpsie	i
  400540:	e7fe      	b.n	400540 <vPortValidateInterruptPriority+0x50>
  400542:	4770      	bx	lr
  400544:	e000e3f0 	.word	0xe000e3f0
  400548:	204009ec 	.word	0x204009ec
  40054c:	e000ed0c 	.word	0xe000ed0c
  400550:	204009f0 	.word	0x204009f0

00400554 <pvPortMalloc>:
  400554:	b538      	push	{r3, r4, r5, lr}
  400556:	4604      	mov	r4, r0
  400558:	f010 0f07 	tst.w	r0, #7
  40055c:	d002      	beq.n	400564 <pvPortMalloc+0x10>
  40055e:	f020 0407 	bic.w	r4, r0, #7
  400562:	3408      	adds	r4, #8
  400564:	4b11      	ldr	r3, [pc, #68]	; (4005ac <pvPortMalloc+0x58>)
  400566:	4798      	blx	r3
  400568:	4b11      	ldr	r3, [pc, #68]	; (4005b0 <pvPortMalloc+0x5c>)
  40056a:	681b      	ldr	r3, [r3, #0]
  40056c:	b193      	cbz	r3, 400594 <pvPortMalloc+0x40>
  40056e:	4b11      	ldr	r3, [pc, #68]	; (4005b4 <pvPortMalloc+0x60>)
  400570:	681b      	ldr	r3, [r3, #0]
  400572:	441c      	add	r4, r3
  400574:	42a3      	cmp	r3, r4
  400576:	d213      	bcs.n	4005a0 <pvPortMalloc+0x4c>
  400578:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  40057c:	4294      	cmp	r4, r2
  40057e:	d80f      	bhi.n	4005a0 <pvPortMalloc+0x4c>
  400580:	4a0b      	ldr	r2, [pc, #44]	; (4005b0 <pvPortMalloc+0x5c>)
  400582:	6815      	ldr	r5, [r2, #0]
  400584:	441d      	add	r5, r3
  400586:	4b0b      	ldr	r3, [pc, #44]	; (4005b4 <pvPortMalloc+0x60>)
  400588:	601c      	str	r4, [r3, #0]
  40058a:	4b0b      	ldr	r3, [pc, #44]	; (4005b8 <pvPortMalloc+0x64>)
  40058c:	4798      	blx	r3
  40058e:	b14d      	cbz	r5, 4005a4 <pvPortMalloc+0x50>
  400590:	4628      	mov	r0, r5
  400592:	bd38      	pop	{r3, r4, r5, pc}
  400594:	4b09      	ldr	r3, [pc, #36]	; (4005bc <pvPortMalloc+0x68>)
  400596:	f023 0307 	bic.w	r3, r3, #7
  40059a:	4a05      	ldr	r2, [pc, #20]	; (4005b0 <pvPortMalloc+0x5c>)
  40059c:	6013      	str	r3, [r2, #0]
  40059e:	e7e6      	b.n	40056e <pvPortMalloc+0x1a>
  4005a0:	4b05      	ldr	r3, [pc, #20]	; (4005b8 <pvPortMalloc+0x64>)
  4005a2:	4798      	blx	r3
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <pvPortMalloc+0x6c>)
  4005a6:	4798      	blx	r3
  4005a8:	2500      	movs	r5, #0
  4005aa:	e7f1      	b.n	400590 <pvPortMalloc+0x3c>
  4005ac:	00401151 	.word	0x00401151
  4005b0:	204009f4 	.word	0x204009f4
  4005b4:	2040c1f8 	.word	0x2040c1f8
  4005b8:	004012b9 	.word	0x004012b9
  4005bc:	20400a00 	.word	0x20400a00
  4005c0:	004059df 	.word	0x004059df

004005c4 <vPortFree>:
  4005c4:	b150      	cbz	r0, 4005dc <vPortFree+0x18>
  4005c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005ca:	b672      	cpsid	i
  4005cc:	f383 8811 	msr	BASEPRI, r3
  4005d0:	f3bf 8f6f 	isb	sy
  4005d4:	f3bf 8f4f 	dsb	sy
  4005d8:	b662      	cpsie	i
  4005da:	e7fe      	b.n	4005da <vPortFree+0x16>
  4005dc:	4770      	bx	lr
	...

004005e0 <prvCopyDataToQueue>:
  4005e0:	b538      	push	{r3, r4, r5, lr}
  4005e2:	4604      	mov	r4, r0
  4005e4:	4615      	mov	r5, r2
  4005e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4005e8:	b95a      	cbnz	r2, 400602 <prvCopyDataToQueue+0x22>
  4005ea:	6803      	ldr	r3, [r0, #0]
  4005ec:	2b00      	cmp	r3, #0
  4005ee:	d12e      	bne.n	40064e <prvCopyDataToQueue+0x6e>
  4005f0:	6840      	ldr	r0, [r0, #4]
  4005f2:	4b1b      	ldr	r3, [pc, #108]	; (400660 <prvCopyDataToQueue+0x80>)
  4005f4:	4798      	blx	r3
  4005f6:	2300      	movs	r3, #0
  4005f8:	6063      	str	r3, [r4, #4]
  4005fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4005fc:	3301      	adds	r3, #1
  4005fe:	63a3      	str	r3, [r4, #56]	; 0x38
  400600:	bd38      	pop	{r3, r4, r5, pc}
  400602:	b96d      	cbnz	r5, 400620 <prvCopyDataToQueue+0x40>
  400604:	6880      	ldr	r0, [r0, #8]
  400606:	4b17      	ldr	r3, [pc, #92]	; (400664 <prvCopyDataToQueue+0x84>)
  400608:	4798      	blx	r3
  40060a:	68a3      	ldr	r3, [r4, #8]
  40060c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40060e:	4413      	add	r3, r2
  400610:	60a3      	str	r3, [r4, #8]
  400612:	6862      	ldr	r2, [r4, #4]
  400614:	4293      	cmp	r3, r2
  400616:	d31c      	bcc.n	400652 <prvCopyDataToQueue+0x72>
  400618:	6823      	ldr	r3, [r4, #0]
  40061a:	60a3      	str	r3, [r4, #8]
  40061c:	2000      	movs	r0, #0
  40061e:	e7ec      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  400620:	68c0      	ldr	r0, [r0, #12]
  400622:	4b10      	ldr	r3, [pc, #64]	; (400664 <prvCopyDataToQueue+0x84>)
  400624:	4798      	blx	r3
  400626:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400628:	425b      	negs	r3, r3
  40062a:	68e2      	ldr	r2, [r4, #12]
  40062c:	441a      	add	r2, r3
  40062e:	60e2      	str	r2, [r4, #12]
  400630:	6821      	ldr	r1, [r4, #0]
  400632:	428a      	cmp	r2, r1
  400634:	d202      	bcs.n	40063c <prvCopyDataToQueue+0x5c>
  400636:	6862      	ldr	r2, [r4, #4]
  400638:	4413      	add	r3, r2
  40063a:	60e3      	str	r3, [r4, #12]
  40063c:	2d02      	cmp	r5, #2
  40063e:	d10a      	bne.n	400656 <prvCopyDataToQueue+0x76>
  400640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400642:	b153      	cbz	r3, 40065a <prvCopyDataToQueue+0x7a>
  400644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400646:	3b01      	subs	r3, #1
  400648:	63a3      	str	r3, [r4, #56]	; 0x38
  40064a:	2000      	movs	r0, #0
  40064c:	e7d5      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  40064e:	2000      	movs	r0, #0
  400650:	e7d3      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  400652:	2000      	movs	r0, #0
  400654:	e7d1      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  400656:	2000      	movs	r0, #0
  400658:	e7cf      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  40065a:	2000      	movs	r0, #0
  40065c:	e7cd      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  40065e:	bf00      	nop
  400660:	00401871 	.word	0x00401871
  400664:	00405d15 	.word	0x00405d15

00400668 <prvNotifyQueueSetContainer>:
  400668:	b530      	push	{r4, r5, lr}
  40066a:	b083      	sub	sp, #12
  40066c:	9001      	str	r0, [sp, #4]
  40066e:	6d44      	ldr	r4, [r0, #84]	; 0x54
  400670:	b174      	cbz	r4, 400690 <prvNotifyQueueSetContainer+0x28>
  400672:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400676:	429a      	cmp	r2, r3
  400678:	d315      	bcc.n	4006a6 <prvNotifyQueueSetContainer+0x3e>
  40067a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40067e:	b672      	cpsid	i
  400680:	f383 8811 	msr	BASEPRI, r3
  400684:	f3bf 8f6f 	isb	sy
  400688:	f3bf 8f4f 	dsb	sy
  40068c:	b662      	cpsie	i
  40068e:	e7fe      	b.n	40068e <prvNotifyQueueSetContainer+0x26>
  400690:	f04f 0380 	mov.w	r3, #128	; 0x80
  400694:	b672      	cpsid	i
  400696:	f383 8811 	msr	BASEPRI, r3
  40069a:	f3bf 8f6f 	isb	sy
  40069e:	f3bf 8f4f 	dsb	sy
  4006a2:	b662      	cpsie	i
  4006a4:	e7fe      	b.n	4006a4 <prvNotifyQueueSetContainer+0x3c>
  4006a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4006a8:	4293      	cmp	r3, r2
  4006aa:	d803      	bhi.n	4006b4 <prvNotifyQueueSetContainer+0x4c>
  4006ac:	2500      	movs	r5, #0
  4006ae:	4628      	mov	r0, r5
  4006b0:	b003      	add	sp, #12
  4006b2:	bd30      	pop	{r4, r5, pc}
  4006b4:	460a      	mov	r2, r1
  4006b6:	a901      	add	r1, sp, #4
  4006b8:	4620      	mov	r0, r4
  4006ba:	4b0b      	ldr	r3, [pc, #44]	; (4006e8 <prvNotifyQueueSetContainer+0x80>)
  4006bc:	4798      	blx	r3
  4006be:	4605      	mov	r5, r0
  4006c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4006c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4006c6:	d10a      	bne.n	4006de <prvNotifyQueueSetContainer+0x76>
  4006c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d0ef      	beq.n	4006ae <prvNotifyQueueSetContainer+0x46>
  4006ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4006d2:	4b06      	ldr	r3, [pc, #24]	; (4006ec <prvNotifyQueueSetContainer+0x84>)
  4006d4:	4798      	blx	r3
  4006d6:	2800      	cmp	r0, #0
  4006d8:	bf18      	it	ne
  4006da:	2501      	movne	r5, #1
  4006dc:	e7e7      	b.n	4006ae <prvNotifyQueueSetContainer+0x46>
  4006de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4006e0:	3301      	adds	r3, #1
  4006e2:	64a3      	str	r3, [r4, #72]	; 0x48
  4006e4:	e7e3      	b.n	4006ae <prvNotifyQueueSetContainer+0x46>
  4006e6:	bf00      	nop
  4006e8:	004005e1 	.word	0x004005e1
  4006ec:	00401645 	.word	0x00401645

004006f0 <prvCopyDataFromQueue>:
  4006f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4006f2:	b172      	cbz	r2, 400712 <prvCopyDataFromQueue+0x22>
  4006f4:	b510      	push	{r4, lr}
  4006f6:	4603      	mov	r3, r0
  4006f8:	68c4      	ldr	r4, [r0, #12]
  4006fa:	4414      	add	r4, r2
  4006fc:	60c4      	str	r4, [r0, #12]
  4006fe:	6840      	ldr	r0, [r0, #4]
  400700:	4284      	cmp	r4, r0
  400702:	d301      	bcc.n	400708 <prvCopyDataFromQueue+0x18>
  400704:	6818      	ldr	r0, [r3, #0]
  400706:	60d8      	str	r0, [r3, #12]
  400708:	4608      	mov	r0, r1
  40070a:	68d9      	ldr	r1, [r3, #12]
  40070c:	4b01      	ldr	r3, [pc, #4]	; (400714 <prvCopyDataFromQueue+0x24>)
  40070e:	4798      	blx	r3
  400710:	bd10      	pop	{r4, pc}
  400712:	4770      	bx	lr
  400714:	00405d15 	.word	0x00405d15

00400718 <prvUnlockQueue>:
  400718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40071a:	4604      	mov	r4, r0
  40071c:	4b22      	ldr	r3, [pc, #136]	; (4007a8 <prvUnlockQueue+0x90>)
  40071e:	4798      	blx	r3
  400720:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400722:	2b00      	cmp	r3, #0
  400724:	dd1b      	ble.n	40075e <prvUnlockQueue+0x46>
  400726:	4d21      	ldr	r5, [pc, #132]	; (4007ac <prvUnlockQueue+0x94>)
  400728:	4f21      	ldr	r7, [pc, #132]	; (4007b0 <prvUnlockQueue+0x98>)
  40072a:	4e22      	ldr	r6, [pc, #136]	; (4007b4 <prvUnlockQueue+0x9c>)
  40072c:	e00b      	b.n	400746 <prvUnlockQueue+0x2e>
  40072e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400730:	b1ab      	cbz	r3, 40075e <prvUnlockQueue+0x46>
  400732:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400736:	47b0      	blx	r6
  400738:	b978      	cbnz	r0, 40075a <prvUnlockQueue+0x42>
  40073a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40073c:	3b01      	subs	r3, #1
  40073e:	64a3      	str	r3, [r4, #72]	; 0x48
  400740:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400742:	2b00      	cmp	r3, #0
  400744:	dd0b      	ble.n	40075e <prvUnlockQueue+0x46>
  400746:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400748:	2b00      	cmp	r3, #0
  40074a:	d0f0      	beq.n	40072e <prvUnlockQueue+0x16>
  40074c:	2100      	movs	r1, #0
  40074e:	4620      	mov	r0, r4
  400750:	47a8      	blx	r5
  400752:	2801      	cmp	r0, #1
  400754:	d1f1      	bne.n	40073a <prvUnlockQueue+0x22>
  400756:	47b8      	blx	r7
  400758:	e7ef      	b.n	40073a <prvUnlockQueue+0x22>
  40075a:	47b8      	blx	r7
  40075c:	e7ed      	b.n	40073a <prvUnlockQueue+0x22>
  40075e:	f04f 33ff 	mov.w	r3, #4294967295
  400762:	64a3      	str	r3, [r4, #72]	; 0x48
  400764:	4b14      	ldr	r3, [pc, #80]	; (4007b8 <prvUnlockQueue+0xa0>)
  400766:	4798      	blx	r3
  400768:	4b0f      	ldr	r3, [pc, #60]	; (4007a8 <prvUnlockQueue+0x90>)
  40076a:	4798      	blx	r3
  40076c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40076e:	2b00      	cmp	r3, #0
  400770:	dd14      	ble.n	40079c <prvUnlockQueue+0x84>
  400772:	6923      	ldr	r3, [r4, #16]
  400774:	b193      	cbz	r3, 40079c <prvUnlockQueue+0x84>
  400776:	f104 0610 	add.w	r6, r4, #16
  40077a:	4d0e      	ldr	r5, [pc, #56]	; (4007b4 <prvUnlockQueue+0x9c>)
  40077c:	4f0c      	ldr	r7, [pc, #48]	; (4007b0 <prvUnlockQueue+0x98>)
  40077e:	e007      	b.n	400790 <prvUnlockQueue+0x78>
  400780:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400782:	3b01      	subs	r3, #1
  400784:	6463      	str	r3, [r4, #68]	; 0x44
  400786:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400788:	2b00      	cmp	r3, #0
  40078a:	dd07      	ble.n	40079c <prvUnlockQueue+0x84>
  40078c:	6923      	ldr	r3, [r4, #16]
  40078e:	b12b      	cbz	r3, 40079c <prvUnlockQueue+0x84>
  400790:	4630      	mov	r0, r6
  400792:	47a8      	blx	r5
  400794:	2800      	cmp	r0, #0
  400796:	d0f3      	beq.n	400780 <prvUnlockQueue+0x68>
  400798:	47b8      	blx	r7
  40079a:	e7f1      	b.n	400780 <prvUnlockQueue+0x68>
  40079c:	f04f 33ff 	mov.w	r3, #4294967295
  4007a0:	6463      	str	r3, [r4, #68]	; 0x44
  4007a2:	4b05      	ldr	r3, [pc, #20]	; (4007b8 <prvUnlockQueue+0xa0>)
  4007a4:	4798      	blx	r3
  4007a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007a8:	004002f9 	.word	0x004002f9
  4007ac:	00400669 	.word	0x00400669
  4007b0:	004017a1 	.word	0x004017a1
  4007b4:	00401645 	.word	0x00401645
  4007b8:	00400345 	.word	0x00400345

004007bc <xQueueGenericReset>:
  4007bc:	b538      	push	{r3, r4, r5, lr}
  4007be:	b308      	cbz	r0, 400804 <xQueueGenericReset+0x48>
  4007c0:	4604      	mov	r4, r0
  4007c2:	460d      	mov	r5, r1
  4007c4:	4b1d      	ldr	r3, [pc, #116]	; (40083c <xQueueGenericReset+0x80>)
  4007c6:	4798      	blx	r3
  4007c8:	6822      	ldr	r2, [r4, #0]
  4007ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4007cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4007ce:	fb03 f301 	mul.w	r3, r3, r1
  4007d2:	18d0      	adds	r0, r2, r3
  4007d4:	6060      	str	r0, [r4, #4]
  4007d6:	2000      	movs	r0, #0
  4007d8:	63a0      	str	r0, [r4, #56]	; 0x38
  4007da:	60a2      	str	r2, [r4, #8]
  4007dc:	1a5b      	subs	r3, r3, r1
  4007de:	4413      	add	r3, r2
  4007e0:	60e3      	str	r3, [r4, #12]
  4007e2:	f04f 33ff 	mov.w	r3, #4294967295
  4007e6:	6463      	str	r3, [r4, #68]	; 0x44
  4007e8:	64a3      	str	r3, [r4, #72]	; 0x48
  4007ea:	b9fd      	cbnz	r5, 40082c <xQueueGenericReset+0x70>
  4007ec:	6923      	ldr	r3, [r4, #16]
  4007ee:	b12b      	cbz	r3, 4007fc <xQueueGenericReset+0x40>
  4007f0:	f104 0010 	add.w	r0, r4, #16
  4007f4:	4b12      	ldr	r3, [pc, #72]	; (400840 <xQueueGenericReset+0x84>)
  4007f6:	4798      	blx	r3
  4007f8:	2801      	cmp	r0, #1
  4007fa:	d00e      	beq.n	40081a <xQueueGenericReset+0x5e>
  4007fc:	4b11      	ldr	r3, [pc, #68]	; (400844 <xQueueGenericReset+0x88>)
  4007fe:	4798      	blx	r3
  400800:	2001      	movs	r0, #1
  400802:	bd38      	pop	{r3, r4, r5, pc}
  400804:	f04f 0380 	mov.w	r3, #128	; 0x80
  400808:	b672      	cpsid	i
  40080a:	f383 8811 	msr	BASEPRI, r3
  40080e:	f3bf 8f6f 	isb	sy
  400812:	f3bf 8f4f 	dsb	sy
  400816:	b662      	cpsie	i
  400818:	e7fe      	b.n	400818 <xQueueGenericReset+0x5c>
  40081a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40081e:	4b0a      	ldr	r3, [pc, #40]	; (400848 <xQueueGenericReset+0x8c>)
  400820:	601a      	str	r2, [r3, #0]
  400822:	f3bf 8f4f 	dsb	sy
  400826:	f3bf 8f6f 	isb	sy
  40082a:	e7e7      	b.n	4007fc <xQueueGenericReset+0x40>
  40082c:	f104 0010 	add.w	r0, r4, #16
  400830:	4d06      	ldr	r5, [pc, #24]	; (40084c <xQueueGenericReset+0x90>)
  400832:	47a8      	blx	r5
  400834:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400838:	47a8      	blx	r5
  40083a:	e7df      	b.n	4007fc <xQueueGenericReset+0x40>
  40083c:	004002f9 	.word	0x004002f9
  400840:	00401645 	.word	0x00401645
  400844:	00400345 	.word	0x00400345
  400848:	e000ed04 	.word	0xe000ed04
  40084c:	004001ad 	.word	0x004001ad

00400850 <xQueueGenericCreate>:
  400850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400852:	b950      	cbnz	r0, 40086a <xQueueGenericCreate+0x1a>
  400854:	f04f 0380 	mov.w	r3, #128	; 0x80
  400858:	b672      	cpsid	i
  40085a:	f383 8811 	msr	BASEPRI, r3
  40085e:	f3bf 8f6f 	isb	sy
  400862:	f3bf 8f4f 	dsb	sy
  400866:	b662      	cpsie	i
  400868:	e7fe      	b.n	400868 <xQueueGenericCreate+0x18>
  40086a:	4606      	mov	r6, r0
  40086c:	4617      	mov	r7, r2
  40086e:	460d      	mov	r5, r1
  400870:	b189      	cbz	r1, 400896 <xQueueGenericCreate+0x46>
  400872:	fb01 f000 	mul.w	r0, r1, r0
  400876:	3059      	adds	r0, #89	; 0x59
  400878:	4b12      	ldr	r3, [pc, #72]	; (4008c4 <xQueueGenericCreate+0x74>)
  40087a:	4798      	blx	r3
  40087c:	4604      	mov	r4, r0
  40087e:	b9e8      	cbnz	r0, 4008bc <xQueueGenericCreate+0x6c>
  400880:	f04f 0380 	mov.w	r3, #128	; 0x80
  400884:	b672      	cpsid	i
  400886:	f383 8811 	msr	BASEPRI, r3
  40088a:	f3bf 8f6f 	isb	sy
  40088e:	f3bf 8f4f 	dsb	sy
  400892:	b662      	cpsie	i
  400894:	e7fe      	b.n	400894 <xQueueGenericCreate+0x44>
  400896:	2058      	movs	r0, #88	; 0x58
  400898:	4b0a      	ldr	r3, [pc, #40]	; (4008c4 <xQueueGenericCreate+0x74>)
  40089a:	4798      	blx	r3
  40089c:	4604      	mov	r4, r0
  40089e:	2800      	cmp	r0, #0
  4008a0:	d0ee      	beq.n	400880 <xQueueGenericCreate+0x30>
  4008a2:	6020      	str	r0, [r4, #0]
  4008a4:	63e6      	str	r6, [r4, #60]	; 0x3c
  4008a6:	6425      	str	r5, [r4, #64]	; 0x40
  4008a8:	2101      	movs	r1, #1
  4008aa:	4620      	mov	r0, r4
  4008ac:	4b06      	ldr	r3, [pc, #24]	; (4008c8 <xQueueGenericCreate+0x78>)
  4008ae:	4798      	blx	r3
  4008b0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  4008b4:	2300      	movs	r3, #0
  4008b6:	6563      	str	r3, [r4, #84]	; 0x54
  4008b8:	4620      	mov	r0, r4
  4008ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4008bc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4008c0:	6003      	str	r3, [r0, #0]
  4008c2:	e7ef      	b.n	4008a4 <xQueueGenericCreate+0x54>
  4008c4:	00400555 	.word	0x00400555
  4008c8:	004007bd 	.word	0x004007bd

004008cc <xQueueGenericSend>:
  4008cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008d0:	b085      	sub	sp, #20
  4008d2:	9201      	str	r2, [sp, #4]
  4008d4:	b1b8      	cbz	r0, 400906 <xQueueGenericSend+0x3a>
  4008d6:	4604      	mov	r4, r0
  4008d8:	b301      	cbz	r1, 40091c <xQueueGenericSend+0x50>
  4008da:	2b02      	cmp	r3, #2
  4008dc:	d02c      	beq.n	400938 <xQueueGenericSend+0x6c>
  4008de:	461d      	mov	r5, r3
  4008e0:	4688      	mov	r8, r1
  4008e2:	4b66      	ldr	r3, [pc, #408]	; (400a7c <xQueueGenericSend+0x1b0>)
  4008e4:	4798      	blx	r3
  4008e6:	2800      	cmp	r0, #0
  4008e8:	d134      	bne.n	400954 <xQueueGenericSend+0x88>
  4008ea:	9b01      	ldr	r3, [sp, #4]
  4008ec:	2b00      	cmp	r3, #0
  4008ee:	d038      	beq.n	400962 <xQueueGenericSend+0x96>
  4008f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008f4:	b672      	cpsid	i
  4008f6:	f383 8811 	msr	BASEPRI, r3
  4008fa:	f3bf 8f6f 	isb	sy
  4008fe:	f3bf 8f4f 	dsb	sy
  400902:	b662      	cpsie	i
  400904:	e7fe      	b.n	400904 <xQueueGenericSend+0x38>
  400906:	f04f 0380 	mov.w	r3, #128	; 0x80
  40090a:	b672      	cpsid	i
  40090c:	f383 8811 	msr	BASEPRI, r3
  400910:	f3bf 8f6f 	isb	sy
  400914:	f3bf 8f4f 	dsb	sy
  400918:	b662      	cpsie	i
  40091a:	e7fe      	b.n	40091a <xQueueGenericSend+0x4e>
  40091c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40091e:	2a00      	cmp	r2, #0
  400920:	d0db      	beq.n	4008da <xQueueGenericSend+0xe>
  400922:	f04f 0380 	mov.w	r3, #128	; 0x80
  400926:	b672      	cpsid	i
  400928:	f383 8811 	msr	BASEPRI, r3
  40092c:	f3bf 8f6f 	isb	sy
  400930:	f3bf 8f4f 	dsb	sy
  400934:	b662      	cpsie	i
  400936:	e7fe      	b.n	400936 <xQueueGenericSend+0x6a>
  400938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40093a:	2a01      	cmp	r2, #1
  40093c:	d0cf      	beq.n	4008de <xQueueGenericSend+0x12>
  40093e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400942:	b672      	cpsid	i
  400944:	f383 8811 	msr	BASEPRI, r3
  400948:	f3bf 8f6f 	isb	sy
  40094c:	f3bf 8f4f 	dsb	sy
  400950:	b662      	cpsie	i
  400952:	e7fe      	b.n	400952 <xQueueGenericSend+0x86>
  400954:	2700      	movs	r7, #0
  400956:	4e4a      	ldr	r6, [pc, #296]	; (400a80 <xQueueGenericSend+0x1b4>)
  400958:	f8df a150 	ldr.w	sl, [pc, #336]	; 400aac <xQueueGenericSend+0x1e0>
  40095c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400a8c <xQueueGenericSend+0x1c0>
  400960:	e042      	b.n	4009e8 <xQueueGenericSend+0x11c>
  400962:	2700      	movs	r7, #0
  400964:	e7f7      	b.n	400956 <xQueueGenericSend+0x8a>
  400966:	462a      	mov	r2, r5
  400968:	4641      	mov	r1, r8
  40096a:	4620      	mov	r0, r4
  40096c:	4b45      	ldr	r3, [pc, #276]	; (400a84 <xQueueGenericSend+0x1b8>)
  40096e:	4798      	blx	r3
  400970:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400972:	b19b      	cbz	r3, 40099c <xQueueGenericSend+0xd0>
  400974:	4629      	mov	r1, r5
  400976:	4620      	mov	r0, r4
  400978:	4b43      	ldr	r3, [pc, #268]	; (400a88 <xQueueGenericSend+0x1bc>)
  40097a:	4798      	blx	r3
  40097c:	2801      	cmp	r0, #1
  40097e:	d107      	bne.n	400990 <xQueueGenericSend+0xc4>
  400980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400984:	4b41      	ldr	r3, [pc, #260]	; (400a8c <xQueueGenericSend+0x1c0>)
  400986:	601a      	str	r2, [r3, #0]
  400988:	f3bf 8f4f 	dsb	sy
  40098c:	f3bf 8f6f 	isb	sy
  400990:	4b3f      	ldr	r3, [pc, #252]	; (400a90 <xQueueGenericSend+0x1c4>)
  400992:	4798      	blx	r3
  400994:	2001      	movs	r0, #1
  400996:	b005      	add	sp, #20
  400998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40099c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40099e:	b173      	cbz	r3, 4009be <xQueueGenericSend+0xf2>
  4009a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4009a4:	4b3b      	ldr	r3, [pc, #236]	; (400a94 <xQueueGenericSend+0x1c8>)
  4009a6:	4798      	blx	r3
  4009a8:	2801      	cmp	r0, #1
  4009aa:	d1f1      	bne.n	400990 <xQueueGenericSend+0xc4>
  4009ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009b0:	4b36      	ldr	r3, [pc, #216]	; (400a8c <xQueueGenericSend+0x1c0>)
  4009b2:	601a      	str	r2, [r3, #0]
  4009b4:	f3bf 8f4f 	dsb	sy
  4009b8:	f3bf 8f6f 	isb	sy
  4009bc:	e7e8      	b.n	400990 <xQueueGenericSend+0xc4>
  4009be:	2800      	cmp	r0, #0
  4009c0:	d0e6      	beq.n	400990 <xQueueGenericSend+0xc4>
  4009c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009c6:	4b31      	ldr	r3, [pc, #196]	; (400a8c <xQueueGenericSend+0x1c0>)
  4009c8:	601a      	str	r2, [r3, #0]
  4009ca:	f3bf 8f4f 	dsb	sy
  4009ce:	f3bf 8f6f 	isb	sy
  4009d2:	e7dd      	b.n	400990 <xQueueGenericSend+0xc4>
  4009d4:	4b2e      	ldr	r3, [pc, #184]	; (400a90 <xQueueGenericSend+0x1c4>)
  4009d6:	4798      	blx	r3
  4009d8:	2000      	movs	r0, #0
  4009da:	e7dc      	b.n	400996 <xQueueGenericSend+0xca>
  4009dc:	4620      	mov	r0, r4
  4009de:	4b2e      	ldr	r3, [pc, #184]	; (400a98 <xQueueGenericSend+0x1cc>)
  4009e0:	4798      	blx	r3
  4009e2:	4b2e      	ldr	r3, [pc, #184]	; (400a9c <xQueueGenericSend+0x1d0>)
  4009e4:	4798      	blx	r3
  4009e6:	2701      	movs	r7, #1
  4009e8:	47b0      	blx	r6
  4009ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4009ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4009ee:	429a      	cmp	r2, r3
  4009f0:	d3b9      	bcc.n	400966 <xQueueGenericSend+0x9a>
  4009f2:	2d02      	cmp	r5, #2
  4009f4:	d0b7      	beq.n	400966 <xQueueGenericSend+0x9a>
  4009f6:	9b01      	ldr	r3, [sp, #4]
  4009f8:	2b00      	cmp	r3, #0
  4009fa:	d0eb      	beq.n	4009d4 <xQueueGenericSend+0x108>
  4009fc:	b90f      	cbnz	r7, 400a02 <xQueueGenericSend+0x136>
  4009fe:	a802      	add	r0, sp, #8
  400a00:	47d0      	blx	sl
  400a02:	4b23      	ldr	r3, [pc, #140]	; (400a90 <xQueueGenericSend+0x1c4>)
  400a04:	4798      	blx	r3
  400a06:	4b26      	ldr	r3, [pc, #152]	; (400aa0 <xQueueGenericSend+0x1d4>)
  400a08:	4798      	blx	r3
  400a0a:	47b0      	blx	r6
  400a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a12:	d101      	bne.n	400a18 <xQueueGenericSend+0x14c>
  400a14:	2300      	movs	r3, #0
  400a16:	6463      	str	r3, [r4, #68]	; 0x44
  400a18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a1e:	d101      	bne.n	400a24 <xQueueGenericSend+0x158>
  400a20:	2300      	movs	r3, #0
  400a22:	64a3      	str	r3, [r4, #72]	; 0x48
  400a24:	4b1a      	ldr	r3, [pc, #104]	; (400a90 <xQueueGenericSend+0x1c4>)
  400a26:	4798      	blx	r3
  400a28:	a901      	add	r1, sp, #4
  400a2a:	a802      	add	r0, sp, #8
  400a2c:	4b1d      	ldr	r3, [pc, #116]	; (400aa4 <xQueueGenericSend+0x1d8>)
  400a2e:	4798      	blx	r3
  400a30:	b9e0      	cbnz	r0, 400a6c <xQueueGenericSend+0x1a0>
  400a32:	47b0      	blx	r6
  400a34:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400a38:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  400a3a:	4b15      	ldr	r3, [pc, #84]	; (400a90 <xQueueGenericSend+0x1c4>)
  400a3c:	4798      	blx	r3
  400a3e:	45bb      	cmp	fp, r7
  400a40:	d1cc      	bne.n	4009dc <xQueueGenericSend+0x110>
  400a42:	9901      	ldr	r1, [sp, #4]
  400a44:	f104 0010 	add.w	r0, r4, #16
  400a48:	4b17      	ldr	r3, [pc, #92]	; (400aa8 <xQueueGenericSend+0x1dc>)
  400a4a:	4798      	blx	r3
  400a4c:	4620      	mov	r0, r4
  400a4e:	4b12      	ldr	r3, [pc, #72]	; (400a98 <xQueueGenericSend+0x1cc>)
  400a50:	4798      	blx	r3
  400a52:	4b12      	ldr	r3, [pc, #72]	; (400a9c <xQueueGenericSend+0x1d0>)
  400a54:	4798      	blx	r3
  400a56:	2800      	cmp	r0, #0
  400a58:	d1c5      	bne.n	4009e6 <xQueueGenericSend+0x11a>
  400a5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400a5e:	f8c9 3000 	str.w	r3, [r9]
  400a62:	f3bf 8f4f 	dsb	sy
  400a66:	f3bf 8f6f 	isb	sy
  400a6a:	e7bc      	b.n	4009e6 <xQueueGenericSend+0x11a>
  400a6c:	4620      	mov	r0, r4
  400a6e:	4b0a      	ldr	r3, [pc, #40]	; (400a98 <xQueueGenericSend+0x1cc>)
  400a70:	4798      	blx	r3
  400a72:	4b0a      	ldr	r3, [pc, #40]	; (400a9c <xQueueGenericSend+0x1d0>)
  400a74:	4798      	blx	r3
  400a76:	2000      	movs	r0, #0
  400a78:	e78d      	b.n	400996 <xQueueGenericSend+0xca>
  400a7a:	bf00      	nop
  400a7c:	004017ad 	.word	0x004017ad
  400a80:	004002f9 	.word	0x004002f9
  400a84:	004005e1 	.word	0x004005e1
  400a88:	00400669 	.word	0x00400669
  400a8c:	e000ed04 	.word	0xe000ed04
  400a90:	00400345 	.word	0x00400345
  400a94:	00401645 	.word	0x00401645
  400a98:	00400719 	.word	0x00400719
  400a9c:	004012b9 	.word	0x004012b9
  400aa0:	00401151 	.word	0x00401151
  400aa4:	0040170d 	.word	0x0040170d
  400aa8:	00401541 	.word	0x00401541
  400aac:	004016dd 	.word	0x004016dd

00400ab0 <xQueueGenericSendFromISR>:
  400ab0:	2800      	cmp	r0, #0
  400ab2:	d036      	beq.n	400b22 <xQueueGenericSendFromISR+0x72>
  400ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ab8:	4604      	mov	r4, r0
  400aba:	2900      	cmp	r1, #0
  400abc:	d03c      	beq.n	400b38 <xQueueGenericSendFromISR+0x88>
  400abe:	2b02      	cmp	r3, #2
  400ac0:	d048      	beq.n	400b54 <xQueueGenericSendFromISR+0xa4>
  400ac2:	461e      	mov	r6, r3
  400ac4:	4615      	mov	r5, r2
  400ac6:	4688      	mov	r8, r1
  400ac8:	4b35      	ldr	r3, [pc, #212]	; (400ba0 <xQueueGenericSendFromISR+0xf0>)
  400aca:	4798      	blx	r3
  400acc:	f3ef 8711 	mrs	r7, BASEPRI
  400ad0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ad4:	b672      	cpsid	i
  400ad6:	f383 8811 	msr	BASEPRI, r3
  400ada:	f3bf 8f6f 	isb	sy
  400ade:	f3bf 8f4f 	dsb	sy
  400ae2:	b662      	cpsie	i
  400ae4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ae6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ae8:	429a      	cmp	r2, r3
  400aea:	d301      	bcc.n	400af0 <xQueueGenericSendFromISR+0x40>
  400aec:	2e02      	cmp	r6, #2
  400aee:	d14f      	bne.n	400b90 <xQueueGenericSendFromISR+0xe0>
  400af0:	4632      	mov	r2, r6
  400af2:	4641      	mov	r1, r8
  400af4:	4620      	mov	r0, r4
  400af6:	4b2b      	ldr	r3, [pc, #172]	; (400ba4 <xQueueGenericSendFromISR+0xf4>)
  400af8:	4798      	blx	r3
  400afa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400afc:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b00:	d141      	bne.n	400b86 <xQueueGenericSendFromISR+0xd6>
  400b02:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400b04:	2b00      	cmp	r3, #0
  400b06:	d033      	beq.n	400b70 <xQueueGenericSendFromISR+0xc0>
  400b08:	4631      	mov	r1, r6
  400b0a:	4620      	mov	r0, r4
  400b0c:	4b26      	ldr	r3, [pc, #152]	; (400ba8 <xQueueGenericSendFromISR+0xf8>)
  400b0e:	4798      	blx	r3
  400b10:	2d00      	cmp	r5, #0
  400b12:	d03f      	beq.n	400b94 <xQueueGenericSendFromISR+0xe4>
  400b14:	2801      	cmp	r0, #1
  400b16:	d13d      	bne.n	400b94 <xQueueGenericSendFromISR+0xe4>
  400b18:	6028      	str	r0, [r5, #0]
  400b1a:	f387 8811 	msr	BASEPRI, r7
  400b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b22:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b26:	b672      	cpsid	i
  400b28:	f383 8811 	msr	BASEPRI, r3
  400b2c:	f3bf 8f6f 	isb	sy
  400b30:	f3bf 8f4f 	dsb	sy
  400b34:	b662      	cpsie	i
  400b36:	e7fe      	b.n	400b36 <xQueueGenericSendFromISR+0x86>
  400b38:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400b3a:	2800      	cmp	r0, #0
  400b3c:	d0bf      	beq.n	400abe <xQueueGenericSendFromISR+0xe>
  400b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b42:	b672      	cpsid	i
  400b44:	f383 8811 	msr	BASEPRI, r3
  400b48:	f3bf 8f6f 	isb	sy
  400b4c:	f3bf 8f4f 	dsb	sy
  400b50:	b662      	cpsie	i
  400b52:	e7fe      	b.n	400b52 <xQueueGenericSendFromISR+0xa2>
  400b54:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400b56:	2801      	cmp	r0, #1
  400b58:	d0b3      	beq.n	400ac2 <xQueueGenericSendFromISR+0x12>
  400b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b5e:	b672      	cpsid	i
  400b60:	f383 8811 	msr	BASEPRI, r3
  400b64:	f3bf 8f6f 	isb	sy
  400b68:	f3bf 8f4f 	dsb	sy
  400b6c:	b662      	cpsie	i
  400b6e:	e7fe      	b.n	400b6e <xQueueGenericSendFromISR+0xbe>
  400b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400b72:	b18b      	cbz	r3, 400b98 <xQueueGenericSendFromISR+0xe8>
  400b74:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b78:	4b0c      	ldr	r3, [pc, #48]	; (400bac <xQueueGenericSendFromISR+0xfc>)
  400b7a:	4798      	blx	r3
  400b7c:	b175      	cbz	r5, 400b9c <xQueueGenericSendFromISR+0xec>
  400b7e:	b168      	cbz	r0, 400b9c <xQueueGenericSendFromISR+0xec>
  400b80:	2001      	movs	r0, #1
  400b82:	6028      	str	r0, [r5, #0]
  400b84:	e7c9      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400b86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b88:	3301      	adds	r3, #1
  400b8a:	64a3      	str	r3, [r4, #72]	; 0x48
  400b8c:	2001      	movs	r0, #1
  400b8e:	e7c4      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400b90:	2000      	movs	r0, #0
  400b92:	e7c2      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400b94:	2001      	movs	r0, #1
  400b96:	e7c0      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400b98:	2001      	movs	r0, #1
  400b9a:	e7be      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400b9c:	2001      	movs	r0, #1
  400b9e:	e7bc      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400ba0:	004004f1 	.word	0x004004f1
  400ba4:	004005e1 	.word	0x004005e1
  400ba8:	00400669 	.word	0x00400669
  400bac:	00401645 	.word	0x00401645

00400bb0 <xQueueGenericReceive>:
  400bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400bb4:	b084      	sub	sp, #16
  400bb6:	9201      	str	r2, [sp, #4]
  400bb8:	b198      	cbz	r0, 400be2 <xQueueGenericReceive+0x32>
  400bba:	4604      	mov	r4, r0
  400bbc:	b1e1      	cbz	r1, 400bf8 <xQueueGenericReceive+0x48>
  400bbe:	4698      	mov	r8, r3
  400bc0:	460f      	mov	r7, r1
  400bc2:	4b61      	ldr	r3, [pc, #388]	; (400d48 <xQueueGenericReceive+0x198>)
  400bc4:	4798      	blx	r3
  400bc6:	bb28      	cbnz	r0, 400c14 <xQueueGenericReceive+0x64>
  400bc8:	9b01      	ldr	r3, [sp, #4]
  400bca:	b353      	cbz	r3, 400c22 <xQueueGenericReceive+0x72>
  400bcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bd0:	b672      	cpsid	i
  400bd2:	f383 8811 	msr	BASEPRI, r3
  400bd6:	f3bf 8f6f 	isb	sy
  400bda:	f3bf 8f4f 	dsb	sy
  400bde:	b662      	cpsie	i
  400be0:	e7fe      	b.n	400be0 <xQueueGenericReceive+0x30>
  400be2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400be6:	b672      	cpsid	i
  400be8:	f383 8811 	msr	BASEPRI, r3
  400bec:	f3bf 8f6f 	isb	sy
  400bf0:	f3bf 8f4f 	dsb	sy
  400bf4:	b662      	cpsie	i
  400bf6:	e7fe      	b.n	400bf6 <xQueueGenericReceive+0x46>
  400bf8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400bfa:	2a00      	cmp	r2, #0
  400bfc:	d0df      	beq.n	400bbe <xQueueGenericReceive+0xe>
  400bfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c02:	b672      	cpsid	i
  400c04:	f383 8811 	msr	BASEPRI, r3
  400c08:	f3bf 8f6f 	isb	sy
  400c0c:	f3bf 8f4f 	dsb	sy
  400c10:	b662      	cpsie	i
  400c12:	e7fe      	b.n	400c12 <xQueueGenericReceive+0x62>
  400c14:	2600      	movs	r6, #0
  400c16:	4d4d      	ldr	r5, [pc, #308]	; (400d4c <xQueueGenericReceive+0x19c>)
  400c18:	f8df a160 	ldr.w	sl, [pc, #352]	; 400d7c <xQueueGenericReceive+0x1cc>
  400c1c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 400d5c <xQueueGenericReceive+0x1ac>
  400c20:	e04b      	b.n	400cba <xQueueGenericReceive+0x10a>
  400c22:	2600      	movs	r6, #0
  400c24:	e7f7      	b.n	400c16 <xQueueGenericReceive+0x66>
  400c26:	68e5      	ldr	r5, [r4, #12]
  400c28:	4639      	mov	r1, r7
  400c2a:	4620      	mov	r0, r4
  400c2c:	4b48      	ldr	r3, [pc, #288]	; (400d50 <xQueueGenericReceive+0x1a0>)
  400c2e:	4798      	blx	r3
  400c30:	f1b8 0f00 	cmp.w	r8, #0
  400c34:	d11d      	bne.n	400c72 <xQueueGenericReceive+0xc2>
  400c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400c38:	3b01      	subs	r3, #1
  400c3a:	63a3      	str	r3, [r4, #56]	; 0x38
  400c3c:	6823      	ldr	r3, [r4, #0]
  400c3e:	b913      	cbnz	r3, 400c46 <xQueueGenericReceive+0x96>
  400c40:	4b44      	ldr	r3, [pc, #272]	; (400d54 <xQueueGenericReceive+0x1a4>)
  400c42:	4798      	blx	r3
  400c44:	6060      	str	r0, [r4, #4]
  400c46:	6923      	ldr	r3, [r4, #16]
  400c48:	b16b      	cbz	r3, 400c66 <xQueueGenericReceive+0xb6>
  400c4a:	f104 0010 	add.w	r0, r4, #16
  400c4e:	4b42      	ldr	r3, [pc, #264]	; (400d58 <xQueueGenericReceive+0x1a8>)
  400c50:	4798      	blx	r3
  400c52:	2801      	cmp	r0, #1
  400c54:	d107      	bne.n	400c66 <xQueueGenericReceive+0xb6>
  400c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c5a:	4b40      	ldr	r3, [pc, #256]	; (400d5c <xQueueGenericReceive+0x1ac>)
  400c5c:	601a      	str	r2, [r3, #0]
  400c5e:	f3bf 8f4f 	dsb	sy
  400c62:	f3bf 8f6f 	isb	sy
  400c66:	4b3e      	ldr	r3, [pc, #248]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400c68:	4798      	blx	r3
  400c6a:	2001      	movs	r0, #1
  400c6c:	b004      	add	sp, #16
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c72:	60e5      	str	r5, [r4, #12]
  400c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c76:	2b00      	cmp	r3, #0
  400c78:	d0f5      	beq.n	400c66 <xQueueGenericReceive+0xb6>
  400c7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c7e:	4b36      	ldr	r3, [pc, #216]	; (400d58 <xQueueGenericReceive+0x1a8>)
  400c80:	4798      	blx	r3
  400c82:	2800      	cmp	r0, #0
  400c84:	d0ef      	beq.n	400c66 <xQueueGenericReceive+0xb6>
  400c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c8a:	4b34      	ldr	r3, [pc, #208]	; (400d5c <xQueueGenericReceive+0x1ac>)
  400c8c:	601a      	str	r2, [r3, #0]
  400c8e:	f3bf 8f4f 	dsb	sy
  400c92:	f3bf 8f6f 	isb	sy
  400c96:	e7e6      	b.n	400c66 <xQueueGenericReceive+0xb6>
  400c98:	4b31      	ldr	r3, [pc, #196]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400c9a:	4798      	blx	r3
  400c9c:	2000      	movs	r0, #0
  400c9e:	e7e5      	b.n	400c6c <xQueueGenericReceive+0xbc>
  400ca0:	47a8      	blx	r5
  400ca2:	6860      	ldr	r0, [r4, #4]
  400ca4:	4b2f      	ldr	r3, [pc, #188]	; (400d64 <xQueueGenericReceive+0x1b4>)
  400ca6:	4798      	blx	r3
  400ca8:	4b2d      	ldr	r3, [pc, #180]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400caa:	4798      	blx	r3
  400cac:	e030      	b.n	400d10 <xQueueGenericReceive+0x160>
  400cae:	4620      	mov	r0, r4
  400cb0:	4b2d      	ldr	r3, [pc, #180]	; (400d68 <xQueueGenericReceive+0x1b8>)
  400cb2:	4798      	blx	r3
  400cb4:	4b2d      	ldr	r3, [pc, #180]	; (400d6c <xQueueGenericReceive+0x1bc>)
  400cb6:	4798      	blx	r3
  400cb8:	2601      	movs	r6, #1
  400cba:	47a8      	blx	r5
  400cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d1b1      	bne.n	400c26 <xQueueGenericReceive+0x76>
  400cc2:	9b01      	ldr	r3, [sp, #4]
  400cc4:	2b00      	cmp	r3, #0
  400cc6:	d0e7      	beq.n	400c98 <xQueueGenericReceive+0xe8>
  400cc8:	b90e      	cbnz	r6, 400cce <xQueueGenericReceive+0x11e>
  400cca:	a802      	add	r0, sp, #8
  400ccc:	47d0      	blx	sl
  400cce:	4b24      	ldr	r3, [pc, #144]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400cd0:	4798      	blx	r3
  400cd2:	4b27      	ldr	r3, [pc, #156]	; (400d70 <xQueueGenericReceive+0x1c0>)
  400cd4:	4798      	blx	r3
  400cd6:	47a8      	blx	r5
  400cd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400cda:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cde:	d101      	bne.n	400ce4 <xQueueGenericReceive+0x134>
  400ce0:	2300      	movs	r3, #0
  400ce2:	6463      	str	r3, [r4, #68]	; 0x44
  400ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cea:	d101      	bne.n	400cf0 <xQueueGenericReceive+0x140>
  400cec:	2300      	movs	r3, #0
  400cee:	64a3      	str	r3, [r4, #72]	; 0x48
  400cf0:	4b1b      	ldr	r3, [pc, #108]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400cf2:	4798      	blx	r3
  400cf4:	a901      	add	r1, sp, #4
  400cf6:	a802      	add	r0, sp, #8
  400cf8:	4b1e      	ldr	r3, [pc, #120]	; (400d74 <xQueueGenericReceive+0x1c4>)
  400cfa:	4798      	blx	r3
  400cfc:	b9e8      	cbnz	r0, 400d3a <xQueueGenericReceive+0x18a>
  400cfe:	47a8      	blx	r5
  400d00:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  400d02:	4b17      	ldr	r3, [pc, #92]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400d04:	4798      	blx	r3
  400d06:	2e00      	cmp	r6, #0
  400d08:	d1d1      	bne.n	400cae <xQueueGenericReceive+0xfe>
  400d0a:	6823      	ldr	r3, [r4, #0]
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d0c7      	beq.n	400ca0 <xQueueGenericReceive+0xf0>
  400d10:	9901      	ldr	r1, [sp, #4]
  400d12:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d16:	4b18      	ldr	r3, [pc, #96]	; (400d78 <xQueueGenericReceive+0x1c8>)
  400d18:	4798      	blx	r3
  400d1a:	4620      	mov	r0, r4
  400d1c:	4b12      	ldr	r3, [pc, #72]	; (400d68 <xQueueGenericReceive+0x1b8>)
  400d1e:	4798      	blx	r3
  400d20:	4b12      	ldr	r3, [pc, #72]	; (400d6c <xQueueGenericReceive+0x1bc>)
  400d22:	4798      	blx	r3
  400d24:	2800      	cmp	r0, #0
  400d26:	d1c7      	bne.n	400cb8 <xQueueGenericReceive+0x108>
  400d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400d2c:	f8c9 3000 	str.w	r3, [r9]
  400d30:	f3bf 8f4f 	dsb	sy
  400d34:	f3bf 8f6f 	isb	sy
  400d38:	e7be      	b.n	400cb8 <xQueueGenericReceive+0x108>
  400d3a:	4620      	mov	r0, r4
  400d3c:	4b0a      	ldr	r3, [pc, #40]	; (400d68 <xQueueGenericReceive+0x1b8>)
  400d3e:	4798      	blx	r3
  400d40:	4b0a      	ldr	r3, [pc, #40]	; (400d6c <xQueueGenericReceive+0x1bc>)
  400d42:	4798      	blx	r3
  400d44:	2000      	movs	r0, #0
  400d46:	e791      	b.n	400c6c <xQueueGenericReceive+0xbc>
  400d48:	004017ad 	.word	0x004017ad
  400d4c:	004002f9 	.word	0x004002f9
  400d50:	004006f1 	.word	0x004006f1
  400d54:	0040192d 	.word	0x0040192d
  400d58:	00401645 	.word	0x00401645
  400d5c:	e000ed04 	.word	0xe000ed04
  400d60:	00400345 	.word	0x00400345
  400d64:	004017cd 	.word	0x004017cd
  400d68:	00400719 	.word	0x00400719
  400d6c:	004012b9 	.word	0x004012b9
  400d70:	00401151 	.word	0x00401151
  400d74:	0040170d 	.word	0x0040170d
  400d78:	00401541 	.word	0x00401541
  400d7c:	004016dd 	.word	0x004016dd

00400d80 <vQueueAddToRegistry>:
  400d80:	b410      	push	{r4}
  400d82:	4b0b      	ldr	r3, [pc, #44]	; (400db0 <vQueueAddToRegistry+0x30>)
  400d84:	681b      	ldr	r3, [r3, #0]
  400d86:	b153      	cbz	r3, 400d9e <vQueueAddToRegistry+0x1e>
  400d88:	2301      	movs	r3, #1
  400d8a:	4c09      	ldr	r4, [pc, #36]	; (400db0 <vQueueAddToRegistry+0x30>)
  400d8c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400d90:	b132      	cbz	r2, 400da0 <vQueueAddToRegistry+0x20>
  400d92:	3301      	adds	r3, #1
  400d94:	2b08      	cmp	r3, #8
  400d96:	d1f9      	bne.n	400d8c <vQueueAddToRegistry+0xc>
  400d98:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d9c:	4770      	bx	lr
  400d9e:	2300      	movs	r3, #0
  400da0:	4a03      	ldr	r2, [pc, #12]	; (400db0 <vQueueAddToRegistry+0x30>)
  400da2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  400da6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400daa:	6058      	str	r0, [r3, #4]
  400dac:	e7f4      	b.n	400d98 <vQueueAddToRegistry+0x18>
  400dae:	bf00      	nop
  400db0:	2040c998 	.word	0x2040c998

00400db4 <vQueueWaitForMessageRestricted>:
  400db4:	b570      	push	{r4, r5, r6, lr}
  400db6:	4604      	mov	r4, r0
  400db8:	460d      	mov	r5, r1
  400dba:	4616      	mov	r6, r2
  400dbc:	4b0f      	ldr	r3, [pc, #60]	; (400dfc <vQueueWaitForMessageRestricted+0x48>)
  400dbe:	4798      	blx	r3
  400dc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dc6:	d00b      	beq.n	400de0 <vQueueWaitForMessageRestricted+0x2c>
  400dc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dca:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dce:	d00a      	beq.n	400de6 <vQueueWaitForMessageRestricted+0x32>
  400dd0:	4b0b      	ldr	r3, [pc, #44]	; (400e00 <vQueueWaitForMessageRestricted+0x4c>)
  400dd2:	4798      	blx	r3
  400dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400dd6:	b14b      	cbz	r3, 400dec <vQueueWaitForMessageRestricted+0x38>
  400dd8:	4620      	mov	r0, r4
  400dda:	4b0a      	ldr	r3, [pc, #40]	; (400e04 <vQueueWaitForMessageRestricted+0x50>)
  400ddc:	4798      	blx	r3
  400dde:	bd70      	pop	{r4, r5, r6, pc}
  400de0:	2300      	movs	r3, #0
  400de2:	6463      	str	r3, [r4, #68]	; 0x44
  400de4:	e7f0      	b.n	400dc8 <vQueueWaitForMessageRestricted+0x14>
  400de6:	2300      	movs	r3, #0
  400de8:	64a3      	str	r3, [r4, #72]	; 0x48
  400dea:	e7f1      	b.n	400dd0 <vQueueWaitForMessageRestricted+0x1c>
  400dec:	4632      	mov	r2, r6
  400dee:	4629      	mov	r1, r5
  400df0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400df4:	4b04      	ldr	r3, [pc, #16]	; (400e08 <vQueueWaitForMessageRestricted+0x54>)
  400df6:	4798      	blx	r3
  400df8:	e7ee      	b.n	400dd8 <vQueueWaitForMessageRestricted+0x24>
  400dfa:	bf00      	nop
  400dfc:	004002f9 	.word	0x004002f9
  400e00:	00400345 	.word	0x00400345
  400e04:	00400719 	.word	0x00400719
  400e08:	004015c5 	.word	0x004015c5

00400e0c <prvResetNextTaskUnblockTime>:
  400e0c:	4b08      	ldr	r3, [pc, #32]	; (400e30 <prvResetNextTaskUnblockTime+0x24>)
  400e0e:	681b      	ldr	r3, [r3, #0]
  400e10:	681b      	ldr	r3, [r3, #0]
  400e12:	b13b      	cbz	r3, 400e24 <prvResetNextTaskUnblockTime+0x18>
  400e14:	4b06      	ldr	r3, [pc, #24]	; (400e30 <prvResetNextTaskUnblockTime+0x24>)
  400e16:	681b      	ldr	r3, [r3, #0]
  400e18:	68db      	ldr	r3, [r3, #12]
  400e1a:	68db      	ldr	r3, [r3, #12]
  400e1c:	685a      	ldr	r2, [r3, #4]
  400e1e:	4b05      	ldr	r3, [pc, #20]	; (400e34 <prvResetNextTaskUnblockTime+0x28>)
  400e20:	601a      	str	r2, [r3, #0]
  400e22:	4770      	bx	lr
  400e24:	f04f 32ff 	mov.w	r2, #4294967295
  400e28:	4b02      	ldr	r3, [pc, #8]	; (400e34 <prvResetNextTaskUnblockTime+0x28>)
  400e2a:	601a      	str	r2, [r3, #0]
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	2040c200 	.word	0x2040c200
  400e34:	2040c2ac 	.word	0x2040c2ac

00400e38 <prvAddCurrentTaskToDelayedList>:
  400e38:	b510      	push	{r4, lr}
  400e3a:	4b0f      	ldr	r3, [pc, #60]	; (400e78 <prvAddCurrentTaskToDelayedList+0x40>)
  400e3c:	681b      	ldr	r3, [r3, #0]
  400e3e:	6058      	str	r0, [r3, #4]
  400e40:	4b0e      	ldr	r3, [pc, #56]	; (400e7c <prvAddCurrentTaskToDelayedList+0x44>)
  400e42:	681b      	ldr	r3, [r3, #0]
  400e44:	4298      	cmp	r0, r3
  400e46:	d30e      	bcc.n	400e66 <prvAddCurrentTaskToDelayedList+0x2e>
  400e48:	4604      	mov	r4, r0
  400e4a:	4b0d      	ldr	r3, [pc, #52]	; (400e80 <prvAddCurrentTaskToDelayedList+0x48>)
  400e4c:	6818      	ldr	r0, [r3, #0]
  400e4e:	4b0a      	ldr	r3, [pc, #40]	; (400e78 <prvAddCurrentTaskToDelayedList+0x40>)
  400e50:	6819      	ldr	r1, [r3, #0]
  400e52:	3104      	adds	r1, #4
  400e54:	4b0b      	ldr	r3, [pc, #44]	; (400e84 <prvAddCurrentTaskToDelayedList+0x4c>)
  400e56:	4798      	blx	r3
  400e58:	4b0b      	ldr	r3, [pc, #44]	; (400e88 <prvAddCurrentTaskToDelayedList+0x50>)
  400e5a:	681b      	ldr	r3, [r3, #0]
  400e5c:	429c      	cmp	r4, r3
  400e5e:	d201      	bcs.n	400e64 <prvAddCurrentTaskToDelayedList+0x2c>
  400e60:	4b09      	ldr	r3, [pc, #36]	; (400e88 <prvAddCurrentTaskToDelayedList+0x50>)
  400e62:	601c      	str	r4, [r3, #0]
  400e64:	bd10      	pop	{r4, pc}
  400e66:	4b09      	ldr	r3, [pc, #36]	; (400e8c <prvAddCurrentTaskToDelayedList+0x54>)
  400e68:	6818      	ldr	r0, [r3, #0]
  400e6a:	4b03      	ldr	r3, [pc, #12]	; (400e78 <prvAddCurrentTaskToDelayedList+0x40>)
  400e6c:	6819      	ldr	r1, [r3, #0]
  400e6e:	3104      	adds	r1, #4
  400e70:	4b04      	ldr	r3, [pc, #16]	; (400e84 <prvAddCurrentTaskToDelayedList+0x4c>)
  400e72:	4798      	blx	r3
  400e74:	bd10      	pop	{r4, pc}
  400e76:	bf00      	nop
  400e78:	2040c1fc 	.word	0x2040c1fc
  400e7c:	2040c2f4 	.word	0x2040c2f4
  400e80:	2040c200 	.word	0x2040c200
  400e84:	004001e1 	.word	0x004001e1
  400e88:	2040c2ac 	.word	0x2040c2ac
  400e8c:	2040c204 	.word	0x2040c204

00400e90 <xTaskGenericCreate>:
  400e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e94:	b083      	sub	sp, #12
  400e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  400e98:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  400e9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  400e9e:	b160      	cbz	r0, 400eba <xTaskGenericCreate+0x2a>
  400ea0:	2d04      	cmp	r5, #4
  400ea2:	d915      	bls.n	400ed0 <xTaskGenericCreate+0x40>
  400ea4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ea8:	b672      	cpsid	i
  400eaa:	f383 8811 	msr	BASEPRI, r3
  400eae:	f3bf 8f6f 	isb	sy
  400eb2:	f3bf 8f4f 	dsb	sy
  400eb6:	b662      	cpsie	i
  400eb8:	e7fe      	b.n	400eb8 <xTaskGenericCreate+0x28>
  400eba:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ebe:	b672      	cpsid	i
  400ec0:	f383 8811 	msr	BASEPRI, r3
  400ec4:	f3bf 8f6f 	isb	sy
  400ec8:	f3bf 8f4f 	dsb	sy
  400ecc:	b662      	cpsie	i
  400ece:	e7fe      	b.n	400ece <xTaskGenericCreate+0x3e>
  400ed0:	9001      	str	r0, [sp, #4]
  400ed2:	4698      	mov	r8, r3
  400ed4:	4691      	mov	r9, r2
  400ed6:	460f      	mov	r7, r1
  400ed8:	b936      	cbnz	r6, 400ee8 <xTaskGenericCreate+0x58>
  400eda:	0090      	lsls	r0, r2, #2
  400edc:	4b62      	ldr	r3, [pc, #392]	; (401068 <xTaskGenericCreate+0x1d8>)
  400ede:	4798      	blx	r3
  400ee0:	4606      	mov	r6, r0
  400ee2:	2800      	cmp	r0, #0
  400ee4:	f000 809e 	beq.w	401024 <xTaskGenericCreate+0x194>
  400ee8:	2058      	movs	r0, #88	; 0x58
  400eea:	4b5f      	ldr	r3, [pc, #380]	; (401068 <xTaskGenericCreate+0x1d8>)
  400eec:	4798      	blx	r3
  400eee:	4604      	mov	r4, r0
  400ef0:	2800      	cmp	r0, #0
  400ef2:	f000 8094 	beq.w	40101e <xTaskGenericCreate+0x18e>
  400ef6:	6306      	str	r6, [r0, #48]	; 0x30
  400ef8:	ea4f 0289 	mov.w	r2, r9, lsl #2
  400efc:	21a5      	movs	r1, #165	; 0xa5
  400efe:	4630      	mov	r0, r6
  400f00:	4b5a      	ldr	r3, [pc, #360]	; (40106c <xTaskGenericCreate+0x1dc>)
  400f02:	4798      	blx	r3
  400f04:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  400f08:	444e      	add	r6, r9
  400f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400f0c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
  400f10:	f023 0607 	bic.w	r6, r3, #7
  400f14:	783b      	ldrb	r3, [r7, #0]
  400f16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  400f1a:	783b      	ldrb	r3, [r7, #0]
  400f1c:	2b00      	cmp	r3, #0
  400f1e:	f040 8084 	bne.w	40102a <xTaskGenericCreate+0x19a>
  400f22:	2700      	movs	r7, #0
  400f24:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  400f28:	62e5      	str	r5, [r4, #44]	; 0x2c
  400f2a:	64a5      	str	r5, [r4, #72]	; 0x48
  400f2c:	64e7      	str	r7, [r4, #76]	; 0x4c
  400f2e:	f104 0904 	add.w	r9, r4, #4
  400f32:	4648      	mov	r0, r9
  400f34:	f8df b184 	ldr.w	fp, [pc, #388]	; 4010bc <xTaskGenericCreate+0x22c>
  400f38:	47d8      	blx	fp
  400f3a:	f104 0018 	add.w	r0, r4, #24
  400f3e:	47d8      	blx	fp
  400f40:	6124      	str	r4, [r4, #16]
  400f42:	f1c5 0305 	rsb	r3, r5, #5
  400f46:	61a3      	str	r3, [r4, #24]
  400f48:	6264      	str	r4, [r4, #36]	; 0x24
  400f4a:	6527      	str	r7, [r4, #80]	; 0x50
  400f4c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
  400f50:	4642      	mov	r2, r8
  400f52:	9901      	ldr	r1, [sp, #4]
  400f54:	4630      	mov	r0, r6
  400f56:	4b46      	ldr	r3, [pc, #280]	; (401070 <xTaskGenericCreate+0x1e0>)
  400f58:	4798      	blx	r3
  400f5a:	6020      	str	r0, [r4, #0]
  400f5c:	f1ba 0f00 	cmp.w	sl, #0
  400f60:	d001      	beq.n	400f66 <xTaskGenericCreate+0xd6>
  400f62:	f8ca 4000 	str.w	r4, [sl]
  400f66:	4b43      	ldr	r3, [pc, #268]	; (401074 <xTaskGenericCreate+0x1e4>)
  400f68:	4798      	blx	r3
  400f6a:	4a43      	ldr	r2, [pc, #268]	; (401078 <xTaskGenericCreate+0x1e8>)
  400f6c:	6813      	ldr	r3, [r2, #0]
  400f6e:	3301      	adds	r3, #1
  400f70:	6013      	str	r3, [r2, #0]
  400f72:	4b42      	ldr	r3, [pc, #264]	; (40107c <xTaskGenericCreate+0x1ec>)
  400f74:	681b      	ldr	r3, [r3, #0]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d166      	bne.n	401048 <xTaskGenericCreate+0x1b8>
  400f7a:	4b40      	ldr	r3, [pc, #256]	; (40107c <xTaskGenericCreate+0x1ec>)
  400f7c:	601c      	str	r4, [r3, #0]
  400f7e:	6813      	ldr	r3, [r2, #0]
  400f80:	2b01      	cmp	r3, #1
  400f82:	d121      	bne.n	400fc8 <xTaskGenericCreate+0x138>
  400f84:	4f3e      	ldr	r7, [pc, #248]	; (401080 <xTaskGenericCreate+0x1f0>)
  400f86:	4638      	mov	r0, r7
  400f88:	4e3e      	ldr	r6, [pc, #248]	; (401084 <xTaskGenericCreate+0x1f4>)
  400f8a:	47b0      	blx	r6
  400f8c:	f107 0014 	add.w	r0, r7, #20
  400f90:	47b0      	blx	r6
  400f92:	f107 0028 	add.w	r0, r7, #40	; 0x28
  400f96:	47b0      	blx	r6
  400f98:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  400f9c:	47b0      	blx	r6
  400f9e:	f107 0050 	add.w	r0, r7, #80	; 0x50
  400fa2:	47b0      	blx	r6
  400fa4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4010c0 <xTaskGenericCreate+0x230>
  400fa8:	4640      	mov	r0, r8
  400faa:	47b0      	blx	r6
  400fac:	4f36      	ldr	r7, [pc, #216]	; (401088 <xTaskGenericCreate+0x1f8>)
  400fae:	4638      	mov	r0, r7
  400fb0:	47b0      	blx	r6
  400fb2:	4836      	ldr	r0, [pc, #216]	; (40108c <xTaskGenericCreate+0x1fc>)
  400fb4:	47b0      	blx	r6
  400fb6:	4836      	ldr	r0, [pc, #216]	; (401090 <xTaskGenericCreate+0x200>)
  400fb8:	47b0      	blx	r6
  400fba:	4836      	ldr	r0, [pc, #216]	; (401094 <xTaskGenericCreate+0x204>)
  400fbc:	47b0      	blx	r6
  400fbe:	4b36      	ldr	r3, [pc, #216]	; (401098 <xTaskGenericCreate+0x208>)
  400fc0:	f8c3 8000 	str.w	r8, [r3]
  400fc4:	4b35      	ldr	r3, [pc, #212]	; (40109c <xTaskGenericCreate+0x20c>)
  400fc6:	601f      	str	r7, [r3, #0]
  400fc8:	4a35      	ldr	r2, [pc, #212]	; (4010a0 <xTaskGenericCreate+0x210>)
  400fca:	6813      	ldr	r3, [r2, #0]
  400fcc:	3301      	adds	r3, #1
  400fce:	6013      	str	r3, [r2, #0]
  400fd0:	6423      	str	r3, [r4, #64]	; 0x40
  400fd2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400fd4:	4a33      	ldr	r2, [pc, #204]	; (4010a4 <xTaskGenericCreate+0x214>)
  400fd6:	6811      	ldr	r1, [r2, #0]
  400fd8:	2301      	movs	r3, #1
  400fda:	4083      	lsls	r3, r0
  400fdc:	430b      	orrs	r3, r1
  400fde:	6013      	str	r3, [r2, #0]
  400fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400fe4:	4649      	mov	r1, r9
  400fe6:	4b26      	ldr	r3, [pc, #152]	; (401080 <xTaskGenericCreate+0x1f0>)
  400fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400fec:	4b2e      	ldr	r3, [pc, #184]	; (4010a8 <xTaskGenericCreate+0x218>)
  400fee:	4798      	blx	r3
  400ff0:	4b2e      	ldr	r3, [pc, #184]	; (4010ac <xTaskGenericCreate+0x21c>)
  400ff2:	4798      	blx	r3
  400ff4:	4b2e      	ldr	r3, [pc, #184]	; (4010b0 <xTaskGenericCreate+0x220>)
  400ff6:	681b      	ldr	r3, [r3, #0]
  400ff8:	2b00      	cmp	r3, #0
  400ffa:	d031      	beq.n	401060 <xTaskGenericCreate+0x1d0>
  400ffc:	4b1f      	ldr	r3, [pc, #124]	; (40107c <xTaskGenericCreate+0x1ec>)
  400ffe:	681b      	ldr	r3, [r3, #0]
  401000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401002:	429d      	cmp	r5, r3
  401004:	d92e      	bls.n	401064 <xTaskGenericCreate+0x1d4>
  401006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40100a:	4b2a      	ldr	r3, [pc, #168]	; (4010b4 <xTaskGenericCreate+0x224>)
  40100c:	601a      	str	r2, [r3, #0]
  40100e:	f3bf 8f4f 	dsb	sy
  401012:	f3bf 8f6f 	isb	sy
  401016:	2001      	movs	r0, #1
  401018:	b003      	add	sp, #12
  40101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40101e:	4630      	mov	r0, r6
  401020:	4b25      	ldr	r3, [pc, #148]	; (4010b8 <xTaskGenericCreate+0x228>)
  401022:	4798      	blx	r3
  401024:	f04f 30ff 	mov.w	r0, #4294967295
  401028:	e7f6      	b.n	401018 <xTaskGenericCreate+0x188>
  40102a:	463b      	mov	r3, r7
  40102c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401030:	3709      	adds	r7, #9
  401032:	7859      	ldrb	r1, [r3, #1]
  401034:	f802 1f01 	strb.w	r1, [r2, #1]!
  401038:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40103c:	2900      	cmp	r1, #0
  40103e:	f43f af70 	beq.w	400f22 <xTaskGenericCreate+0x92>
  401042:	42bb      	cmp	r3, r7
  401044:	d1f5      	bne.n	401032 <xTaskGenericCreate+0x1a2>
  401046:	e76c      	b.n	400f22 <xTaskGenericCreate+0x92>
  401048:	4b19      	ldr	r3, [pc, #100]	; (4010b0 <xTaskGenericCreate+0x220>)
  40104a:	681b      	ldr	r3, [r3, #0]
  40104c:	2b00      	cmp	r3, #0
  40104e:	d1bb      	bne.n	400fc8 <xTaskGenericCreate+0x138>
  401050:	4b0a      	ldr	r3, [pc, #40]	; (40107c <xTaskGenericCreate+0x1ec>)
  401052:	681b      	ldr	r3, [r3, #0]
  401054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401056:	429d      	cmp	r5, r3
  401058:	d3b6      	bcc.n	400fc8 <xTaskGenericCreate+0x138>
  40105a:	4b08      	ldr	r3, [pc, #32]	; (40107c <xTaskGenericCreate+0x1ec>)
  40105c:	601c      	str	r4, [r3, #0]
  40105e:	e7b3      	b.n	400fc8 <xTaskGenericCreate+0x138>
  401060:	2001      	movs	r0, #1
  401062:	e7d9      	b.n	401018 <xTaskGenericCreate+0x188>
  401064:	2001      	movs	r0, #1
  401066:	e7d7      	b.n	401018 <xTaskGenericCreate+0x188>
  401068:	00400555 	.word	0x00400555
  40106c:	00405e49 	.word	0x00405e49
  401070:	004002ad 	.word	0x004002ad
  401074:	004002f9 	.word	0x004002f9
  401078:	2040c26c 	.word	0x2040c26c
  40107c:	2040c1fc 	.word	0x2040c1fc
  401080:	2040c208 	.word	0x2040c208
  401084:	004001ad 	.word	0x004001ad
  401088:	2040c298 	.word	0x2040c298
  40108c:	2040c2b4 	.word	0x2040c2b4
  401090:	2040c2e0 	.word	0x2040c2e0
  401094:	2040c2cc 	.word	0x2040c2cc
  401098:	2040c200 	.word	0x2040c200
  40109c:	2040c204 	.word	0x2040c204
  4010a0:	2040c278 	.word	0x2040c278
  4010a4:	2040c280 	.word	0x2040c280
  4010a8:	004001c9 	.word	0x004001c9
  4010ac:	00400345 	.word	0x00400345
  4010b0:	2040c2c8 	.word	0x2040c2c8
  4010b4:	e000ed04 	.word	0xe000ed04
  4010b8:	004005c5 	.word	0x004005c5
  4010bc:	004001c3 	.word	0x004001c3
  4010c0:	2040c284 	.word	0x2040c284

004010c4 <vTaskStartScheduler>:
  4010c4:	b510      	push	{r4, lr}
  4010c6:	b084      	sub	sp, #16
  4010c8:	2300      	movs	r3, #0
  4010ca:	9303      	str	r3, [sp, #12]
  4010cc:	9302      	str	r3, [sp, #8]
  4010ce:	9301      	str	r3, [sp, #4]
  4010d0:	9300      	str	r3, [sp, #0]
  4010d2:	2282      	movs	r2, #130	; 0x82
  4010d4:	4916      	ldr	r1, [pc, #88]	; (401130 <vTaskStartScheduler+0x6c>)
  4010d6:	4817      	ldr	r0, [pc, #92]	; (401134 <vTaskStartScheduler+0x70>)
  4010d8:	4c17      	ldr	r4, [pc, #92]	; (401138 <vTaskStartScheduler+0x74>)
  4010da:	47a0      	blx	r4
  4010dc:	2801      	cmp	r0, #1
  4010de:	d00b      	beq.n	4010f8 <vTaskStartScheduler+0x34>
  4010e0:	bb20      	cbnz	r0, 40112c <vTaskStartScheduler+0x68>
  4010e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010e6:	b672      	cpsid	i
  4010e8:	f383 8811 	msr	BASEPRI, r3
  4010ec:	f3bf 8f6f 	isb	sy
  4010f0:	f3bf 8f4f 	dsb	sy
  4010f4:	b662      	cpsie	i
  4010f6:	e7fe      	b.n	4010f6 <vTaskStartScheduler+0x32>
  4010f8:	4b10      	ldr	r3, [pc, #64]	; (40113c <vTaskStartScheduler+0x78>)
  4010fa:	4798      	blx	r3
  4010fc:	2801      	cmp	r0, #1
  4010fe:	d1ef      	bne.n	4010e0 <vTaskStartScheduler+0x1c>
  401100:	f04f 0380 	mov.w	r3, #128	; 0x80
  401104:	b672      	cpsid	i
  401106:	f383 8811 	msr	BASEPRI, r3
  40110a:	f3bf 8f6f 	isb	sy
  40110e:	f3bf 8f4f 	dsb	sy
  401112:	b662      	cpsie	i
  401114:	f04f 32ff 	mov.w	r2, #4294967295
  401118:	4b09      	ldr	r3, [pc, #36]	; (401140 <vTaskStartScheduler+0x7c>)
  40111a:	601a      	str	r2, [r3, #0]
  40111c:	2201      	movs	r2, #1
  40111e:	4b09      	ldr	r3, [pc, #36]	; (401144 <vTaskStartScheduler+0x80>)
  401120:	601a      	str	r2, [r3, #0]
  401122:	2200      	movs	r2, #0
  401124:	4b08      	ldr	r3, [pc, #32]	; (401148 <vTaskStartScheduler+0x84>)
  401126:	601a      	str	r2, [r3, #0]
  401128:	4b08      	ldr	r3, [pc, #32]	; (40114c <vTaskStartScheduler+0x88>)
  40112a:	4798      	blx	r3
  40112c:	b004      	add	sp, #16
  40112e:	bd10      	pop	{r4, pc}
  401130:	00408c44 	.word	0x00408c44
  401134:	004013d9 	.word	0x004013d9
  401138:	00400e91 	.word	0x00400e91
  40113c:	00401a19 	.word	0x00401a19
  401140:	2040c2ac 	.word	0x2040c2ac
  401144:	2040c2c8 	.word	0x2040c2c8
  401148:	2040c2f4 	.word	0x2040c2f4
  40114c:	0040042d 	.word	0x0040042d

00401150 <vTaskSuspendAll>:
  401150:	4a02      	ldr	r2, [pc, #8]	; (40115c <vTaskSuspendAll+0xc>)
  401152:	6813      	ldr	r3, [r2, #0]
  401154:	3301      	adds	r3, #1
  401156:	6013      	str	r3, [r2, #0]
  401158:	4770      	bx	lr
  40115a:	bf00      	nop
  40115c:	2040c274 	.word	0x2040c274

00401160 <xTaskGetTickCount>:
  401160:	4b01      	ldr	r3, [pc, #4]	; (401168 <xTaskGetTickCount+0x8>)
  401162:	6818      	ldr	r0, [r3, #0]
  401164:	4770      	bx	lr
  401166:	bf00      	nop
  401168:	2040c2f4 	.word	0x2040c2f4

0040116c <xTaskIncrementTick>:
  40116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401170:	4b42      	ldr	r3, [pc, #264]	; (40127c <xTaskIncrementTick+0x110>)
  401172:	681b      	ldr	r3, [r3, #0]
  401174:	2b00      	cmp	r3, #0
  401176:	d178      	bne.n	40126a <xTaskIncrementTick+0xfe>
  401178:	4b41      	ldr	r3, [pc, #260]	; (401280 <xTaskIncrementTick+0x114>)
  40117a:	681a      	ldr	r2, [r3, #0]
  40117c:	3201      	adds	r2, #1
  40117e:	601a      	str	r2, [r3, #0]
  401180:	681e      	ldr	r6, [r3, #0]
  401182:	b9d6      	cbnz	r6, 4011ba <xTaskIncrementTick+0x4e>
  401184:	4b3f      	ldr	r3, [pc, #252]	; (401284 <xTaskIncrementTick+0x118>)
  401186:	681b      	ldr	r3, [r3, #0]
  401188:	681b      	ldr	r3, [r3, #0]
  40118a:	b153      	cbz	r3, 4011a2 <xTaskIncrementTick+0x36>
  40118c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401190:	b672      	cpsid	i
  401192:	f383 8811 	msr	BASEPRI, r3
  401196:	f3bf 8f6f 	isb	sy
  40119a:	f3bf 8f4f 	dsb	sy
  40119e:	b662      	cpsie	i
  4011a0:	e7fe      	b.n	4011a0 <xTaskIncrementTick+0x34>
  4011a2:	4a38      	ldr	r2, [pc, #224]	; (401284 <xTaskIncrementTick+0x118>)
  4011a4:	6811      	ldr	r1, [r2, #0]
  4011a6:	4b38      	ldr	r3, [pc, #224]	; (401288 <xTaskIncrementTick+0x11c>)
  4011a8:	6818      	ldr	r0, [r3, #0]
  4011aa:	6010      	str	r0, [r2, #0]
  4011ac:	6019      	str	r1, [r3, #0]
  4011ae:	4a37      	ldr	r2, [pc, #220]	; (40128c <xTaskIncrementTick+0x120>)
  4011b0:	6813      	ldr	r3, [r2, #0]
  4011b2:	3301      	adds	r3, #1
  4011b4:	6013      	str	r3, [r2, #0]
  4011b6:	4b36      	ldr	r3, [pc, #216]	; (401290 <xTaskIncrementTick+0x124>)
  4011b8:	4798      	blx	r3
  4011ba:	4b36      	ldr	r3, [pc, #216]	; (401294 <xTaskIncrementTick+0x128>)
  4011bc:	681b      	ldr	r3, [r3, #0]
  4011be:	429e      	cmp	r6, r3
  4011c0:	d218      	bcs.n	4011f4 <xTaskIncrementTick+0x88>
  4011c2:	2400      	movs	r4, #0
  4011c4:	4b34      	ldr	r3, [pc, #208]	; (401298 <xTaskIncrementTick+0x12c>)
  4011c6:	681b      	ldr	r3, [r3, #0]
  4011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4011ce:	4a33      	ldr	r2, [pc, #204]	; (40129c <xTaskIncrementTick+0x130>)
  4011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4011d4:	2b02      	cmp	r3, #2
  4011d6:	bf28      	it	cs
  4011d8:	2401      	movcs	r4, #1
  4011da:	4b31      	ldr	r3, [pc, #196]	; (4012a0 <xTaskIncrementTick+0x134>)
  4011dc:	681b      	ldr	r3, [r3, #0]
  4011de:	b90b      	cbnz	r3, 4011e4 <xTaskIncrementTick+0x78>
  4011e0:	4b30      	ldr	r3, [pc, #192]	; (4012a4 <xTaskIncrementTick+0x138>)
  4011e2:	4798      	blx	r3
  4011e4:	4b30      	ldr	r3, [pc, #192]	; (4012a8 <xTaskIncrementTick+0x13c>)
  4011e6:	681b      	ldr	r3, [r3, #0]
  4011e8:	2b00      	cmp	r3, #0
  4011ea:	bf0c      	ite	eq
  4011ec:	4620      	moveq	r0, r4
  4011ee:	2001      	movne	r0, #1
  4011f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4011f4:	2400      	movs	r4, #0
  4011f6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401284 <xTaskIncrementTick+0x118>
  4011fa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4012b4 <xTaskIncrementTick+0x148>
  4011fe:	4f2b      	ldr	r7, [pc, #172]	; (4012ac <xTaskIncrementTick+0x140>)
  401200:	e01f      	b.n	401242 <xTaskIncrementTick+0xd6>
  401202:	f04f 32ff 	mov.w	r2, #4294967295
  401206:	4b23      	ldr	r3, [pc, #140]	; (401294 <xTaskIncrementTick+0x128>)
  401208:	601a      	str	r2, [r3, #0]
  40120a:	e7db      	b.n	4011c4 <xTaskIncrementTick+0x58>
  40120c:	4a21      	ldr	r2, [pc, #132]	; (401294 <xTaskIncrementTick+0x128>)
  40120e:	6013      	str	r3, [r2, #0]
  401210:	e7d8      	b.n	4011c4 <xTaskIncrementTick+0x58>
  401212:	f105 0018 	add.w	r0, r5, #24
  401216:	47c0      	blx	r8
  401218:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40121a:	683a      	ldr	r2, [r7, #0]
  40121c:	2301      	movs	r3, #1
  40121e:	4083      	lsls	r3, r0
  401220:	4313      	orrs	r3, r2
  401222:	603b      	str	r3, [r7, #0]
  401224:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401228:	4651      	mov	r1, sl
  40122a:	4b1c      	ldr	r3, [pc, #112]	; (40129c <xTaskIncrementTick+0x130>)
  40122c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401230:	4b1f      	ldr	r3, [pc, #124]	; (4012b0 <xTaskIncrementTick+0x144>)
  401232:	4798      	blx	r3
  401234:	4b18      	ldr	r3, [pc, #96]	; (401298 <xTaskIncrementTick+0x12c>)
  401236:	681b      	ldr	r3, [r3, #0]
  401238:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40123c:	429a      	cmp	r2, r3
  40123e:	bf28      	it	cs
  401240:	2401      	movcs	r4, #1
  401242:	f8d9 3000 	ldr.w	r3, [r9]
  401246:	681b      	ldr	r3, [r3, #0]
  401248:	2b00      	cmp	r3, #0
  40124a:	d0da      	beq.n	401202 <xTaskIncrementTick+0x96>
  40124c:	f8d9 3000 	ldr.w	r3, [r9]
  401250:	68db      	ldr	r3, [r3, #12]
  401252:	68dd      	ldr	r5, [r3, #12]
  401254:	686b      	ldr	r3, [r5, #4]
  401256:	429e      	cmp	r6, r3
  401258:	d3d8      	bcc.n	40120c <xTaskIncrementTick+0xa0>
  40125a:	f105 0a04 	add.w	sl, r5, #4
  40125e:	4650      	mov	r0, sl
  401260:	47c0      	blx	r8
  401262:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401264:	2b00      	cmp	r3, #0
  401266:	d1d4      	bne.n	401212 <xTaskIncrementTick+0xa6>
  401268:	e7d6      	b.n	401218 <xTaskIncrementTick+0xac>
  40126a:	4a0d      	ldr	r2, [pc, #52]	; (4012a0 <xTaskIncrementTick+0x134>)
  40126c:	6813      	ldr	r3, [r2, #0]
  40126e:	3301      	adds	r3, #1
  401270:	6013      	str	r3, [r2, #0]
  401272:	4b0c      	ldr	r3, [pc, #48]	; (4012a4 <xTaskIncrementTick+0x138>)
  401274:	4798      	blx	r3
  401276:	2400      	movs	r4, #0
  401278:	e7b4      	b.n	4011e4 <xTaskIncrementTick+0x78>
  40127a:	bf00      	nop
  40127c:	2040c274 	.word	0x2040c274
  401280:	2040c2f4 	.word	0x2040c2f4
  401284:	2040c200 	.word	0x2040c200
  401288:	2040c204 	.word	0x2040c204
  40128c:	2040c2b0 	.word	0x2040c2b0
  401290:	00400e0d 	.word	0x00400e0d
  401294:	2040c2ac 	.word	0x2040c2ac
  401298:	2040c1fc 	.word	0x2040c1fc
  40129c:	2040c208 	.word	0x2040c208
  4012a0:	2040c270 	.word	0x2040c270
  4012a4:	004059dd 	.word	0x004059dd
  4012a8:	2040c2f8 	.word	0x2040c2f8
  4012ac:	2040c280 	.word	0x2040c280
  4012b0:	004001c9 	.word	0x004001c9
  4012b4:	00400215 	.word	0x00400215

004012b8 <xTaskResumeAll>:
  4012b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4012bc:	4b38      	ldr	r3, [pc, #224]	; (4013a0 <xTaskResumeAll+0xe8>)
  4012be:	681b      	ldr	r3, [r3, #0]
  4012c0:	b953      	cbnz	r3, 4012d8 <xTaskResumeAll+0x20>
  4012c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012c6:	b672      	cpsid	i
  4012c8:	f383 8811 	msr	BASEPRI, r3
  4012cc:	f3bf 8f6f 	isb	sy
  4012d0:	f3bf 8f4f 	dsb	sy
  4012d4:	b662      	cpsie	i
  4012d6:	e7fe      	b.n	4012d6 <xTaskResumeAll+0x1e>
  4012d8:	4b32      	ldr	r3, [pc, #200]	; (4013a4 <xTaskResumeAll+0xec>)
  4012da:	4798      	blx	r3
  4012dc:	4b30      	ldr	r3, [pc, #192]	; (4013a0 <xTaskResumeAll+0xe8>)
  4012de:	681a      	ldr	r2, [r3, #0]
  4012e0:	3a01      	subs	r2, #1
  4012e2:	601a      	str	r2, [r3, #0]
  4012e4:	681b      	ldr	r3, [r3, #0]
  4012e6:	2b00      	cmp	r3, #0
  4012e8:	d155      	bne.n	401396 <xTaskResumeAll+0xde>
  4012ea:	4b2f      	ldr	r3, [pc, #188]	; (4013a8 <xTaskResumeAll+0xf0>)
  4012ec:	681b      	ldr	r3, [r3, #0]
  4012ee:	2b00      	cmp	r3, #0
  4012f0:	d132      	bne.n	401358 <xTaskResumeAll+0xa0>
  4012f2:	2400      	movs	r4, #0
  4012f4:	4b2d      	ldr	r3, [pc, #180]	; (4013ac <xTaskResumeAll+0xf4>)
  4012f6:	4798      	blx	r3
  4012f8:	4620      	mov	r0, r4
  4012fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4012fe:	68fb      	ldr	r3, [r7, #12]
  401300:	68dc      	ldr	r4, [r3, #12]
  401302:	f104 0018 	add.w	r0, r4, #24
  401306:	47b0      	blx	r6
  401308:	f104 0804 	add.w	r8, r4, #4
  40130c:	4640      	mov	r0, r8
  40130e:	47b0      	blx	r6
  401310:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401312:	682a      	ldr	r2, [r5, #0]
  401314:	2301      	movs	r3, #1
  401316:	4083      	lsls	r3, r0
  401318:	4313      	orrs	r3, r2
  40131a:	602b      	str	r3, [r5, #0]
  40131c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401320:	4641      	mov	r1, r8
  401322:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401326:	4b22      	ldr	r3, [pc, #136]	; (4013b0 <xTaskResumeAll+0xf8>)
  401328:	4798      	blx	r3
  40132a:	4b22      	ldr	r3, [pc, #136]	; (4013b4 <xTaskResumeAll+0xfc>)
  40132c:	681b      	ldr	r3, [r3, #0]
  40132e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401332:	429a      	cmp	r2, r3
  401334:	d20c      	bcs.n	401350 <xTaskResumeAll+0x98>
  401336:	683b      	ldr	r3, [r7, #0]
  401338:	2b00      	cmp	r3, #0
  40133a:	d1e0      	bne.n	4012fe <xTaskResumeAll+0x46>
  40133c:	4b1e      	ldr	r3, [pc, #120]	; (4013b8 <xTaskResumeAll+0x100>)
  40133e:	681b      	ldr	r3, [r3, #0]
  401340:	b1db      	cbz	r3, 40137a <xTaskResumeAll+0xc2>
  401342:	4b1d      	ldr	r3, [pc, #116]	; (4013b8 <xTaskResumeAll+0x100>)
  401344:	681b      	ldr	r3, [r3, #0]
  401346:	b1c3      	cbz	r3, 40137a <xTaskResumeAll+0xc2>
  401348:	4e1c      	ldr	r6, [pc, #112]	; (4013bc <xTaskResumeAll+0x104>)
  40134a:	4d1d      	ldr	r5, [pc, #116]	; (4013c0 <xTaskResumeAll+0x108>)
  40134c:	4c1a      	ldr	r4, [pc, #104]	; (4013b8 <xTaskResumeAll+0x100>)
  40134e:	e00e      	b.n	40136e <xTaskResumeAll+0xb6>
  401350:	2201      	movs	r2, #1
  401352:	4b1b      	ldr	r3, [pc, #108]	; (4013c0 <xTaskResumeAll+0x108>)
  401354:	601a      	str	r2, [r3, #0]
  401356:	e7ee      	b.n	401336 <xTaskResumeAll+0x7e>
  401358:	4f1a      	ldr	r7, [pc, #104]	; (4013c4 <xTaskResumeAll+0x10c>)
  40135a:	4e1b      	ldr	r6, [pc, #108]	; (4013c8 <xTaskResumeAll+0x110>)
  40135c:	4d1b      	ldr	r5, [pc, #108]	; (4013cc <xTaskResumeAll+0x114>)
  40135e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4013d4 <xTaskResumeAll+0x11c>
  401362:	e7e8      	b.n	401336 <xTaskResumeAll+0x7e>
  401364:	6823      	ldr	r3, [r4, #0]
  401366:	3b01      	subs	r3, #1
  401368:	6023      	str	r3, [r4, #0]
  40136a:	6823      	ldr	r3, [r4, #0]
  40136c:	b12b      	cbz	r3, 40137a <xTaskResumeAll+0xc2>
  40136e:	47b0      	blx	r6
  401370:	2800      	cmp	r0, #0
  401372:	d0f7      	beq.n	401364 <xTaskResumeAll+0xac>
  401374:	2301      	movs	r3, #1
  401376:	602b      	str	r3, [r5, #0]
  401378:	e7f4      	b.n	401364 <xTaskResumeAll+0xac>
  40137a:	4b11      	ldr	r3, [pc, #68]	; (4013c0 <xTaskResumeAll+0x108>)
  40137c:	681b      	ldr	r3, [r3, #0]
  40137e:	2b01      	cmp	r3, #1
  401380:	d10b      	bne.n	40139a <xTaskResumeAll+0xe2>
  401382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401386:	4b12      	ldr	r3, [pc, #72]	; (4013d0 <xTaskResumeAll+0x118>)
  401388:	601a      	str	r2, [r3, #0]
  40138a:	f3bf 8f4f 	dsb	sy
  40138e:	f3bf 8f6f 	isb	sy
  401392:	2401      	movs	r4, #1
  401394:	e7ae      	b.n	4012f4 <xTaskResumeAll+0x3c>
  401396:	2400      	movs	r4, #0
  401398:	e7ac      	b.n	4012f4 <xTaskResumeAll+0x3c>
  40139a:	2400      	movs	r4, #0
  40139c:	e7aa      	b.n	4012f4 <xTaskResumeAll+0x3c>
  40139e:	bf00      	nop
  4013a0:	2040c274 	.word	0x2040c274
  4013a4:	004002f9 	.word	0x004002f9
  4013a8:	2040c26c 	.word	0x2040c26c
  4013ac:	00400345 	.word	0x00400345
  4013b0:	004001c9 	.word	0x004001c9
  4013b4:	2040c1fc 	.word	0x2040c1fc
  4013b8:	2040c270 	.word	0x2040c270
  4013bc:	0040116d 	.word	0x0040116d
  4013c0:	2040c2f8 	.word	0x2040c2f8
  4013c4:	2040c2b4 	.word	0x2040c2b4
  4013c8:	00400215 	.word	0x00400215
  4013cc:	2040c280 	.word	0x2040c280
  4013d0:	e000ed04 	.word	0xe000ed04
  4013d4:	2040c208 	.word	0x2040c208

004013d8 <prvIdleTask>:
  4013d8:	b580      	push	{r7, lr}
  4013da:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401464 <prvIdleTask+0x8c>
  4013de:	4e19      	ldr	r6, [pc, #100]	; (401444 <prvIdleTask+0x6c>)
  4013e0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401468 <prvIdleTask+0x90>
  4013e4:	e02a      	b.n	40143c <prvIdleTask+0x64>
  4013e6:	4b18      	ldr	r3, [pc, #96]	; (401448 <prvIdleTask+0x70>)
  4013e8:	681b      	ldr	r3, [r3, #0]
  4013ea:	2b01      	cmp	r3, #1
  4013ec:	d81e      	bhi.n	40142c <prvIdleTask+0x54>
  4013ee:	682b      	ldr	r3, [r5, #0]
  4013f0:	2b00      	cmp	r3, #0
  4013f2:	d0f8      	beq.n	4013e6 <prvIdleTask+0xe>
  4013f4:	47c0      	blx	r8
  4013f6:	6834      	ldr	r4, [r6, #0]
  4013f8:	47b8      	blx	r7
  4013fa:	2c00      	cmp	r4, #0
  4013fc:	d0f7      	beq.n	4013ee <prvIdleTask+0x16>
  4013fe:	4b13      	ldr	r3, [pc, #76]	; (40144c <prvIdleTask+0x74>)
  401400:	4798      	blx	r3
  401402:	68f3      	ldr	r3, [r6, #12]
  401404:	68dc      	ldr	r4, [r3, #12]
  401406:	1d20      	adds	r0, r4, #4
  401408:	4b11      	ldr	r3, [pc, #68]	; (401450 <prvIdleTask+0x78>)
  40140a:	4798      	blx	r3
  40140c:	4a11      	ldr	r2, [pc, #68]	; (401454 <prvIdleTask+0x7c>)
  40140e:	6813      	ldr	r3, [r2, #0]
  401410:	3b01      	subs	r3, #1
  401412:	6013      	str	r3, [r2, #0]
  401414:	682b      	ldr	r3, [r5, #0]
  401416:	3b01      	subs	r3, #1
  401418:	602b      	str	r3, [r5, #0]
  40141a:	4b0f      	ldr	r3, [pc, #60]	; (401458 <prvIdleTask+0x80>)
  40141c:	4798      	blx	r3
  40141e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401420:	f8df a048 	ldr.w	sl, [pc, #72]	; 40146c <prvIdleTask+0x94>
  401424:	47d0      	blx	sl
  401426:	4620      	mov	r0, r4
  401428:	47d0      	blx	sl
  40142a:	e7e0      	b.n	4013ee <prvIdleTask+0x16>
  40142c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401430:	f8c9 3000 	str.w	r3, [r9]
  401434:	f3bf 8f4f 	dsb	sy
  401438:	f3bf 8f6f 	isb	sy
  40143c:	4d07      	ldr	r5, [pc, #28]	; (40145c <prvIdleTask+0x84>)
  40143e:	4f08      	ldr	r7, [pc, #32]	; (401460 <prvIdleTask+0x88>)
  401440:	e7d5      	b.n	4013ee <prvIdleTask+0x16>
  401442:	bf00      	nop
  401444:	2040c2e0 	.word	0x2040c2e0
  401448:	2040c208 	.word	0x2040c208
  40144c:	004002f9 	.word	0x004002f9
  401450:	00400215 	.word	0x00400215
  401454:	2040c26c 	.word	0x2040c26c
  401458:	00400345 	.word	0x00400345
  40145c:	2040c27c 	.word	0x2040c27c
  401460:	004012b9 	.word	0x004012b9
  401464:	00401151 	.word	0x00401151
  401468:	e000ed04 	.word	0xe000ed04
  40146c:	004005c5 	.word	0x004005c5

00401470 <vTaskSwitchContext>:
  401470:	4b2d      	ldr	r3, [pc, #180]	; (401528 <vTaskSwitchContext+0xb8>)
  401472:	681b      	ldr	r3, [r3, #0]
  401474:	2b00      	cmp	r3, #0
  401476:	d12c      	bne.n	4014d2 <vTaskSwitchContext+0x62>
  401478:	b510      	push	{r4, lr}
  40147a:	2200      	movs	r2, #0
  40147c:	4b2b      	ldr	r3, [pc, #172]	; (40152c <vTaskSwitchContext+0xbc>)
  40147e:	601a      	str	r2, [r3, #0]
  401480:	4b2b      	ldr	r3, [pc, #172]	; (401530 <vTaskSwitchContext+0xc0>)
  401482:	681b      	ldr	r3, [r3, #0]
  401484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401486:	681a      	ldr	r2, [r3, #0]
  401488:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40148c:	d103      	bne.n	401496 <vTaskSwitchContext+0x26>
  40148e:	685a      	ldr	r2, [r3, #4]
  401490:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401494:	d021      	beq.n	4014da <vTaskSwitchContext+0x6a>
  401496:	4b26      	ldr	r3, [pc, #152]	; (401530 <vTaskSwitchContext+0xc0>)
  401498:	6818      	ldr	r0, [r3, #0]
  40149a:	6819      	ldr	r1, [r3, #0]
  40149c:	3134      	adds	r1, #52	; 0x34
  40149e:	4b25      	ldr	r3, [pc, #148]	; (401534 <vTaskSwitchContext+0xc4>)
  4014a0:	4798      	blx	r3
  4014a2:	4b25      	ldr	r3, [pc, #148]	; (401538 <vTaskSwitchContext+0xc8>)
  4014a4:	681b      	ldr	r3, [r3, #0]
  4014a6:	fab3 f383 	clz	r3, r3
  4014aa:	b2db      	uxtb	r3, r3
  4014ac:	f1c3 031f 	rsb	r3, r3, #31
  4014b0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4014b4:	4a21      	ldr	r2, [pc, #132]	; (40153c <vTaskSwitchContext+0xcc>)
  4014b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4014ba:	b9ba      	cbnz	r2, 4014ec <vTaskSwitchContext+0x7c>
  4014bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014c0:	b672      	cpsid	i
  4014c2:	f383 8811 	msr	BASEPRI, r3
  4014c6:	f3bf 8f6f 	isb	sy
  4014ca:	f3bf 8f4f 	dsb	sy
  4014ce:	b662      	cpsie	i
  4014d0:	e7fe      	b.n	4014d0 <vTaskSwitchContext+0x60>
  4014d2:	2201      	movs	r2, #1
  4014d4:	4b15      	ldr	r3, [pc, #84]	; (40152c <vTaskSwitchContext+0xbc>)
  4014d6:	601a      	str	r2, [r3, #0]
  4014d8:	4770      	bx	lr
  4014da:	689a      	ldr	r2, [r3, #8]
  4014dc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4014e0:	d1d9      	bne.n	401496 <vTaskSwitchContext+0x26>
  4014e2:	68db      	ldr	r3, [r3, #12]
  4014e4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4014e8:	d1d5      	bne.n	401496 <vTaskSwitchContext+0x26>
  4014ea:	e7da      	b.n	4014a2 <vTaskSwitchContext+0x32>
  4014ec:	4a13      	ldr	r2, [pc, #76]	; (40153c <vTaskSwitchContext+0xcc>)
  4014ee:	0099      	lsls	r1, r3, #2
  4014f0:	18c8      	adds	r0, r1, r3
  4014f2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4014f6:	6844      	ldr	r4, [r0, #4]
  4014f8:	6864      	ldr	r4, [r4, #4]
  4014fa:	6044      	str	r4, [r0, #4]
  4014fc:	4419      	add	r1, r3
  4014fe:	4602      	mov	r2, r0
  401500:	3208      	adds	r2, #8
  401502:	4294      	cmp	r4, r2
  401504:	d009      	beq.n	40151a <vTaskSwitchContext+0xaa>
  401506:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40150a:	4a0c      	ldr	r2, [pc, #48]	; (40153c <vTaskSwitchContext+0xcc>)
  40150c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401510:	685b      	ldr	r3, [r3, #4]
  401512:	68da      	ldr	r2, [r3, #12]
  401514:	4b06      	ldr	r3, [pc, #24]	; (401530 <vTaskSwitchContext+0xc0>)
  401516:	601a      	str	r2, [r3, #0]
  401518:	bd10      	pop	{r4, pc}
  40151a:	6860      	ldr	r0, [r4, #4]
  40151c:	4a07      	ldr	r2, [pc, #28]	; (40153c <vTaskSwitchContext+0xcc>)
  40151e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401522:	6050      	str	r0, [r2, #4]
  401524:	e7ef      	b.n	401506 <vTaskSwitchContext+0x96>
  401526:	bf00      	nop
  401528:	2040c274 	.word	0x2040c274
  40152c:	2040c2f8 	.word	0x2040c2f8
  401530:	2040c1fc 	.word	0x2040c1fc
  401534:	004059c5 	.word	0x004059c5
  401538:	2040c280 	.word	0x2040c280
  40153c:	2040c208 	.word	0x2040c208

00401540 <vTaskPlaceOnEventList>:
  401540:	b538      	push	{r3, r4, r5, lr}
  401542:	b1e0      	cbz	r0, 40157e <vTaskPlaceOnEventList+0x3e>
  401544:	460c      	mov	r4, r1
  401546:	4d17      	ldr	r5, [pc, #92]	; (4015a4 <vTaskPlaceOnEventList+0x64>)
  401548:	6829      	ldr	r1, [r5, #0]
  40154a:	3118      	adds	r1, #24
  40154c:	4b16      	ldr	r3, [pc, #88]	; (4015a8 <vTaskPlaceOnEventList+0x68>)
  40154e:	4798      	blx	r3
  401550:	6828      	ldr	r0, [r5, #0]
  401552:	3004      	adds	r0, #4
  401554:	4b15      	ldr	r3, [pc, #84]	; (4015ac <vTaskPlaceOnEventList+0x6c>)
  401556:	4798      	blx	r3
  401558:	b940      	cbnz	r0, 40156c <vTaskPlaceOnEventList+0x2c>
  40155a:	682a      	ldr	r2, [r5, #0]
  40155c:	4914      	ldr	r1, [pc, #80]	; (4015b0 <vTaskPlaceOnEventList+0x70>)
  40155e:	680b      	ldr	r3, [r1, #0]
  401560:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401562:	2201      	movs	r2, #1
  401564:	4082      	lsls	r2, r0
  401566:	ea23 0302 	bic.w	r3, r3, r2
  40156a:	600b      	str	r3, [r1, #0]
  40156c:	f1b4 3fff 	cmp.w	r4, #4294967295
  401570:	d010      	beq.n	401594 <vTaskPlaceOnEventList+0x54>
  401572:	4b10      	ldr	r3, [pc, #64]	; (4015b4 <vTaskPlaceOnEventList+0x74>)
  401574:	6818      	ldr	r0, [r3, #0]
  401576:	4420      	add	r0, r4
  401578:	4b0f      	ldr	r3, [pc, #60]	; (4015b8 <vTaskPlaceOnEventList+0x78>)
  40157a:	4798      	blx	r3
  40157c:	bd38      	pop	{r3, r4, r5, pc}
  40157e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401582:	b672      	cpsid	i
  401584:	f383 8811 	msr	BASEPRI, r3
  401588:	f3bf 8f6f 	isb	sy
  40158c:	f3bf 8f4f 	dsb	sy
  401590:	b662      	cpsie	i
  401592:	e7fe      	b.n	401592 <vTaskPlaceOnEventList+0x52>
  401594:	4b03      	ldr	r3, [pc, #12]	; (4015a4 <vTaskPlaceOnEventList+0x64>)
  401596:	6819      	ldr	r1, [r3, #0]
  401598:	3104      	adds	r1, #4
  40159a:	4808      	ldr	r0, [pc, #32]	; (4015bc <vTaskPlaceOnEventList+0x7c>)
  40159c:	4b08      	ldr	r3, [pc, #32]	; (4015c0 <vTaskPlaceOnEventList+0x80>)
  40159e:	4798      	blx	r3
  4015a0:	bd38      	pop	{r3, r4, r5, pc}
  4015a2:	bf00      	nop
  4015a4:	2040c1fc 	.word	0x2040c1fc
  4015a8:	004001e1 	.word	0x004001e1
  4015ac:	00400215 	.word	0x00400215
  4015b0:	2040c280 	.word	0x2040c280
  4015b4:	2040c2f4 	.word	0x2040c2f4
  4015b8:	00400e39 	.word	0x00400e39
  4015bc:	2040c2cc 	.word	0x2040c2cc
  4015c0:	004001c9 	.word	0x004001c9

004015c4 <vTaskPlaceOnEventListRestricted>:
  4015c4:	b1e8      	cbz	r0, 401602 <vTaskPlaceOnEventListRestricted+0x3e>
  4015c6:	b570      	push	{r4, r5, r6, lr}
  4015c8:	4615      	mov	r5, r2
  4015ca:	460c      	mov	r4, r1
  4015cc:	4e16      	ldr	r6, [pc, #88]	; (401628 <vTaskPlaceOnEventListRestricted+0x64>)
  4015ce:	6831      	ldr	r1, [r6, #0]
  4015d0:	3118      	adds	r1, #24
  4015d2:	4b16      	ldr	r3, [pc, #88]	; (40162c <vTaskPlaceOnEventListRestricted+0x68>)
  4015d4:	4798      	blx	r3
  4015d6:	6830      	ldr	r0, [r6, #0]
  4015d8:	3004      	adds	r0, #4
  4015da:	4b15      	ldr	r3, [pc, #84]	; (401630 <vTaskPlaceOnEventListRestricted+0x6c>)
  4015dc:	4798      	blx	r3
  4015de:	b940      	cbnz	r0, 4015f2 <vTaskPlaceOnEventListRestricted+0x2e>
  4015e0:	6832      	ldr	r2, [r6, #0]
  4015e2:	4914      	ldr	r1, [pc, #80]	; (401634 <vTaskPlaceOnEventListRestricted+0x70>)
  4015e4:	680b      	ldr	r3, [r1, #0]
  4015e6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4015e8:	2201      	movs	r2, #1
  4015ea:	4082      	lsls	r2, r0
  4015ec:	ea23 0302 	bic.w	r3, r3, r2
  4015f0:	600b      	str	r3, [r1, #0]
  4015f2:	2d01      	cmp	r5, #1
  4015f4:	d010      	beq.n	401618 <vTaskPlaceOnEventListRestricted+0x54>
  4015f6:	4b10      	ldr	r3, [pc, #64]	; (401638 <vTaskPlaceOnEventListRestricted+0x74>)
  4015f8:	6818      	ldr	r0, [r3, #0]
  4015fa:	4420      	add	r0, r4
  4015fc:	4b0f      	ldr	r3, [pc, #60]	; (40163c <vTaskPlaceOnEventListRestricted+0x78>)
  4015fe:	4798      	blx	r3
  401600:	bd70      	pop	{r4, r5, r6, pc}
  401602:	f04f 0380 	mov.w	r3, #128	; 0x80
  401606:	b672      	cpsid	i
  401608:	f383 8811 	msr	BASEPRI, r3
  40160c:	f3bf 8f6f 	isb	sy
  401610:	f3bf 8f4f 	dsb	sy
  401614:	b662      	cpsie	i
  401616:	e7fe      	b.n	401616 <vTaskPlaceOnEventListRestricted+0x52>
  401618:	4b03      	ldr	r3, [pc, #12]	; (401628 <vTaskPlaceOnEventListRestricted+0x64>)
  40161a:	6819      	ldr	r1, [r3, #0]
  40161c:	3104      	adds	r1, #4
  40161e:	4808      	ldr	r0, [pc, #32]	; (401640 <vTaskPlaceOnEventListRestricted+0x7c>)
  401620:	4b02      	ldr	r3, [pc, #8]	; (40162c <vTaskPlaceOnEventListRestricted+0x68>)
  401622:	4798      	blx	r3
  401624:	bd70      	pop	{r4, r5, r6, pc}
  401626:	bf00      	nop
  401628:	2040c1fc 	.word	0x2040c1fc
  40162c:	004001c9 	.word	0x004001c9
  401630:	00400215 	.word	0x00400215
  401634:	2040c280 	.word	0x2040c280
  401638:	2040c2f4 	.word	0x2040c2f4
  40163c:	00400e39 	.word	0x00400e39
  401640:	2040c2cc 	.word	0x2040c2cc

00401644 <xTaskRemoveFromEventList>:
  401644:	b538      	push	{r3, r4, r5, lr}
  401646:	68c3      	ldr	r3, [r0, #12]
  401648:	68dc      	ldr	r4, [r3, #12]
  40164a:	b324      	cbz	r4, 401696 <xTaskRemoveFromEventList+0x52>
  40164c:	f104 0518 	add.w	r5, r4, #24
  401650:	4628      	mov	r0, r5
  401652:	4b1a      	ldr	r3, [pc, #104]	; (4016bc <xTaskRemoveFromEventList+0x78>)
  401654:	4798      	blx	r3
  401656:	4b1a      	ldr	r3, [pc, #104]	; (4016c0 <xTaskRemoveFromEventList+0x7c>)
  401658:	681b      	ldr	r3, [r3, #0]
  40165a:	bb3b      	cbnz	r3, 4016ac <xTaskRemoveFromEventList+0x68>
  40165c:	1d25      	adds	r5, r4, #4
  40165e:	4628      	mov	r0, r5
  401660:	4b16      	ldr	r3, [pc, #88]	; (4016bc <xTaskRemoveFromEventList+0x78>)
  401662:	4798      	blx	r3
  401664:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401666:	4a17      	ldr	r2, [pc, #92]	; (4016c4 <xTaskRemoveFromEventList+0x80>)
  401668:	6811      	ldr	r1, [r2, #0]
  40166a:	2301      	movs	r3, #1
  40166c:	4083      	lsls	r3, r0
  40166e:	430b      	orrs	r3, r1
  401670:	6013      	str	r3, [r2, #0]
  401672:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401676:	4629      	mov	r1, r5
  401678:	4b13      	ldr	r3, [pc, #76]	; (4016c8 <xTaskRemoveFromEventList+0x84>)
  40167a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40167e:	4b13      	ldr	r3, [pc, #76]	; (4016cc <xTaskRemoveFromEventList+0x88>)
  401680:	4798      	blx	r3
  401682:	4b13      	ldr	r3, [pc, #76]	; (4016d0 <xTaskRemoveFromEventList+0x8c>)
  401684:	681b      	ldr	r3, [r3, #0]
  401686:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40168a:	429a      	cmp	r2, r3
  40168c:	d913      	bls.n	4016b6 <xTaskRemoveFromEventList+0x72>
  40168e:	2001      	movs	r0, #1
  401690:	4b10      	ldr	r3, [pc, #64]	; (4016d4 <xTaskRemoveFromEventList+0x90>)
  401692:	6018      	str	r0, [r3, #0]
  401694:	bd38      	pop	{r3, r4, r5, pc}
  401696:	f04f 0380 	mov.w	r3, #128	; 0x80
  40169a:	b672      	cpsid	i
  40169c:	f383 8811 	msr	BASEPRI, r3
  4016a0:	f3bf 8f6f 	isb	sy
  4016a4:	f3bf 8f4f 	dsb	sy
  4016a8:	b662      	cpsie	i
  4016aa:	e7fe      	b.n	4016aa <xTaskRemoveFromEventList+0x66>
  4016ac:	4629      	mov	r1, r5
  4016ae:	480a      	ldr	r0, [pc, #40]	; (4016d8 <xTaskRemoveFromEventList+0x94>)
  4016b0:	4b06      	ldr	r3, [pc, #24]	; (4016cc <xTaskRemoveFromEventList+0x88>)
  4016b2:	4798      	blx	r3
  4016b4:	e7e5      	b.n	401682 <xTaskRemoveFromEventList+0x3e>
  4016b6:	2000      	movs	r0, #0
  4016b8:	bd38      	pop	{r3, r4, r5, pc}
  4016ba:	bf00      	nop
  4016bc:	00400215 	.word	0x00400215
  4016c0:	2040c274 	.word	0x2040c274
  4016c4:	2040c280 	.word	0x2040c280
  4016c8:	2040c208 	.word	0x2040c208
  4016cc:	004001c9 	.word	0x004001c9
  4016d0:	2040c1fc 	.word	0x2040c1fc
  4016d4:	2040c2f8 	.word	0x2040c2f8
  4016d8:	2040c2b4 	.word	0x2040c2b4

004016dc <vTaskSetTimeOutState>:
  4016dc:	b130      	cbz	r0, 4016ec <vTaskSetTimeOutState+0x10>
  4016de:	4a09      	ldr	r2, [pc, #36]	; (401704 <vTaskSetTimeOutState+0x28>)
  4016e0:	6812      	ldr	r2, [r2, #0]
  4016e2:	6002      	str	r2, [r0, #0]
  4016e4:	4a08      	ldr	r2, [pc, #32]	; (401708 <vTaskSetTimeOutState+0x2c>)
  4016e6:	6812      	ldr	r2, [r2, #0]
  4016e8:	6042      	str	r2, [r0, #4]
  4016ea:	4770      	bx	lr
  4016ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016f0:	b672      	cpsid	i
  4016f2:	f383 8811 	msr	BASEPRI, r3
  4016f6:	f3bf 8f6f 	isb	sy
  4016fa:	f3bf 8f4f 	dsb	sy
  4016fe:	b662      	cpsie	i
  401700:	e7fe      	b.n	401700 <vTaskSetTimeOutState+0x24>
  401702:	bf00      	nop
  401704:	2040c2b0 	.word	0x2040c2b0
  401708:	2040c2f4 	.word	0x2040c2f4

0040170c <xTaskCheckForTimeOut>:
  40170c:	b538      	push	{r3, r4, r5, lr}
  40170e:	b1c0      	cbz	r0, 401742 <xTaskCheckForTimeOut+0x36>
  401710:	4604      	mov	r4, r0
  401712:	b309      	cbz	r1, 401758 <xTaskCheckForTimeOut+0x4c>
  401714:	460d      	mov	r5, r1
  401716:	4b1d      	ldr	r3, [pc, #116]	; (40178c <xTaskCheckForTimeOut+0x80>)
  401718:	4798      	blx	r3
  40171a:	4b1d      	ldr	r3, [pc, #116]	; (401790 <xTaskCheckForTimeOut+0x84>)
  40171c:	681a      	ldr	r2, [r3, #0]
  40171e:	682b      	ldr	r3, [r5, #0]
  401720:	f1b3 3fff 	cmp.w	r3, #4294967295
  401724:	d02e      	beq.n	401784 <xTaskCheckForTimeOut+0x78>
  401726:	491b      	ldr	r1, [pc, #108]	; (401794 <xTaskCheckForTimeOut+0x88>)
  401728:	6809      	ldr	r1, [r1, #0]
  40172a:	6820      	ldr	r0, [r4, #0]
  40172c:	4288      	cmp	r0, r1
  40172e:	d002      	beq.n	401736 <xTaskCheckForTimeOut+0x2a>
  401730:	6861      	ldr	r1, [r4, #4]
  401732:	428a      	cmp	r2, r1
  401734:	d228      	bcs.n	401788 <xTaskCheckForTimeOut+0x7c>
  401736:	6861      	ldr	r1, [r4, #4]
  401738:	1a50      	subs	r0, r2, r1
  40173a:	4283      	cmp	r3, r0
  40173c:	d817      	bhi.n	40176e <xTaskCheckForTimeOut+0x62>
  40173e:	2401      	movs	r4, #1
  401740:	e01c      	b.n	40177c <xTaskCheckForTimeOut+0x70>
  401742:	f04f 0380 	mov.w	r3, #128	; 0x80
  401746:	b672      	cpsid	i
  401748:	f383 8811 	msr	BASEPRI, r3
  40174c:	f3bf 8f6f 	isb	sy
  401750:	f3bf 8f4f 	dsb	sy
  401754:	b662      	cpsie	i
  401756:	e7fe      	b.n	401756 <xTaskCheckForTimeOut+0x4a>
  401758:	f04f 0380 	mov.w	r3, #128	; 0x80
  40175c:	b672      	cpsid	i
  40175e:	f383 8811 	msr	BASEPRI, r3
  401762:	f3bf 8f6f 	isb	sy
  401766:	f3bf 8f4f 	dsb	sy
  40176a:	b662      	cpsie	i
  40176c:	e7fe      	b.n	40176c <xTaskCheckForTimeOut+0x60>
  40176e:	1a9b      	subs	r3, r3, r2
  401770:	440b      	add	r3, r1
  401772:	602b      	str	r3, [r5, #0]
  401774:	4620      	mov	r0, r4
  401776:	4b08      	ldr	r3, [pc, #32]	; (401798 <xTaskCheckForTimeOut+0x8c>)
  401778:	4798      	blx	r3
  40177a:	2400      	movs	r4, #0
  40177c:	4b07      	ldr	r3, [pc, #28]	; (40179c <xTaskCheckForTimeOut+0x90>)
  40177e:	4798      	blx	r3
  401780:	4620      	mov	r0, r4
  401782:	bd38      	pop	{r3, r4, r5, pc}
  401784:	2400      	movs	r4, #0
  401786:	e7f9      	b.n	40177c <xTaskCheckForTimeOut+0x70>
  401788:	2401      	movs	r4, #1
  40178a:	e7f7      	b.n	40177c <xTaskCheckForTimeOut+0x70>
  40178c:	004002f9 	.word	0x004002f9
  401790:	2040c2f4 	.word	0x2040c2f4
  401794:	2040c2b0 	.word	0x2040c2b0
  401798:	004016dd 	.word	0x004016dd
  40179c:	00400345 	.word	0x00400345

004017a0 <vTaskMissedYield>:
  4017a0:	2201      	movs	r2, #1
  4017a2:	4b01      	ldr	r3, [pc, #4]	; (4017a8 <vTaskMissedYield+0x8>)
  4017a4:	601a      	str	r2, [r3, #0]
  4017a6:	4770      	bx	lr
  4017a8:	2040c2f8 	.word	0x2040c2f8

004017ac <xTaskGetSchedulerState>:
  4017ac:	4b05      	ldr	r3, [pc, #20]	; (4017c4 <xTaskGetSchedulerState+0x18>)
  4017ae:	681b      	ldr	r3, [r3, #0]
  4017b0:	b133      	cbz	r3, 4017c0 <xTaskGetSchedulerState+0x14>
  4017b2:	4b05      	ldr	r3, [pc, #20]	; (4017c8 <xTaskGetSchedulerState+0x1c>)
  4017b4:	681b      	ldr	r3, [r3, #0]
  4017b6:	2b00      	cmp	r3, #0
  4017b8:	bf0c      	ite	eq
  4017ba:	2002      	moveq	r0, #2
  4017bc:	2000      	movne	r0, #0
  4017be:	4770      	bx	lr
  4017c0:	2001      	movs	r0, #1
  4017c2:	4770      	bx	lr
  4017c4:	2040c2c8 	.word	0x2040c2c8
  4017c8:	2040c274 	.word	0x2040c274

004017cc <vTaskPriorityInherit>:
  4017cc:	2800      	cmp	r0, #0
  4017ce:	d044      	beq.n	40185a <vTaskPriorityInherit+0x8e>
  4017d0:	b538      	push	{r3, r4, r5, lr}
  4017d2:	4604      	mov	r4, r0
  4017d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4017d6:	4921      	ldr	r1, [pc, #132]	; (40185c <vTaskPriorityInherit+0x90>)
  4017d8:	6809      	ldr	r1, [r1, #0]
  4017da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4017dc:	428a      	cmp	r2, r1
  4017de:	d214      	bcs.n	40180a <vTaskPriorityInherit+0x3e>
  4017e0:	6981      	ldr	r1, [r0, #24]
  4017e2:	2900      	cmp	r1, #0
  4017e4:	db05      	blt.n	4017f2 <vTaskPriorityInherit+0x26>
  4017e6:	491d      	ldr	r1, [pc, #116]	; (40185c <vTaskPriorityInherit+0x90>)
  4017e8:	6809      	ldr	r1, [r1, #0]
  4017ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4017ec:	f1c1 0105 	rsb	r1, r1, #5
  4017f0:	6181      	str	r1, [r0, #24]
  4017f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4017f6:	491a      	ldr	r1, [pc, #104]	; (401860 <vTaskPriorityInherit+0x94>)
  4017f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4017fc:	6961      	ldr	r1, [r4, #20]
  4017fe:	4291      	cmp	r1, r2
  401800:	d004      	beq.n	40180c <vTaskPriorityInherit+0x40>
  401802:	4a16      	ldr	r2, [pc, #88]	; (40185c <vTaskPriorityInherit+0x90>)
  401804:	6812      	ldr	r2, [r2, #0]
  401806:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401808:	62e2      	str	r2, [r4, #44]	; 0x2c
  40180a:	bd38      	pop	{r3, r4, r5, pc}
  40180c:	1d25      	adds	r5, r4, #4
  40180e:	4628      	mov	r0, r5
  401810:	4b14      	ldr	r3, [pc, #80]	; (401864 <vTaskPriorityInherit+0x98>)
  401812:	4798      	blx	r3
  401814:	b970      	cbnz	r0, 401834 <vTaskPriorityInherit+0x68>
  401816:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401818:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40181c:	4a10      	ldr	r2, [pc, #64]	; (401860 <vTaskPriorityInherit+0x94>)
  40181e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401822:	b93a      	cbnz	r2, 401834 <vTaskPriorityInherit+0x68>
  401824:	4810      	ldr	r0, [pc, #64]	; (401868 <vTaskPriorityInherit+0x9c>)
  401826:	6802      	ldr	r2, [r0, #0]
  401828:	2101      	movs	r1, #1
  40182a:	fa01 f303 	lsl.w	r3, r1, r3
  40182e:	ea22 0303 	bic.w	r3, r2, r3
  401832:	6003      	str	r3, [r0, #0]
  401834:	4b09      	ldr	r3, [pc, #36]	; (40185c <vTaskPriorityInherit+0x90>)
  401836:	681b      	ldr	r3, [r3, #0]
  401838:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  40183a:	62e0      	str	r0, [r4, #44]	; 0x2c
  40183c:	4a0a      	ldr	r2, [pc, #40]	; (401868 <vTaskPriorityInherit+0x9c>)
  40183e:	6811      	ldr	r1, [r2, #0]
  401840:	2301      	movs	r3, #1
  401842:	4083      	lsls	r3, r0
  401844:	430b      	orrs	r3, r1
  401846:	6013      	str	r3, [r2, #0]
  401848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40184c:	4629      	mov	r1, r5
  40184e:	4b04      	ldr	r3, [pc, #16]	; (401860 <vTaskPriorityInherit+0x94>)
  401850:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401854:	4b05      	ldr	r3, [pc, #20]	; (40186c <vTaskPriorityInherit+0xa0>)
  401856:	4798      	blx	r3
  401858:	bd38      	pop	{r3, r4, r5, pc}
  40185a:	4770      	bx	lr
  40185c:	2040c1fc 	.word	0x2040c1fc
  401860:	2040c208 	.word	0x2040c208
  401864:	00400215 	.word	0x00400215
  401868:	2040c280 	.word	0x2040c280
  40186c:	004001c9 	.word	0x004001c9

00401870 <xTaskPriorityDisinherit>:
  401870:	2800      	cmp	r0, #0
  401872:	d04d      	beq.n	401910 <xTaskPriorityDisinherit+0xa0>
  401874:	b538      	push	{r3, r4, r5, lr}
  401876:	4604      	mov	r4, r0
  401878:	4a27      	ldr	r2, [pc, #156]	; (401918 <xTaskPriorityDisinherit+0xa8>)
  40187a:	6812      	ldr	r2, [r2, #0]
  40187c:	4290      	cmp	r0, r2
  40187e:	d00a      	beq.n	401896 <xTaskPriorityDisinherit+0x26>
  401880:	f04f 0380 	mov.w	r3, #128	; 0x80
  401884:	b672      	cpsid	i
  401886:	f383 8811 	msr	BASEPRI, r3
  40188a:	f3bf 8f6f 	isb	sy
  40188e:	f3bf 8f4f 	dsb	sy
  401892:	b662      	cpsie	i
  401894:	e7fe      	b.n	401894 <xTaskPriorityDisinherit+0x24>
  401896:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401898:	b952      	cbnz	r2, 4018b0 <xTaskPriorityDisinherit+0x40>
  40189a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40189e:	b672      	cpsid	i
  4018a0:	f383 8811 	msr	BASEPRI, r3
  4018a4:	f3bf 8f6f 	isb	sy
  4018a8:	f3bf 8f4f 	dsb	sy
  4018ac:	b662      	cpsie	i
  4018ae:	e7fe      	b.n	4018ae <xTaskPriorityDisinherit+0x3e>
  4018b0:	3a01      	subs	r2, #1
  4018b2:	64c2      	str	r2, [r0, #76]	; 0x4c
  4018b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4018b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  4018b8:	4288      	cmp	r0, r1
  4018ba:	d02b      	beq.n	401914 <xTaskPriorityDisinherit+0xa4>
  4018bc:	bb52      	cbnz	r2, 401914 <xTaskPriorityDisinherit+0xa4>
  4018be:	1d25      	adds	r5, r4, #4
  4018c0:	4628      	mov	r0, r5
  4018c2:	4b16      	ldr	r3, [pc, #88]	; (40191c <xTaskPriorityDisinherit+0xac>)
  4018c4:	4798      	blx	r3
  4018c6:	b968      	cbnz	r0, 4018e4 <xTaskPriorityDisinherit+0x74>
  4018c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4018ca:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4018ce:	4b14      	ldr	r3, [pc, #80]	; (401920 <xTaskPriorityDisinherit+0xb0>)
  4018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4018d4:	b933      	cbnz	r3, 4018e4 <xTaskPriorityDisinherit+0x74>
  4018d6:	4813      	ldr	r0, [pc, #76]	; (401924 <xTaskPriorityDisinherit+0xb4>)
  4018d8:	6803      	ldr	r3, [r0, #0]
  4018da:	2201      	movs	r2, #1
  4018dc:	408a      	lsls	r2, r1
  4018de:	ea23 0302 	bic.w	r3, r3, r2
  4018e2:	6003      	str	r3, [r0, #0]
  4018e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4018e6:	62e0      	str	r0, [r4, #44]	; 0x2c
  4018e8:	f1c0 0305 	rsb	r3, r0, #5
  4018ec:	61a3      	str	r3, [r4, #24]
  4018ee:	4a0d      	ldr	r2, [pc, #52]	; (401924 <xTaskPriorityDisinherit+0xb4>)
  4018f0:	6811      	ldr	r1, [r2, #0]
  4018f2:	2401      	movs	r4, #1
  4018f4:	fa04 f300 	lsl.w	r3, r4, r0
  4018f8:	430b      	orrs	r3, r1
  4018fa:	6013      	str	r3, [r2, #0]
  4018fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401900:	4629      	mov	r1, r5
  401902:	4b07      	ldr	r3, [pc, #28]	; (401920 <xTaskPriorityDisinherit+0xb0>)
  401904:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401908:	4b07      	ldr	r3, [pc, #28]	; (401928 <xTaskPriorityDisinherit+0xb8>)
  40190a:	4798      	blx	r3
  40190c:	4620      	mov	r0, r4
  40190e:	bd38      	pop	{r3, r4, r5, pc}
  401910:	2000      	movs	r0, #0
  401912:	4770      	bx	lr
  401914:	2000      	movs	r0, #0
  401916:	bd38      	pop	{r3, r4, r5, pc}
  401918:	2040c1fc 	.word	0x2040c1fc
  40191c:	00400215 	.word	0x00400215
  401920:	2040c208 	.word	0x2040c208
  401924:	2040c280 	.word	0x2040c280
  401928:	004001c9 	.word	0x004001c9

0040192c <pvTaskIncrementMutexHeldCount>:
  40192c:	4b05      	ldr	r3, [pc, #20]	; (401944 <pvTaskIncrementMutexHeldCount+0x18>)
  40192e:	681b      	ldr	r3, [r3, #0]
  401930:	b123      	cbz	r3, 40193c <pvTaskIncrementMutexHeldCount+0x10>
  401932:	4b04      	ldr	r3, [pc, #16]	; (401944 <pvTaskIncrementMutexHeldCount+0x18>)
  401934:	681a      	ldr	r2, [r3, #0]
  401936:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401938:	3301      	adds	r3, #1
  40193a:	64d3      	str	r3, [r2, #76]	; 0x4c
  40193c:	4b01      	ldr	r3, [pc, #4]	; (401944 <pvTaskIncrementMutexHeldCount+0x18>)
  40193e:	6818      	ldr	r0, [r3, #0]
  401940:	4770      	bx	lr
  401942:	bf00      	nop
  401944:	2040c1fc 	.word	0x2040c1fc

00401948 <prvInsertTimerInActiveList>:
  401948:	b508      	push	{r3, lr}
  40194a:	6041      	str	r1, [r0, #4]
  40194c:	6100      	str	r0, [r0, #16]
  40194e:	4291      	cmp	r1, r2
  401950:	d80c      	bhi.n	40196c <prvInsertTimerInActiveList+0x24>
  401952:	1ad2      	subs	r2, r2, r3
  401954:	6983      	ldr	r3, [r0, #24]
  401956:	429a      	cmp	r2, r3
  401958:	d301      	bcc.n	40195e <prvInsertTimerInActiveList+0x16>
  40195a:	2001      	movs	r0, #1
  40195c:	bd08      	pop	{r3, pc}
  40195e:	1d01      	adds	r1, r0, #4
  401960:	4b09      	ldr	r3, [pc, #36]	; (401988 <prvInsertTimerInActiveList+0x40>)
  401962:	6818      	ldr	r0, [r3, #0]
  401964:	4b09      	ldr	r3, [pc, #36]	; (40198c <prvInsertTimerInActiveList+0x44>)
  401966:	4798      	blx	r3
  401968:	2000      	movs	r0, #0
  40196a:	bd08      	pop	{r3, pc}
  40196c:	429a      	cmp	r2, r3
  40196e:	d203      	bcs.n	401978 <prvInsertTimerInActiveList+0x30>
  401970:	4299      	cmp	r1, r3
  401972:	d301      	bcc.n	401978 <prvInsertTimerInActiveList+0x30>
  401974:	2001      	movs	r0, #1
  401976:	bd08      	pop	{r3, pc}
  401978:	1d01      	adds	r1, r0, #4
  40197a:	4b05      	ldr	r3, [pc, #20]	; (401990 <prvInsertTimerInActiveList+0x48>)
  40197c:	6818      	ldr	r0, [r3, #0]
  40197e:	4b03      	ldr	r3, [pc, #12]	; (40198c <prvInsertTimerInActiveList+0x44>)
  401980:	4798      	blx	r3
  401982:	2000      	movs	r0, #0
  401984:	bd08      	pop	{r3, pc}
  401986:	bf00      	nop
  401988:	2040c300 	.word	0x2040c300
  40198c:	004001e1 	.word	0x004001e1
  401990:	2040c2fc 	.word	0x2040c2fc

00401994 <prvCheckForValidListAndQueue>:
  401994:	b570      	push	{r4, r5, r6, lr}
  401996:	4b15      	ldr	r3, [pc, #84]	; (4019ec <prvCheckForValidListAndQueue+0x58>)
  401998:	4798      	blx	r3
  40199a:	4b15      	ldr	r3, [pc, #84]	; (4019f0 <prvCheckForValidListAndQueue+0x5c>)
  40199c:	681b      	ldr	r3, [r3, #0]
  40199e:	b113      	cbz	r3, 4019a6 <prvCheckForValidListAndQueue+0x12>
  4019a0:	4b14      	ldr	r3, [pc, #80]	; (4019f4 <prvCheckForValidListAndQueue+0x60>)
  4019a2:	4798      	blx	r3
  4019a4:	bd70      	pop	{r4, r5, r6, pc}
  4019a6:	4d14      	ldr	r5, [pc, #80]	; (4019f8 <prvCheckForValidListAndQueue+0x64>)
  4019a8:	4628      	mov	r0, r5
  4019aa:	4e14      	ldr	r6, [pc, #80]	; (4019fc <prvCheckForValidListAndQueue+0x68>)
  4019ac:	47b0      	blx	r6
  4019ae:	4c14      	ldr	r4, [pc, #80]	; (401a00 <prvCheckForValidListAndQueue+0x6c>)
  4019b0:	4620      	mov	r0, r4
  4019b2:	47b0      	blx	r6
  4019b4:	4b13      	ldr	r3, [pc, #76]	; (401a04 <prvCheckForValidListAndQueue+0x70>)
  4019b6:	601d      	str	r5, [r3, #0]
  4019b8:	4b13      	ldr	r3, [pc, #76]	; (401a08 <prvCheckForValidListAndQueue+0x74>)
  4019ba:	601c      	str	r4, [r3, #0]
  4019bc:	2200      	movs	r2, #0
  4019be:	2110      	movs	r1, #16
  4019c0:	2005      	movs	r0, #5
  4019c2:	4b12      	ldr	r3, [pc, #72]	; (401a0c <prvCheckForValidListAndQueue+0x78>)
  4019c4:	4798      	blx	r3
  4019c6:	4b0a      	ldr	r3, [pc, #40]	; (4019f0 <prvCheckForValidListAndQueue+0x5c>)
  4019c8:	6018      	str	r0, [r3, #0]
  4019ca:	b118      	cbz	r0, 4019d4 <prvCheckForValidListAndQueue+0x40>
  4019cc:	4910      	ldr	r1, [pc, #64]	; (401a10 <prvCheckForValidListAndQueue+0x7c>)
  4019ce:	4b11      	ldr	r3, [pc, #68]	; (401a14 <prvCheckForValidListAndQueue+0x80>)
  4019d0:	4798      	blx	r3
  4019d2:	e7e5      	b.n	4019a0 <prvCheckForValidListAndQueue+0xc>
  4019d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d8:	b672      	cpsid	i
  4019da:	f383 8811 	msr	BASEPRI, r3
  4019de:	f3bf 8f6f 	isb	sy
  4019e2:	f3bf 8f4f 	dsb	sy
  4019e6:	b662      	cpsie	i
  4019e8:	e7fe      	b.n	4019e8 <prvCheckForValidListAndQueue+0x54>
  4019ea:	bf00      	nop
  4019ec:	004002f9 	.word	0x004002f9
  4019f0:	2040c330 	.word	0x2040c330
  4019f4:	00400345 	.word	0x00400345
  4019f8:	2040c304 	.word	0x2040c304
  4019fc:	004001ad 	.word	0x004001ad
  401a00:	2040c318 	.word	0x2040c318
  401a04:	2040c2fc 	.word	0x2040c2fc
  401a08:	2040c300 	.word	0x2040c300
  401a0c:	00400851 	.word	0x00400851
  401a10:	00408c4c 	.word	0x00408c4c
  401a14:	00400d81 	.word	0x00400d81

00401a18 <xTimerCreateTimerTask>:
  401a18:	b510      	push	{r4, lr}
  401a1a:	b084      	sub	sp, #16
  401a1c:	4b0f      	ldr	r3, [pc, #60]	; (401a5c <xTimerCreateTimerTask+0x44>)
  401a1e:	4798      	blx	r3
  401a20:	4b0f      	ldr	r3, [pc, #60]	; (401a60 <xTimerCreateTimerTask+0x48>)
  401a22:	681b      	ldr	r3, [r3, #0]
  401a24:	b173      	cbz	r3, 401a44 <xTimerCreateTimerTask+0x2c>
  401a26:	2300      	movs	r3, #0
  401a28:	9303      	str	r3, [sp, #12]
  401a2a:	9302      	str	r3, [sp, #8]
  401a2c:	9301      	str	r3, [sp, #4]
  401a2e:	2204      	movs	r2, #4
  401a30:	9200      	str	r2, [sp, #0]
  401a32:	f44f 7282 	mov.w	r2, #260	; 0x104
  401a36:	490b      	ldr	r1, [pc, #44]	; (401a64 <xTimerCreateTimerTask+0x4c>)
  401a38:	480b      	ldr	r0, [pc, #44]	; (401a68 <xTimerCreateTimerTask+0x50>)
  401a3a:	4c0c      	ldr	r4, [pc, #48]	; (401a6c <xTimerCreateTimerTask+0x54>)
  401a3c:	47a0      	blx	r4
  401a3e:	b108      	cbz	r0, 401a44 <xTimerCreateTimerTask+0x2c>
  401a40:	b004      	add	sp, #16
  401a42:	bd10      	pop	{r4, pc}
  401a44:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a48:	b672      	cpsid	i
  401a4a:	f383 8811 	msr	BASEPRI, r3
  401a4e:	f3bf 8f6f 	isb	sy
  401a52:	f3bf 8f4f 	dsb	sy
  401a56:	b662      	cpsie	i
  401a58:	e7fe      	b.n	401a58 <xTimerCreateTimerTask+0x40>
  401a5a:	bf00      	nop
  401a5c:	00401995 	.word	0x00401995
  401a60:	2040c330 	.word	0x2040c330
  401a64:	00408c54 	.word	0x00408c54
  401a68:	00401b99 	.word	0x00401b99
  401a6c:	00400e91 	.word	0x00400e91

00401a70 <xTimerGenericCommand>:
  401a70:	b1d8      	cbz	r0, 401aaa <xTimerGenericCommand+0x3a>
  401a72:	b530      	push	{r4, r5, lr}
  401a74:	b085      	sub	sp, #20
  401a76:	4615      	mov	r5, r2
  401a78:	4604      	mov	r4, r0
  401a7a:	4a15      	ldr	r2, [pc, #84]	; (401ad0 <xTimerGenericCommand+0x60>)
  401a7c:	6810      	ldr	r0, [r2, #0]
  401a7e:	b320      	cbz	r0, 401aca <xTimerGenericCommand+0x5a>
  401a80:	461a      	mov	r2, r3
  401a82:	9100      	str	r1, [sp, #0]
  401a84:	9501      	str	r5, [sp, #4]
  401a86:	9402      	str	r4, [sp, #8]
  401a88:	2905      	cmp	r1, #5
  401a8a:	dc19      	bgt.n	401ac0 <xTimerGenericCommand+0x50>
  401a8c:	4b11      	ldr	r3, [pc, #68]	; (401ad4 <xTimerGenericCommand+0x64>)
  401a8e:	4798      	blx	r3
  401a90:	2802      	cmp	r0, #2
  401a92:	f04f 0300 	mov.w	r3, #0
  401a96:	bf0c      	ite	eq
  401a98:	9a08      	ldreq	r2, [sp, #32]
  401a9a:	461a      	movne	r2, r3
  401a9c:	4669      	mov	r1, sp
  401a9e:	480c      	ldr	r0, [pc, #48]	; (401ad0 <xTimerGenericCommand+0x60>)
  401aa0:	6800      	ldr	r0, [r0, #0]
  401aa2:	4c0d      	ldr	r4, [pc, #52]	; (401ad8 <xTimerGenericCommand+0x68>)
  401aa4:	47a0      	blx	r4
  401aa6:	b005      	add	sp, #20
  401aa8:	bd30      	pop	{r4, r5, pc}
  401aaa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aae:	b672      	cpsid	i
  401ab0:	f383 8811 	msr	BASEPRI, r3
  401ab4:	f3bf 8f6f 	isb	sy
  401ab8:	f3bf 8f4f 	dsb	sy
  401abc:	b662      	cpsie	i
  401abe:	e7fe      	b.n	401abe <xTimerGenericCommand+0x4e>
  401ac0:	2300      	movs	r3, #0
  401ac2:	4669      	mov	r1, sp
  401ac4:	4c05      	ldr	r4, [pc, #20]	; (401adc <xTimerGenericCommand+0x6c>)
  401ac6:	47a0      	blx	r4
  401ac8:	e7ed      	b.n	401aa6 <xTimerGenericCommand+0x36>
  401aca:	2000      	movs	r0, #0
  401acc:	e7eb      	b.n	401aa6 <xTimerGenericCommand+0x36>
  401ace:	bf00      	nop
  401ad0:	2040c330 	.word	0x2040c330
  401ad4:	004017ad 	.word	0x004017ad
  401ad8:	004008cd 	.word	0x004008cd
  401adc:	00400ab1 	.word	0x00400ab1

00401ae0 <prvSampleTimeNow>:
  401ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ae4:	b082      	sub	sp, #8
  401ae6:	4680      	mov	r8, r0
  401ae8:	4b24      	ldr	r3, [pc, #144]	; (401b7c <prvSampleTimeNow+0x9c>)
  401aea:	4798      	blx	r3
  401aec:	4607      	mov	r7, r0
  401aee:	4b24      	ldr	r3, [pc, #144]	; (401b80 <prvSampleTimeNow+0xa0>)
  401af0:	681b      	ldr	r3, [r3, #0]
  401af2:	4298      	cmp	r0, r3
  401af4:	d31b      	bcc.n	401b2e <prvSampleTimeNow+0x4e>
  401af6:	2300      	movs	r3, #0
  401af8:	f8c8 3000 	str.w	r3, [r8]
  401afc:	4b20      	ldr	r3, [pc, #128]	; (401b80 <prvSampleTimeNow+0xa0>)
  401afe:	601f      	str	r7, [r3, #0]
  401b00:	4638      	mov	r0, r7
  401b02:	b002      	add	sp, #8
  401b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b08:	2100      	movs	r1, #0
  401b0a:	9100      	str	r1, [sp, #0]
  401b0c:	460b      	mov	r3, r1
  401b0e:	4652      	mov	r2, sl
  401b10:	4620      	mov	r0, r4
  401b12:	4c1c      	ldr	r4, [pc, #112]	; (401b84 <prvSampleTimeNow+0xa4>)
  401b14:	47a0      	blx	r4
  401b16:	b960      	cbnz	r0, 401b32 <prvSampleTimeNow+0x52>
  401b18:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b1c:	b672      	cpsid	i
  401b1e:	f383 8811 	msr	BASEPRI, r3
  401b22:	f3bf 8f6f 	isb	sy
  401b26:	f3bf 8f4f 	dsb	sy
  401b2a:	b662      	cpsie	i
  401b2c:	e7fe      	b.n	401b2c <prvSampleTimeNow+0x4c>
  401b2e:	4d16      	ldr	r5, [pc, #88]	; (401b88 <prvSampleTimeNow+0xa8>)
  401b30:	4e16      	ldr	r6, [pc, #88]	; (401b8c <prvSampleTimeNow+0xac>)
  401b32:	682b      	ldr	r3, [r5, #0]
  401b34:	681a      	ldr	r2, [r3, #0]
  401b36:	b1c2      	cbz	r2, 401b6a <prvSampleTimeNow+0x8a>
  401b38:	68db      	ldr	r3, [r3, #12]
  401b3a:	f8d3 a000 	ldr.w	sl, [r3]
  401b3e:	68dc      	ldr	r4, [r3, #12]
  401b40:	f104 0904 	add.w	r9, r4, #4
  401b44:	4648      	mov	r0, r9
  401b46:	47b0      	blx	r6
  401b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b4a:	4620      	mov	r0, r4
  401b4c:	4798      	blx	r3
  401b4e:	69e3      	ldr	r3, [r4, #28]
  401b50:	2b01      	cmp	r3, #1
  401b52:	d1ee      	bne.n	401b32 <prvSampleTimeNow+0x52>
  401b54:	69a3      	ldr	r3, [r4, #24]
  401b56:	4453      	add	r3, sl
  401b58:	459a      	cmp	sl, r3
  401b5a:	d2d5      	bcs.n	401b08 <prvSampleTimeNow+0x28>
  401b5c:	6063      	str	r3, [r4, #4]
  401b5e:	6124      	str	r4, [r4, #16]
  401b60:	4649      	mov	r1, r9
  401b62:	6828      	ldr	r0, [r5, #0]
  401b64:	4b0a      	ldr	r3, [pc, #40]	; (401b90 <prvSampleTimeNow+0xb0>)
  401b66:	4798      	blx	r3
  401b68:	e7e3      	b.n	401b32 <prvSampleTimeNow+0x52>
  401b6a:	4a0a      	ldr	r2, [pc, #40]	; (401b94 <prvSampleTimeNow+0xb4>)
  401b6c:	6810      	ldr	r0, [r2, #0]
  401b6e:	4906      	ldr	r1, [pc, #24]	; (401b88 <prvSampleTimeNow+0xa8>)
  401b70:	6008      	str	r0, [r1, #0]
  401b72:	6013      	str	r3, [r2, #0]
  401b74:	2301      	movs	r3, #1
  401b76:	f8c8 3000 	str.w	r3, [r8]
  401b7a:	e7bf      	b.n	401afc <prvSampleTimeNow+0x1c>
  401b7c:	00401161 	.word	0x00401161
  401b80:	2040c32c 	.word	0x2040c32c
  401b84:	00401a71 	.word	0x00401a71
  401b88:	2040c2fc 	.word	0x2040c2fc
  401b8c:	00400215 	.word	0x00400215
  401b90:	004001e1 	.word	0x004001e1
  401b94:	2040c300 	.word	0x2040c300

00401b98 <prvTimerTask>:
  401b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b9c:	b088      	sub	sp, #32
  401b9e:	4e75      	ldr	r6, [pc, #468]	; (401d74 <prvTimerTask+0x1dc>)
  401ba0:	4f75      	ldr	r7, [pc, #468]	; (401d78 <prvTimerTask+0x1e0>)
  401ba2:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 401da0 <prvTimerTask+0x208>
  401ba6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 401da4 <prvTimerTask+0x20c>
  401baa:	6833      	ldr	r3, [r6, #0]
  401bac:	681a      	ldr	r2, [r3, #0]
  401bae:	2a00      	cmp	r2, #0
  401bb0:	f000 80ce 	beq.w	401d50 <prvTimerTask+0x1b8>
  401bb4:	68db      	ldr	r3, [r3, #12]
  401bb6:	681c      	ldr	r4, [r3, #0]
  401bb8:	47b8      	blx	r7
  401bba:	a804      	add	r0, sp, #16
  401bbc:	4b6f      	ldr	r3, [pc, #444]	; (401d7c <prvTimerTask+0x1e4>)
  401bbe:	4798      	blx	r3
  401bc0:	4605      	mov	r5, r0
  401bc2:	9b04      	ldr	r3, [sp, #16]
  401bc4:	2b00      	cmp	r3, #0
  401bc6:	d144      	bne.n	401c52 <prvTimerTask+0xba>
  401bc8:	42a0      	cmp	r0, r4
  401bca:	d212      	bcs.n	401bf2 <prvTimerTask+0x5a>
  401bcc:	2200      	movs	r2, #0
  401bce:	1b61      	subs	r1, r4, r5
  401bd0:	4b6b      	ldr	r3, [pc, #428]	; (401d80 <prvTimerTask+0x1e8>)
  401bd2:	6818      	ldr	r0, [r3, #0]
  401bd4:	4b6b      	ldr	r3, [pc, #428]	; (401d84 <prvTimerTask+0x1ec>)
  401bd6:	4798      	blx	r3
  401bd8:	4b6b      	ldr	r3, [pc, #428]	; (401d88 <prvTimerTask+0x1f0>)
  401bda:	4798      	blx	r3
  401bdc:	2800      	cmp	r0, #0
  401bde:	d13a      	bne.n	401c56 <prvTimerTask+0xbe>
  401be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401be4:	f8c9 3000 	str.w	r3, [r9]
  401be8:	f3bf 8f4f 	dsb	sy
  401bec:	f3bf 8f6f 	isb	sy
  401bf0:	e031      	b.n	401c56 <prvTimerTask+0xbe>
  401bf2:	4b65      	ldr	r3, [pc, #404]	; (401d88 <prvTimerTask+0x1f0>)
  401bf4:	4798      	blx	r3
  401bf6:	6833      	ldr	r3, [r6, #0]
  401bf8:	68db      	ldr	r3, [r3, #12]
  401bfa:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  401bfe:	f10a 0004 	add.w	r0, sl, #4
  401c02:	47c0      	blx	r8
  401c04:	f8da 301c 	ldr.w	r3, [sl, #28]
  401c08:	2b01      	cmp	r3, #1
  401c0a:	d004      	beq.n	401c16 <prvTimerTask+0x7e>
  401c0c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401c10:	4650      	mov	r0, sl
  401c12:	4798      	blx	r3
  401c14:	e01f      	b.n	401c56 <prvTimerTask+0xbe>
  401c16:	f8da 1018 	ldr.w	r1, [sl, #24]
  401c1a:	4623      	mov	r3, r4
  401c1c:	462a      	mov	r2, r5
  401c1e:	4421      	add	r1, r4
  401c20:	4650      	mov	r0, sl
  401c22:	4d5a      	ldr	r5, [pc, #360]	; (401d8c <prvTimerTask+0x1f4>)
  401c24:	47a8      	blx	r5
  401c26:	2801      	cmp	r0, #1
  401c28:	d1f0      	bne.n	401c0c <prvTimerTask+0x74>
  401c2a:	2100      	movs	r1, #0
  401c2c:	9100      	str	r1, [sp, #0]
  401c2e:	460b      	mov	r3, r1
  401c30:	4622      	mov	r2, r4
  401c32:	4650      	mov	r0, sl
  401c34:	4c56      	ldr	r4, [pc, #344]	; (401d90 <prvTimerTask+0x1f8>)
  401c36:	47a0      	blx	r4
  401c38:	2800      	cmp	r0, #0
  401c3a:	d1e7      	bne.n	401c0c <prvTimerTask+0x74>
  401c3c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c40:	b672      	cpsid	i
  401c42:	f383 8811 	msr	BASEPRI, r3
  401c46:	f3bf 8f6f 	isb	sy
  401c4a:	f3bf 8f4f 	dsb	sy
  401c4e:	b662      	cpsie	i
  401c50:	e7fe      	b.n	401c50 <prvTimerTask+0xb8>
  401c52:	4b4d      	ldr	r3, [pc, #308]	; (401d88 <prvTimerTask+0x1f0>)
  401c54:	4798      	blx	r3
  401c56:	4d4a      	ldr	r5, [pc, #296]	; (401d80 <prvTimerTask+0x1e8>)
  401c58:	4c4e      	ldr	r4, [pc, #312]	; (401d94 <prvTimerTask+0x1fc>)
  401c5a:	e006      	b.n	401c6a <prvTimerTask+0xd2>
  401c5c:	9907      	ldr	r1, [sp, #28]
  401c5e:	9806      	ldr	r0, [sp, #24]
  401c60:	9b05      	ldr	r3, [sp, #20]
  401c62:	4798      	blx	r3
  401c64:	9b04      	ldr	r3, [sp, #16]
  401c66:	2b00      	cmp	r3, #0
  401c68:	da09      	bge.n	401c7e <prvTimerTask+0xe6>
  401c6a:	2300      	movs	r3, #0
  401c6c:	461a      	mov	r2, r3
  401c6e:	a904      	add	r1, sp, #16
  401c70:	6828      	ldr	r0, [r5, #0]
  401c72:	47a0      	blx	r4
  401c74:	2800      	cmp	r0, #0
  401c76:	d098      	beq.n	401baa <prvTimerTask+0x12>
  401c78:	9b04      	ldr	r3, [sp, #16]
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	dbee      	blt.n	401c5c <prvTimerTask+0xc4>
  401c7e:	f8dd a018 	ldr.w	sl, [sp, #24]
  401c82:	f8da 3014 	ldr.w	r3, [sl, #20]
  401c86:	b113      	cbz	r3, 401c8e <prvTimerTask+0xf6>
  401c88:	f10a 0004 	add.w	r0, sl, #4
  401c8c:	47c0      	blx	r8
  401c8e:	a803      	add	r0, sp, #12
  401c90:	4b3a      	ldr	r3, [pc, #232]	; (401d7c <prvTimerTask+0x1e4>)
  401c92:	4798      	blx	r3
  401c94:	9b04      	ldr	r3, [sp, #16]
  401c96:	2b09      	cmp	r3, #9
  401c98:	d8e7      	bhi.n	401c6a <prvTimerTask+0xd2>
  401c9a:	a201      	add	r2, pc, #4	; (adr r2, 401ca0 <prvTimerTask+0x108>)
  401c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ca0:	00401cc9 	.word	0x00401cc9
  401ca4:	00401cc9 	.word	0x00401cc9
  401ca8:	00401cc9 	.word	0x00401cc9
  401cac:	00401c6b 	.word	0x00401c6b
  401cb0:	00401d1d 	.word	0x00401d1d
  401cb4:	00401d49 	.word	0x00401d49
  401cb8:	00401cc9 	.word	0x00401cc9
  401cbc:	00401cc9 	.word	0x00401cc9
  401cc0:	00401c6b 	.word	0x00401c6b
  401cc4:	00401d1d 	.word	0x00401d1d
  401cc8:	9c05      	ldr	r4, [sp, #20]
  401cca:	f8da 1018 	ldr.w	r1, [sl, #24]
  401cce:	4623      	mov	r3, r4
  401cd0:	4602      	mov	r2, r0
  401cd2:	4421      	add	r1, r4
  401cd4:	4650      	mov	r0, sl
  401cd6:	4c2d      	ldr	r4, [pc, #180]	; (401d8c <prvTimerTask+0x1f4>)
  401cd8:	47a0      	blx	r4
  401cda:	2801      	cmp	r0, #1
  401cdc:	d1bc      	bne.n	401c58 <prvTimerTask+0xc0>
  401cde:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401ce2:	4650      	mov	r0, sl
  401ce4:	4798      	blx	r3
  401ce6:	f8da 301c 	ldr.w	r3, [sl, #28]
  401cea:	2b01      	cmp	r3, #1
  401cec:	d1b4      	bne.n	401c58 <prvTimerTask+0xc0>
  401cee:	f8da 2018 	ldr.w	r2, [sl, #24]
  401cf2:	2100      	movs	r1, #0
  401cf4:	9100      	str	r1, [sp, #0]
  401cf6:	460b      	mov	r3, r1
  401cf8:	9805      	ldr	r0, [sp, #20]
  401cfa:	4402      	add	r2, r0
  401cfc:	4650      	mov	r0, sl
  401cfe:	4c24      	ldr	r4, [pc, #144]	; (401d90 <prvTimerTask+0x1f8>)
  401d00:	47a0      	blx	r4
  401d02:	2800      	cmp	r0, #0
  401d04:	d1a8      	bne.n	401c58 <prvTimerTask+0xc0>
  401d06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d0a:	b672      	cpsid	i
  401d0c:	f383 8811 	msr	BASEPRI, r3
  401d10:	f3bf 8f6f 	isb	sy
  401d14:	f3bf 8f4f 	dsb	sy
  401d18:	b662      	cpsie	i
  401d1a:	e7fe      	b.n	401d1a <prvTimerTask+0x182>
  401d1c:	9905      	ldr	r1, [sp, #20]
  401d1e:	f8ca 1018 	str.w	r1, [sl, #24]
  401d22:	b131      	cbz	r1, 401d32 <prvTimerTask+0x19a>
  401d24:	4603      	mov	r3, r0
  401d26:	4602      	mov	r2, r0
  401d28:	4401      	add	r1, r0
  401d2a:	4650      	mov	r0, sl
  401d2c:	4c17      	ldr	r4, [pc, #92]	; (401d8c <prvTimerTask+0x1f4>)
  401d2e:	47a0      	blx	r4
  401d30:	e792      	b.n	401c58 <prvTimerTask+0xc0>
  401d32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d36:	b672      	cpsid	i
  401d38:	f383 8811 	msr	BASEPRI, r3
  401d3c:	f3bf 8f6f 	isb	sy
  401d40:	f3bf 8f4f 	dsb	sy
  401d44:	b662      	cpsie	i
  401d46:	e7fe      	b.n	401d46 <prvTimerTask+0x1ae>
  401d48:	4650      	mov	r0, sl
  401d4a:	4b13      	ldr	r3, [pc, #76]	; (401d98 <prvTimerTask+0x200>)
  401d4c:	4798      	blx	r3
  401d4e:	e783      	b.n	401c58 <prvTimerTask+0xc0>
  401d50:	47b8      	blx	r7
  401d52:	a804      	add	r0, sp, #16
  401d54:	4b09      	ldr	r3, [pc, #36]	; (401d7c <prvTimerTask+0x1e4>)
  401d56:	4798      	blx	r3
  401d58:	4605      	mov	r5, r0
  401d5a:	9b04      	ldr	r3, [sp, #16]
  401d5c:	2b00      	cmp	r3, #0
  401d5e:	f47f af78 	bne.w	401c52 <prvTimerTask+0xba>
  401d62:	4b0e      	ldr	r3, [pc, #56]	; (401d9c <prvTimerTask+0x204>)
  401d64:	681b      	ldr	r3, [r3, #0]
  401d66:	681a      	ldr	r2, [r3, #0]
  401d68:	fab2 f282 	clz	r2, r2
  401d6c:	0952      	lsrs	r2, r2, #5
  401d6e:	2400      	movs	r4, #0
  401d70:	e72d      	b.n	401bce <prvTimerTask+0x36>
  401d72:	bf00      	nop
  401d74:	2040c2fc 	.word	0x2040c2fc
  401d78:	00401151 	.word	0x00401151
  401d7c:	00401ae1 	.word	0x00401ae1
  401d80:	2040c330 	.word	0x2040c330
  401d84:	00400db5 	.word	0x00400db5
  401d88:	004012b9 	.word	0x004012b9
  401d8c:	00401949 	.word	0x00401949
  401d90:	00401a71 	.word	0x00401a71
  401d94:	00400bb1 	.word	0x00400bb1
  401d98:	004005c5 	.word	0x004005c5
  401d9c:	2040c300 	.word	0x2040c300
  401da0:	e000ed04 	.word	0xe000ed04
  401da4:	00400215 	.word	0x00400215

00401da8 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  401da8:	2810      	cmp	r0, #16
  401daa:	d108      	bne.n	401dbe <chip_isr+0x16>
  401dac:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401db0:	d105      	bne.n	401dbe <chip_isr+0x16>
{
  401db2:	b508      	push	{r3, lr}
		if (gpfIsr) {
  401db4:	4b02      	ldr	r3, [pc, #8]	; (401dc0 <chip_isr+0x18>)
  401db6:	681b      	ldr	r3, [r3, #0]
  401db8:	b103      	cbz	r3, 401dbc <chip_isr+0x14>
			gpfIsr();
  401dba:	4798      	blx	r3
  401dbc:	bd08      	pop	{r3, pc}
  401dbe:	4770      	bx	lr
  401dc0:	2040c334 	.word	0x2040c334

00401dc4 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  401dc4:	b150      	cbz	r0, 401ddc <nm_bsp_sleep+0x18>
{
  401dc6:	b570      	push	{r4, r5, r6, lr}
  401dc8:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  401dca:	4e05      	ldr	r6, [pc, #20]	; (401de0 <nm_bsp_sleep+0x1c>)
  401dcc:	4d05      	ldr	r5, [pc, #20]	; (401de4 <nm_bsp_sleep+0x20>)
  401dce:	4630      	mov	r0, r6
  401dd0:	47a8      	blx	r5
	while(u32TimeMsec--) {
  401dd2:	3c01      	subs	r4, #1
  401dd4:	f1b4 3fff 	cmp.w	r4, #4294967295
  401dd8:	d1f9      	bne.n	401dce <nm_bsp_sleep+0xa>
  401dda:	bd70      	pop	{r4, r5, r6, pc}
  401ddc:	4770      	bx	lr
  401dde:	bf00      	nop
  401de0:	00031635 	.word	0x00031635
  401de4:	20400001 	.word	0x20400001

00401de8 <nm_bsp_reset>:
{
  401de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401dec:	4f09      	ldr	r7, [pc, #36]	; (401e14 <nm_bsp_reset+0x2c>)
  401dee:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  401df2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  401df6:	4d08      	ldr	r5, [pc, #32]	; (401e18 <nm_bsp_reset+0x30>)
  401df8:	2608      	movs	r6, #8
  401dfa:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  401dfc:	2064      	movs	r0, #100	; 0x64
  401dfe:	4c07      	ldr	r4, [pc, #28]	; (401e1c <nm_bsp_reset+0x34>)
  401e00:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e02:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  401e06:	2064      	movs	r0, #100	; 0x64
  401e08:	47a0      	blx	r4
  401e0a:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  401e0c:	2064      	movs	r0, #100	; 0x64
  401e0e:	47a0      	blx	r4
  401e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e14:	400e1200 	.word	0x400e1200
  401e18:	400e1000 	.word	0x400e1000
  401e1c:	00401dc5 	.word	0x00401dc5

00401e20 <nm_bsp_init>:
{
  401e20:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  401e22:	2200      	movs	r2, #0
  401e24:	4b14      	ldr	r3, [pc, #80]	; (401e78 <nm_bsp_init+0x58>)
  401e26:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401e28:	200a      	movs	r0, #10
  401e2a:	4c14      	ldr	r4, [pc, #80]	; (401e7c <nm_bsp_init+0x5c>)
  401e2c:	47a0      	blx	r4
  401e2e:	200b      	movs	r0, #11
  401e30:	47a0      	blx	r4
  401e32:	200c      	movs	r0, #12
  401e34:	47a0      	blx	r4
  401e36:	2010      	movs	r0, #16
  401e38:	47a0      	blx	r4
  401e3a:	2011      	movs	r0, #17
  401e3c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401e3e:	4b10      	ldr	r3, [pc, #64]	; (401e80 <nm_bsp_init+0x60>)
  401e40:	2208      	movs	r2, #8
  401e42:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401e44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e48:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401e4a:	4a0e      	ldr	r2, [pc, #56]	; (401e84 <nm_bsp_init+0x64>)
  401e4c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401e50:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401e52:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e56:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401e58:	2204      	movs	r2, #4
  401e5a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401e5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e60:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  401e62:	4b09      	ldr	r3, [pc, #36]	; (401e88 <nm_bsp_init+0x68>)
  401e64:	681b      	ldr	r3, [r3, #0]
  401e66:	f013 0f01 	tst.w	r3, #1
  401e6a:	d001      	beq.n	401e70 <nm_bsp_init+0x50>
  401e6c:	4b06      	ldr	r3, [pc, #24]	; (401e88 <nm_bsp_init+0x68>)
  401e6e:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  401e70:	4b06      	ldr	r3, [pc, #24]	; (401e8c <nm_bsp_init+0x6c>)
  401e72:	4798      	blx	r3
}
  401e74:	2000      	movs	r0, #0
  401e76:	bd10      	pop	{r4, pc}
  401e78:	2040c334 	.word	0x2040c334
  401e7c:	004050e5 	.word	0x004050e5
  401e80:	400e1000 	.word	0x400e1000
  401e84:	400e1200 	.word	0x400e1200
  401e88:	e000e010 	.word	0xe000e010
  401e8c:	00401de9 	.word	0x00401de9

00401e90 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  401e90:	b530      	push	{r4, r5, lr}
  401e92:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  401e94:	4b14      	ldr	r3, [pc, #80]	; (401ee8 <nm_bsp_register_isr+0x58>)
  401e96:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  401e98:	2010      	movs	r0, #16
  401e9a:	4b14      	ldr	r3, [pc, #80]	; (401eec <nm_bsp_register_isr+0x5c>)
  401e9c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  401e9e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401ea2:	207c      	movs	r0, #124	; 0x7c
  401ea4:	4b12      	ldr	r3, [pc, #72]	; (401ef0 <nm_bsp_register_isr+0x60>)
  401ea6:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  401ea8:	4c12      	ldr	r4, [pc, #72]	; (401ef4 <nm_bsp_register_isr+0x64>)
  401eaa:	2201      	movs	r2, #1
  401eac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401eb0:	4620      	mov	r0, r4
  401eb2:	4b11      	ldr	r3, [pc, #68]	; (401ef8 <nm_bsp_register_isr+0x68>)
  401eb4:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  401eb6:	4b11      	ldr	r3, [pc, #68]	; (401efc <nm_bsp_register_isr+0x6c>)
  401eb8:	9300      	str	r3, [sp, #0]
  401eba:	2351      	movs	r3, #81	; 0x51
  401ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ec0:	2110      	movs	r1, #16
  401ec2:	4620      	mov	r0, r4
  401ec4:	4d0e      	ldr	r5, [pc, #56]	; (401f00 <nm_bsp_register_isr+0x70>)
  401ec6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401ec8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401ecc:	4620      	mov	r0, r4
  401ece:	4b0d      	ldr	r3, [pc, #52]	; (401f04 <nm_bsp_register_isr+0x74>)
  401ed0:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401ed6:	4b0c      	ldr	r3, [pc, #48]	; (401f08 <nm_bsp_register_isr+0x78>)
  401ed8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  401eda:	2200      	movs	r2, #0
  401edc:	2110      	movs	r1, #16
  401ede:	4620      	mov	r0, r4
  401ee0:	4b0a      	ldr	r3, [pc, #40]	; (401f0c <nm_bsp_register_isr+0x7c>)
  401ee2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  401ee4:	b003      	add	sp, #12
  401ee6:	bd30      	pop	{r4, r5, pc}
  401ee8:	2040c334 	.word	0x2040c334
  401eec:	004050e5 	.word	0x004050e5
  401ef0:	00404ced 	.word	0x00404ced
  401ef4:	400e1400 	.word	0x400e1400
  401ef8:	00404bb1 	.word	0x00404bb1
  401efc:	00401da9 	.word	0x00401da9
  401f00:	00404e6d 	.word	0x00404e6d
  401f04:	00404cdd 	.word	0x00404cdd
  401f08:	e000e100 	.word	0xe000e100
  401f0c:	00404f41 	.word	0x00404f41

00401f10 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  401f10:	b508      	push	{r3, lr}
	if (u8Enable) {
  401f12:	b928      	cbnz	r0, 401f20 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401f14:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f18:	4804      	ldr	r0, [pc, #16]	; (401f2c <nm_bsp_interrupt_ctrl+0x1c>)
  401f1a:	4b05      	ldr	r3, [pc, #20]	; (401f30 <nm_bsp_interrupt_ctrl+0x20>)
  401f1c:	4798      	blx	r3
  401f1e:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401f20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f24:	4801      	ldr	r0, [pc, #4]	; (401f2c <nm_bsp_interrupt_ctrl+0x1c>)
  401f26:	4b03      	ldr	r3, [pc, #12]	; (401f34 <nm_bsp_interrupt_ctrl+0x24>)
  401f28:	4798      	blx	r3
  401f2a:	bd08      	pop	{r3, pc}
  401f2c:	400e1400 	.word	0x400e1400
  401f30:	00404ce1 	.word	0x00404ce1
  401f34:	00404cdd 	.word	0x00404cdd

00401f38 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  401f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  401f3a:	4c39      	ldr	r4, [pc, #228]	; (402020 <nm_bus_init+0xe8>)
  401f3c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401f40:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401f42:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401f46:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401f48:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401f4a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401f4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401f50:	430b      	orrs	r3, r1
  401f52:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401f54:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401f56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  401f5a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  401f5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401f60:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401f62:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401f66:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401f68:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401f6a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401f6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401f70:	4313      	orrs	r3, r2
  401f72:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401f74:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  401f7a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  401f7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401f80:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401f82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401f86:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401f88:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401f8a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401f8e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  401f90:	4318      	orrs	r0, r3
  401f92:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401f94:	6f60      	ldr	r0, [r4, #116]	; 0x74
  401f96:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  401f9a:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401f9c:	6061      	str	r1, [r4, #4]
  401f9e:	6062      	str	r2, [r4, #4]
  401fa0:	6063      	str	r3, [r4, #4]
  401fa2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  401fa6:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  401fa8:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  401faa:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  401fac:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  401fae:	4d1d      	ldr	r5, [pc, #116]	; (402024 <nm_bus_init+0xec>)
  401fb0:	4628      	mov	r0, r5
  401fb2:	4b1d      	ldr	r3, [pc, #116]	; (402028 <nm_bus_init+0xf0>)
  401fb4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401fb6:	2302      	movs	r3, #2
  401fb8:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  401fba:	2380      	movs	r3, #128	; 0x80
  401fbc:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401fbe:	686b      	ldr	r3, [r5, #4]
  401fc0:	f043 0301 	orr.w	r3, r3, #1
  401fc4:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401fc6:	686b      	ldr	r3, [r5, #4]
  401fc8:	f043 0310 	orr.w	r3, r3, #16
  401fcc:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  401fce:	2101      	movs	r1, #1
  401fd0:	4628      	mov	r0, r5
  401fd2:	4b16      	ldr	r3, [pc, #88]	; (40202c <nm_bus_init+0xf4>)
  401fd4:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  401fd6:	2200      	movs	r2, #0
  401fd8:	2101      	movs	r1, #1
  401fda:	4628      	mov	r0, r5
  401fdc:	4b14      	ldr	r3, [pc, #80]	; (402030 <nm_bus_init+0xf8>)
  401fde:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  401fe0:	2201      	movs	r2, #1
  401fe2:	4611      	mov	r1, r2
  401fe4:	4628      	mov	r0, r5
  401fe6:	4b13      	ldr	r3, [pc, #76]	; (402034 <nm_bus_init+0xfc>)
  401fe8:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  401fea:	2200      	movs	r2, #0
  401fec:	2101      	movs	r1, #1
  401fee:	4628      	mov	r0, r5
  401ff0:	4b11      	ldr	r3, [pc, #68]	; (402038 <nm_bus_init+0x100>)
  401ff2:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  401ff4:	4911      	ldr	r1, [pc, #68]	; (40203c <nm_bus_init+0x104>)
  401ff6:	4812      	ldr	r0, [pc, #72]	; (402040 <nm_bus_init+0x108>)
  401ff8:	4b12      	ldr	r3, [pc, #72]	; (402044 <nm_bus_init+0x10c>)
  401ffa:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  401ffc:	b2c2      	uxtb	r2, r0
  401ffe:	2101      	movs	r1, #1
  402000:	4628      	mov	r0, r5
  402002:	4b11      	ldr	r3, [pc, #68]	; (402048 <nm_bus_init+0x110>)
  402004:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  402006:	2300      	movs	r3, #0
  402008:	461a      	mov	r2, r3
  40200a:	2101      	movs	r1, #1
  40200c:	4628      	mov	r0, r5
  40200e:	4f0f      	ldr	r7, [pc, #60]	; (40204c <nm_bus_init+0x114>)
  402010:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402012:	2301      	movs	r3, #1
  402014:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  402016:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  402018:	4b0d      	ldr	r3, [pc, #52]	; (402050 <nm_bus_init+0x118>)
  40201a:	4798      	blx	r3
#endif
	return result;
}
  40201c:	2000      	movs	r0, #0
  40201e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402020:	400e1400 	.word	0x400e1400
  402024:	40008000 	.word	0x40008000
  402028:	00405139 	.word	0x00405139
  40202c:	00405165 	.word	0x00405165
  402030:	004051df 	.word	0x004051df
  402034:	004051fd 	.word	0x004051fd
  402038:	0040521b 	.word	0x0040521b
  40203c:	11e1a300 	.word	0x11e1a300
  402040:	02dc6c00 	.word	0x02dc6c00
  402044:	0040522f 	.word	0x0040522f
  402048:	00405245 	.word	0x00405245
  40204c:	0040526d 	.word	0x0040526d
  402050:	00401de9 	.word	0x00401de9

00402054 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  402054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402058:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40205a:	2803      	cmp	r0, #3
  40205c:	d144      	bne.n	4020e8 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40205e:	680e      	ldr	r6, [r1, #0]
  402060:	684d      	ldr	r5, [r1, #4]
  402062:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  402064:	2300      	movs	r3, #0
  402066:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40206a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  40206e:	b186      	cbz	r6, 402092 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  402070:	2d00      	cmp	r5, #0
  402072:	d136      	bne.n	4020e2 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  402074:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402078:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40207a:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  40207c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402080:	4b20      	ldr	r3, [pc, #128]	; (402104 <nm_bus_ioctl+0xb0>)
  402082:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  402084:	b32c      	cbz	r4, 4020d2 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402086:	4f20      	ldr	r7, [pc, #128]	; (402108 <nm_bus_ioctl+0xb4>)
  402088:	f8df b094 	ldr.w	fp, [pc, #148]	; 402120 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40208c:	f8df a094 	ldr.w	sl, [pc, #148]	; 402124 <nm_bus_ioctl+0xd0>
  402090:	e006      	b.n	4020a0 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402092:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  402096:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40209a:	ae01      	add	r6, sp, #4
  40209c:	e7ee      	b.n	40207c <nm_bus_ioctl+0x28>
	while (u16Sz) {
  40209e:	b1c4      	cbz	r4, 4020d2 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4020a0:	2300      	movs	r3, #0
  4020a2:	461a      	mov	r2, r3
  4020a4:	7831      	ldrb	r1, [r6, #0]
  4020a6:	4638      	mov	r0, r7
  4020a8:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4020aa:	f10d 0205 	add.w	r2, sp, #5
  4020ae:	f10d 0106 	add.w	r1, sp, #6
  4020b2:	4638      	mov	r0, r7
  4020b4:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4020b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4020ba:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  4020bc:	3c01      	subs	r4, #1
  4020be:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4020c0:	f1b8 0f00 	cmp.w	r8, #0
  4020c4:	d100      	bne.n	4020c8 <nm_bus_ioctl+0x74>
			pu8Miso++;
  4020c6:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4020c8:	f1b9 0f00 	cmp.w	r9, #0
  4020cc:	d1e7      	bne.n	40209e <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  4020ce:	3601      	adds	r6, #1
  4020d0:	e7e5      	b.n	40209e <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  4020d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4020d6:	4b0b      	ldr	r3, [pc, #44]	; (402104 <nm_bus_ioctl+0xb0>)
  4020d8:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  4020da:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4020dc:	b003      	add	sp, #12
  4020de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4020e2:	f06f 0005 	mvn.w	r0, #5
		break;
  4020e6:	e7f9      	b.n	4020dc <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4020e8:	f240 121f 	movw	r2, #287	; 0x11f
  4020ec:	4907      	ldr	r1, [pc, #28]	; (40210c <nm_bus_ioctl+0xb8>)
  4020ee:	4808      	ldr	r0, [pc, #32]	; (402110 <nm_bus_ioctl+0xbc>)
  4020f0:	4c08      	ldr	r4, [pc, #32]	; (402114 <nm_bus_ioctl+0xc0>)
  4020f2:	47a0      	blx	r4
  4020f4:	4808      	ldr	r0, [pc, #32]	; (402118 <nm_bus_ioctl+0xc4>)
  4020f6:	47a0      	blx	r4
  4020f8:	4808      	ldr	r0, [pc, #32]	; (40211c <nm_bus_ioctl+0xc8>)
  4020fa:	47a0      	blx	r4
			s8Ret = -1;
  4020fc:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  402100:	e7ec      	b.n	4020dc <nm_bus_ioctl+0x88>
  402102:	bf00      	nop
  402104:	400e1400 	.word	0x400e1400
  402108:	40008000 	.word	0x40008000
  40210c:	00408c5c 	.word	0x00408c5c
  402110:	00408c6c 	.word	0x00408c6c
  402114:	00405ced 	.word	0x00405ced
  402118:	00408c80 	.word	0x00408c80
  40211c:	00408c98 	.word	0x00408c98
  402120:	004051ab 	.word	0x004051ab
  402124:	0040517b 	.word	0x0040517b

00402128 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402128:	2202      	movs	r2, #2
  40212a:	4b0e      	ldr	r3, [pc, #56]	; (402164 <nm_bus_deinit+0x3c>)
  40212c:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40212e:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  402132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  402136:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40213a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40213c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402140:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402144:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402146:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40214a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40214e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402150:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402158:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40215a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40215e:	2000      	movs	r0, #0
  402160:	4770      	bx	lr
  402162:	bf00      	nop
  402164:	40008000 	.word	0x40008000

00402168 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  402168:	b13a      	cbz	r2, 40217a <m2m_memcpy+0x12>
  40216a:	3901      	subs	r1, #1
  40216c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40216e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402172:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  402176:	4290      	cmp	r0, r2
  402178:	d1f9      	bne.n	40216e <m2m_memcpy+0x6>
  40217a:	4770      	bx	lr

0040217c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  40217c:	b122      	cbz	r2, 402188 <m2m_memset+0xc>
  40217e:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402180:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402184:	4290      	cmp	r0, r2
  402186:	d1fb      	bne.n	402180 <m2m_memset+0x4>
  402188:	4770      	bx	lr

0040218a <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40218a:	7803      	ldrb	r3, [r0, #0]
  40218c:	b143      	cbz	r3, 4021a0 <m2m_strlen+0x16>
  40218e:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  402190:	3301      	adds	r3, #1
  402192:	b29b      	uxth	r3, r3
	while(*pcStr)
  402194:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402198:	2a00      	cmp	r2, #0
  40219a:	d1f9      	bne.n	402190 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  40219c:	4618      	mov	r0, r3
  40219e:	4770      	bx	lr
	uint16	u16StrLen = 0;
  4021a0:	2300      	movs	r3, #0
  4021a2:	e7fb      	b.n	40219c <m2m_strlen+0x12>

004021a4 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  4021a4:	4a02      	ldr	r2, [pc, #8]	; (4021b0 <isr+0xc>)
  4021a6:	7813      	ldrb	r3, [r2, #0]
  4021a8:	3301      	adds	r3, #1
  4021aa:	b2db      	uxtb	r3, r3
  4021ac:	7013      	strb	r3, [r2, #0]
  4021ae:	4770      	bx	lr
  4021b0:	2040c33b 	.word	0x2040c33b

004021b4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4021b4:	4770      	bx	lr
	...

004021b8 <hif_set_rx_done>:
{
  4021b8:	b500      	push	{lr}
  4021ba:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  4021bc:	2001      	movs	r0, #1
  4021be:	4b0b      	ldr	r3, [pc, #44]	; (4021ec <hif_set_rx_done+0x34>)
  4021c0:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4021c2:	a901      	add	r1, sp, #4
  4021c4:	f241 0070 	movw	r0, #4208	; 0x1070
  4021c8:	4b09      	ldr	r3, [pc, #36]	; (4021f0 <hif_set_rx_done+0x38>)
  4021ca:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4021cc:	4603      	mov	r3, r0
  4021ce:	b118      	cbz	r0, 4021d8 <hif_set_rx_done+0x20>
}
  4021d0:	4618      	mov	r0, r3
  4021d2:	b003      	add	sp, #12
  4021d4:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4021d8:	9901      	ldr	r1, [sp, #4]
  4021da:	f041 0102 	orr.w	r1, r1, #2
  4021de:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4021e0:	f241 0070 	movw	r0, #4208	; 0x1070
  4021e4:	4b03      	ldr	r3, [pc, #12]	; (4021f4 <hif_set_rx_done+0x3c>)
  4021e6:	4798      	blx	r3
  4021e8:	4603      	mov	r3, r0
  4021ea:	e7f1      	b.n	4021d0 <hif_set_rx_done+0x18>
  4021ec:	00401f11 	.word	0x00401f11
  4021f0:	004034a5 	.word	0x004034a5
  4021f4:	004034b1 	.word	0x004034b1

004021f8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4021f8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4021fa:	4b12      	ldr	r3, [pc, #72]	; (402244 <hif_chip_wake+0x4c>)
  4021fc:	781b      	ldrb	r3, [r3, #0]
  4021fe:	b94b      	cbnz	r3, 402214 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402200:	4b11      	ldr	r3, [pc, #68]	; (402248 <hif_chip_wake+0x50>)
  402202:	781b      	ldrb	r3, [r3, #0]
  402204:	b2db      	uxtb	r3, r3
  402206:	2b03      	cmp	r3, #3
  402208:	d00c      	beq.n	402224 <hif_chip_wake+0x2c>
  40220a:	4b0f      	ldr	r3, [pc, #60]	; (402248 <hif_chip_wake+0x50>)
  40220c:	781b      	ldrb	r3, [r3, #0]
  40220e:	b2db      	uxtb	r3, r3
  402210:	2b04      	cmp	r3, #4
  402212:	d007      	beq.n	402224 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  402214:	4a0b      	ldr	r2, [pc, #44]	; (402244 <hif_chip_wake+0x4c>)
  402216:	7813      	ldrb	r3, [r2, #0]
  402218:	3301      	adds	r3, #1
  40221a:	b2db      	uxtb	r3, r3
  40221c:	7013      	strb	r3, [r2, #0]
  40221e:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  402220:	4618      	mov	r0, r3
  402222:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  402224:	4b09      	ldr	r3, [pc, #36]	; (40224c <hif_chip_wake+0x54>)
  402226:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402228:	4603      	mov	r3, r0
  40222a:	2800      	cmp	r0, #0
  40222c:	d1f8      	bne.n	402220 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40222e:	f245 6178 	movw	r1, #22136	; 0x5678
  402232:	f241 0074 	movw	r0, #4212	; 0x1074
  402236:	4b06      	ldr	r3, [pc, #24]	; (402250 <hif_chip_wake+0x58>)
  402238:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40223a:	4603      	mov	r3, r0
  40223c:	2800      	cmp	r0, #0
  40223e:	d0e9      	beq.n	402214 <hif_chip_wake+0x1c>
  402240:	e7ee      	b.n	402220 <hif_chip_wake+0x28>
  402242:	bf00      	nop
  402244:	2040c339 	.word	0x2040c339
  402248:	2040c338 	.word	0x2040c338
  40224c:	00403015 	.word	0x00403015
  402250:	004034b1 	.word	0x004034b1

00402254 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  402254:	4b1e      	ldr	r3, [pc, #120]	; (4022d0 <hif_chip_sleep+0x7c>)
  402256:	781b      	ldrb	r3, [r3, #0]
  402258:	b123      	cbz	r3, 402264 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  40225a:	4a1d      	ldr	r2, [pc, #116]	; (4022d0 <hif_chip_sleep+0x7c>)
  40225c:	7813      	ldrb	r3, [r2, #0]
  40225e:	3b01      	subs	r3, #1
  402260:	b2db      	uxtb	r3, r3
  402262:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402264:	4b1a      	ldr	r3, [pc, #104]	; (4022d0 <hif_chip_sleep+0x7c>)
  402266:	781b      	ldrb	r3, [r3, #0]
  402268:	2b00      	cmp	r3, #0
  40226a:	d12e      	bne.n	4022ca <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  40226c:	4b19      	ldr	r3, [pc, #100]	; (4022d4 <hif_chip_sleep+0x80>)
  40226e:	781b      	ldrb	r3, [r3, #0]
  402270:	b2db      	uxtb	r3, r3
  402272:	2b03      	cmp	r3, #3
  402274:	d006      	beq.n	402284 <hif_chip_sleep+0x30>
  402276:	4b17      	ldr	r3, [pc, #92]	; (4022d4 <hif_chip_sleep+0x80>)
  402278:	781b      	ldrb	r3, [r3, #0]
  40227a:	b2db      	uxtb	r3, r3
  40227c:	2b04      	cmp	r3, #4
  40227e:	d001      	beq.n	402284 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402280:	2300      	movs	r3, #0
  402282:	e023      	b.n	4022cc <hif_chip_sleep+0x78>
{
  402284:	b500      	push	{lr}
  402286:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  402288:	2300      	movs	r3, #0
  40228a:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40228c:	f244 3121 	movw	r1, #17185	; 0x4321
  402290:	f241 0074 	movw	r0, #4212	; 0x1074
  402294:	4b10      	ldr	r3, [pc, #64]	; (4022d8 <hif_chip_sleep+0x84>)
  402296:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402298:	4603      	mov	r3, r0
  40229a:	b118      	cbz	r0, 4022a4 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  40229c:	4618      	mov	r0, r3
  40229e:	b003      	add	sp, #12
  4022a0:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  4022a4:	a901      	add	r1, sp, #4
  4022a6:	2001      	movs	r0, #1
  4022a8:	4b0c      	ldr	r3, [pc, #48]	; (4022dc <hif_chip_sleep+0x88>)
  4022aa:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4022ac:	4603      	mov	r3, r0
  4022ae:	2800      	cmp	r0, #0
  4022b0:	d1f4      	bne.n	40229c <hif_chip_sleep+0x48>
			if(reg&0x2)
  4022b2:	9901      	ldr	r1, [sp, #4]
  4022b4:	f011 0f02 	tst.w	r1, #2
  4022b8:	d0f0      	beq.n	40229c <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  4022ba:	f021 0102 	bic.w	r1, r1, #2
  4022be:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4022c0:	2001      	movs	r0, #1
  4022c2:	4b05      	ldr	r3, [pc, #20]	; (4022d8 <hif_chip_sleep+0x84>)
  4022c4:	4798      	blx	r3
  4022c6:	4603      	mov	r3, r0
  4022c8:	e7e8      	b.n	40229c <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4022ca:	2300      	movs	r3, #0
}
  4022cc:	4618      	mov	r0, r3
  4022ce:	4770      	bx	lr
  4022d0:	2040c339 	.word	0x2040c339
  4022d4:	2040c338 	.word	0x2040c338
  4022d8:	004034b1 	.word	0x004034b1
  4022dc:	004034a5 	.word	0x004034a5

004022e0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4022e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022e4:	b087      	sub	sp, #28
  4022e6:	4607      	mov	r7, r0
  4022e8:	4688      	mov	r8, r1
  4022ea:	4692      	mov	sl, r2
  4022ec:	4699      	mov	r9, r3
  4022ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4022f0:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4022f4:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4022f8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4022fc:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  402300:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  402304:	2308      	movs	r3, #8
  402306:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  40230a:	2c00      	cmp	r4, #0
  40230c:	f000 809f 	beq.w	40244e <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  402310:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402314:	fa16 f383 	uxtah	r3, r6, r3
  402318:	442b      	add	r3, r5
  40231a:	b29b      	uxth	r3, r3
  40231c:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  402320:	4b5c      	ldr	r3, [pc, #368]	; (402494 <hif_send+0x1b4>)
  402322:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  402324:	4683      	mov	fp, r0
  402326:	2800      	cmp	r0, #0
  402328:	f040 80a2 	bne.w	402470 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  40232c:	2300      	movs	r3, #0
  40232e:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  402330:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  402334:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  402336:	9b02      	ldr	r3, [sp, #8]
  402338:	431f      	orrs	r7, r3
  40233a:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  40233c:	9b02      	ldr	r3, [sp, #8]
  40233e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  402342:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  402344:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  402348:	9b02      	ldr	r3, [sp, #8]
  40234a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40234e:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  402350:	9902      	ldr	r1, [sp, #8]
  402352:	f241 008c 	movw	r0, #4236	; 0x108c
  402356:	4b50      	ldr	r3, [pc, #320]	; (402498 <hif_send+0x1b8>)
  402358:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40235a:	4683      	mov	fp, r0
  40235c:	2800      	cmp	r0, #0
  40235e:	f040 8091 	bne.w	402484 <hif_send+0x1a4>


		reg = 0;
  402362:	2300      	movs	r3, #0
  402364:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  402366:	9b02      	ldr	r3, [sp, #8]
  402368:	f043 0302 	orr.w	r3, r3, #2
  40236c:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  40236e:	9902      	ldr	r1, [sp, #8]
  402370:	f241 0078 	movw	r0, #4216	; 0x1078
  402374:	4b48      	ldr	r3, [pc, #288]	; (402498 <hif_send+0x1b8>)
  402376:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402378:	4683      	mov	fp, r0
  40237a:	2800      	cmp	r0, #0
  40237c:	f040 8082 	bne.w	402484 <hif_send+0x1a4>
		dma_addr = 0;
  402380:	2300      	movs	r3, #0
  402382:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402384:	f8ad 3006 	strh.w	r3, [sp, #6]
  402388:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40238c:	b29b      	uxth	r3, r3
  40238e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402392:	d216      	bcs.n	4023c2 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402394:	f241 0878 	movw	r8, #4216	; 0x1078
  402398:	4f40      	ldr	r7, [pc, #256]	; (40249c <hif_send+0x1bc>)
  40239a:	a902      	add	r1, sp, #8
  40239c:	4640      	mov	r0, r8
  40239e:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  4023a0:	b978      	cbnz	r0, 4023c2 <hif_send+0xe2>
			if (!(reg & 0x2))
  4023a2:	9b02      	ldr	r3, [sp, #8]
  4023a4:	f013 0f02 	tst.w	r3, #2
  4023a8:	d059      	beq.n	40245e <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  4023aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4023ae:	3301      	adds	r3, #1
  4023b0:	b29b      	uxth	r3, r3
  4023b2:	f8ad 3006 	strh.w	r3, [sp, #6]
  4023b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4023ba:	b29b      	uxth	r3, r3
  4023bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4023c0:	d3eb      	bcc.n	40239a <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4023c2:	9b03      	ldr	r3, [sp, #12]
  4023c4:	2b00      	cmp	r3, #0
  4023c6:	d061      	beq.n	40248c <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4023c8:	9b03      	ldr	r3, [sp, #12]
  4023ca:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4023cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4023d0:	b29b      	uxth	r3, r3
  4023d2:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4023d6:	9804      	ldr	r0, [sp, #16]
  4023d8:	2208      	movs	r2, #8
  4023da:	a905      	add	r1, sp, #20
  4023dc:	4b30      	ldr	r3, [pc, #192]	; (4024a0 <hif_send+0x1c0>)
  4023de:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4023e0:	4683      	mov	fp, r0
  4023e2:	2800      	cmp	r0, #0
  4023e4:	d14e      	bne.n	402484 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4023e6:	9b04      	ldr	r3, [sp, #16]
  4023e8:	3308      	adds	r3, #8
  4023ea:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4023ec:	f1ba 0f00 	cmp.w	sl, #0
  4023f0:	d00a      	beq.n	402408 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4023f2:	9804      	ldr	r0, [sp, #16]
  4023f4:	464a      	mov	r2, r9
  4023f6:	4651      	mov	r1, sl
  4023f8:	4b29      	ldr	r3, [pc, #164]	; (4024a0 <hif_send+0x1c0>)
  4023fa:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4023fc:	4683      	mov	fp, r0
  4023fe:	2800      	cmp	r0, #0
  402400:	d140      	bne.n	402484 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  402402:	9b04      	ldr	r3, [sp, #16]
  402404:	444b      	add	r3, r9
  402406:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  402408:	b17c      	cbz	r4, 40242a <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  40240a:	9b04      	ldr	r3, [sp, #16]
  40240c:	eba5 0509 	sub.w	r5, r5, r9
  402410:	441d      	add	r5, r3
  402412:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  402414:	9804      	ldr	r0, [sp, #16]
  402416:	4632      	mov	r2, r6
  402418:	4621      	mov	r1, r4
  40241a:	4b21      	ldr	r3, [pc, #132]	; (4024a0 <hif_send+0x1c0>)
  40241c:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40241e:	4683      	mov	fp, r0
  402420:	2800      	cmp	r0, #0
  402422:	d12f      	bne.n	402484 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  402424:	9b04      	ldr	r3, [sp, #16]
  402426:	441e      	add	r6, r3
  402428:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  40242a:	9b03      	ldr	r3, [sp, #12]
  40242c:	009b      	lsls	r3, r3, #2
  40242e:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  402430:	9b02      	ldr	r3, [sp, #8]
  402432:	f043 0302 	orr.w	r3, r3, #2
  402436:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  402438:	9902      	ldr	r1, [sp, #8]
  40243a:	f241 006c 	movw	r0, #4204	; 0x106c
  40243e:	4b16      	ldr	r3, [pc, #88]	; (402498 <hif_send+0x1b8>)
  402440:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  402442:	4683      	mov	fp, r0
  402444:	b9f0      	cbnz	r0, 402484 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  402446:	4b17      	ldr	r3, [pc, #92]	; (4024a4 <hif_send+0x1c4>)
  402448:	4798      	blx	r3
  40244a:	4683      	mov	fp, r0
  40244c:	e01a      	b.n	402484 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  40244e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402452:	fa19 f383 	uxtah	r3, r9, r3
  402456:	b29b      	uxth	r3, r3
  402458:	f8ad 3016 	strh.w	r3, [sp, #22]
  40245c:	e760      	b.n	402320 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40245e:	a903      	add	r1, sp, #12
  402460:	4811      	ldr	r0, [pc, #68]	; (4024a8 <hif_send+0x1c8>)
  402462:	4b0e      	ldr	r3, [pc, #56]	; (40249c <hif_send+0x1bc>)
  402464:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  402466:	2800      	cmp	r0, #0
  402468:	d0ab      	beq.n	4023c2 <hif_send+0xe2>
					dma_addr = 0;
  40246a:	2300      	movs	r3, #0
  40246c:	9303      	str	r3, [sp, #12]
  40246e:	e7a8      	b.n	4023c2 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402470:	f240 129f 	movw	r2, #415	; 0x19f
  402474:	490d      	ldr	r1, [pc, #52]	; (4024ac <hif_send+0x1cc>)
  402476:	480e      	ldr	r0, [pc, #56]	; (4024b0 <hif_send+0x1d0>)
  402478:	4c0e      	ldr	r4, [pc, #56]	; (4024b4 <hif_send+0x1d4>)
  40247a:	47a0      	blx	r4
  40247c:	480e      	ldr	r0, [pc, #56]	; (4024b8 <hif_send+0x1d8>)
  40247e:	47a0      	blx	r4
  402480:	480e      	ldr	r0, [pc, #56]	; (4024bc <hif_send+0x1dc>)
  402482:	47a0      	blx	r4

ERR1:
	return ret;
}
  402484:	4658      	mov	r0, fp
  402486:	b007      	add	sp, #28
  402488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  40248c:	f06f 0b02 	mvn.w	fp, #2
  402490:	e7f8      	b.n	402484 <hif_send+0x1a4>
  402492:	bf00      	nop
  402494:	004021f9 	.word	0x004021f9
  402498:	004034b1 	.word	0x004034b1
  40249c:	004034a5 	.word	0x004034a5
  4024a0:	00403519 	.word	0x00403519
  4024a4:	00402255 	.word	0x00402255
  4024a8:	00150400 	.word	0x00150400
  4024ac:	00408c9c 	.word	0x00408c9c
  4024b0:	00408c6c 	.word	0x00408c6c
  4024b4:	00405ced 	.word	0x00405ced
  4024b8:	00408ef0 	.word	0x00408ef0
  4024bc:	00408c98 	.word	0x00408c98

004024c0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4024c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4024c4:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4024c6:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 4027c0 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  4024ca:	4fa2      	ldr	r7, [pc, #648]	; (402754 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4024cc:	4ea2      	ldr	r6, [pc, #648]	; (402758 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4024ce:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 4027c4 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  4024d2:	e0d5      	b.n	402680 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4024d4:	2204      	movs	r2, #4
  4024d6:	a904      	add	r1, sp, #16
  4024d8:	9805      	ldr	r0, [sp, #20]
  4024da:	4ba0      	ldr	r3, [pc, #640]	; (40275c <hif_handle_isr+0x29c>)
  4024dc:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4024de:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4024e2:	b29b      	uxth	r3, r3
  4024e4:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4024e8:	4604      	mov	r4, r0
  4024ea:	2800      	cmp	r0, #0
  4024ec:	d130      	bne.n	402550 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  4024ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4024f2:	b29b      	uxth	r3, r3
  4024f4:	429d      	cmp	r5, r3
  4024f6:	d005      	beq.n	402504 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  4024f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4024fc:	b29b      	uxth	r3, r3
  4024fe:	1aeb      	subs	r3, r5, r3
  402500:	2b04      	cmp	r3, #4
  402502:	dc33      	bgt.n	40256c <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  402504:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402508:	b2db      	uxtb	r3, r3
  40250a:	2b01      	cmp	r3, #1
  40250c:	d047      	beq.n	40259e <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40250e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402512:	b2db      	uxtb	r3, r3
  402514:	2b02      	cmp	r3, #2
  402516:	d05f      	beq.n	4025d8 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  402518:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40251c:	b2db      	uxtb	r3, r3
  40251e:	2b04      	cmp	r3, #4
  402520:	d068      	beq.n	4025f4 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  402522:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402526:	b2db      	uxtb	r3, r3
  402528:	2b06      	cmp	r3, #6
  40252a:	d071      	beq.n	402610 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  40252c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402530:	b2db      	uxtb	r3, r3
  402532:	2b07      	cmp	r3, #7
  402534:	d07a      	beq.n	40262c <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  402536:	f240 2202 	movw	r2, #514	; 0x202
  40253a:	4641      	mov	r1, r8
  40253c:	4630      	mov	r0, r6
  40253e:	4c88      	ldr	r4, [pc, #544]	; (402760 <hif_handle_isr+0x2a0>)
  402540:	47a0      	blx	r4
  402542:	4888      	ldr	r0, [pc, #544]	; (402764 <hif_handle_isr+0x2a4>)
  402544:	47a0      	blx	r4
  402546:	4888      	ldr	r0, [pc, #544]	; (402768 <hif_handle_isr+0x2a8>)
  402548:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  40254a:	f06f 0405 	mvn.w	r4, #5
  40254e:	e096      	b.n	40267e <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  402550:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  402554:	4641      	mov	r1, r8
  402556:	4630      	mov	r0, r6
  402558:	4d81      	ldr	r5, [pc, #516]	; (402760 <hif_handle_isr+0x2a0>)
  40255a:	47a8      	blx	r5
  40255c:	4883      	ldr	r0, [pc, #524]	; (40276c <hif_handle_isr+0x2ac>)
  40255e:	47a8      	blx	r5
  402560:	4881      	ldr	r0, [pc, #516]	; (402768 <hif_handle_isr+0x2a8>)
  402562:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402564:	2001      	movs	r0, #1
  402566:	4b82      	ldr	r3, [pc, #520]	; (402770 <hif_handle_isr+0x2b0>)
  402568:	4798      	blx	r3
  40256a:	e088      	b.n	40267e <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  40256c:	f240 12df 	movw	r2, #479	; 0x1df
  402570:	4641      	mov	r1, r8
  402572:	4630      	mov	r0, r6
  402574:	4c7a      	ldr	r4, [pc, #488]	; (402760 <hif_handle_isr+0x2a0>)
  402576:	47a0      	blx	r4
  402578:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40257c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402580:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402584:	9100      	str	r1, [sp, #0]
  402586:	b292      	uxth	r2, r2
  402588:	4629      	mov	r1, r5
  40258a:	487a      	ldr	r0, [pc, #488]	; (402774 <hif_handle_isr+0x2b4>)
  40258c:	47a0      	blx	r4
  40258e:	4876      	ldr	r0, [pc, #472]	; (402768 <hif_handle_isr+0x2a8>)
  402590:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402592:	2001      	movs	r0, #1
  402594:	4b76      	ldr	r3, [pc, #472]	; (402770 <hif_handle_isr+0x2b0>)
  402596:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402598:	f06f 0405 	mvn.w	r4, #5
  40259c:	e06f      	b.n	40267e <hif_handle_isr+0x1be>
						if(pfWifiCb)
  40259e:	4b76      	ldr	r3, [pc, #472]	; (402778 <hif_handle_isr+0x2b8>)
  4025a0:	681b      	ldr	r3, [r3, #0]
  4025a2:	b143      	cbz	r3, 4025b6 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4025a4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4025a8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4025ac:	3908      	subs	r1, #8
  4025ae:	9a05      	ldr	r2, [sp, #20]
  4025b0:	3208      	adds	r2, #8
  4025b2:	b289      	uxth	r1, r1
  4025b4:	4798      	blx	r3
					if(!gu8HifSizeDone)
  4025b6:	4b71      	ldr	r3, [pc, #452]	; (40277c <hif_handle_isr+0x2bc>)
  4025b8:	781b      	ldrb	r3, [r3, #0]
  4025ba:	2b00      	cmp	r3, #0
  4025bc:	d15c      	bne.n	402678 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  4025be:	f240 2209 	movw	r2, #521	; 0x209
  4025c2:	4641      	mov	r1, r8
  4025c4:	4630      	mov	r0, r6
  4025c6:	4c66      	ldr	r4, [pc, #408]	; (402760 <hif_handle_isr+0x2a0>)
  4025c8:	47a0      	blx	r4
  4025ca:	486d      	ldr	r0, [pc, #436]	; (402780 <hif_handle_isr+0x2c0>)
  4025cc:	47a0      	blx	r4
  4025ce:	4866      	ldr	r0, [pc, #408]	; (402768 <hif_handle_isr+0x2a8>)
  4025d0:	47a0      	blx	r4
						ret = hif_set_rx_done();
  4025d2:	4b6c      	ldr	r3, [pc, #432]	; (402784 <hif_handle_isr+0x2c4>)
  4025d4:	4798      	blx	r3
  4025d6:	e04f      	b.n	402678 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  4025d8:	4b6b      	ldr	r3, [pc, #428]	; (402788 <hif_handle_isr+0x2c8>)
  4025da:	681b      	ldr	r3, [r3, #0]
  4025dc:	2b00      	cmp	r3, #0
  4025de:	d0ea      	beq.n	4025b6 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4025e0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4025e4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4025e8:	3908      	subs	r1, #8
  4025ea:	9a05      	ldr	r2, [sp, #20]
  4025ec:	3208      	adds	r2, #8
  4025ee:	b289      	uxth	r1, r1
  4025f0:	4798      	blx	r3
  4025f2:	e7e0      	b.n	4025b6 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  4025f4:	4b65      	ldr	r3, [pc, #404]	; (40278c <hif_handle_isr+0x2cc>)
  4025f6:	681b      	ldr	r3, [r3, #0]
  4025f8:	2b00      	cmp	r3, #0
  4025fa:	d0dc      	beq.n	4025b6 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4025fc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402600:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402604:	3908      	subs	r1, #8
  402606:	9a05      	ldr	r2, [sp, #20]
  402608:	3208      	adds	r2, #8
  40260a:	b289      	uxth	r1, r1
  40260c:	4798      	blx	r3
  40260e:	e7d2      	b.n	4025b6 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  402610:	4b5f      	ldr	r3, [pc, #380]	; (402790 <hif_handle_isr+0x2d0>)
  402612:	681b      	ldr	r3, [r3, #0]
  402614:	2b00      	cmp	r3, #0
  402616:	d0ce      	beq.n	4025b6 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402618:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40261c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402620:	3908      	subs	r1, #8
  402622:	9a05      	ldr	r2, [sp, #20]
  402624:	3208      	adds	r2, #8
  402626:	b289      	uxth	r1, r1
  402628:	4798      	blx	r3
  40262a:	e7c4      	b.n	4025b6 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  40262c:	4b59      	ldr	r3, [pc, #356]	; (402794 <hif_handle_isr+0x2d4>)
  40262e:	681b      	ldr	r3, [r3, #0]
  402630:	2b00      	cmp	r3, #0
  402632:	d0c0      	beq.n	4025b6 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402634:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402638:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40263c:	3908      	subs	r1, #8
  40263e:	9a05      	ldr	r2, [sp, #20]
  402640:	3208      	adds	r2, #8
  402642:	b289      	uxth	r1, r1
  402644:	4798      	blx	r3
  402646:	e7b6      	b.n	4025b6 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402648:	f240 2211 	movw	r2, #529	; 0x211
  40264c:	4641      	mov	r1, r8
  40264e:	4630      	mov	r0, r6
  402650:	4c43      	ldr	r4, [pc, #268]	; (402760 <hif_handle_isr+0x2a0>)
  402652:	47a0      	blx	r4
  402654:	4850      	ldr	r0, [pc, #320]	; (402798 <hif_handle_isr+0x2d8>)
  402656:	47a0      	blx	r4
  402658:	4843      	ldr	r0, [pc, #268]	; (402768 <hif_handle_isr+0x2a8>)
  40265a:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  40265c:	f06f 0401 	mvn.w	r4, #1
  402660:	e02f      	b.n	4026c2 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402662:	f44f 7206 	mov.w	r2, #536	; 0x218
  402666:	4641      	mov	r1, r8
  402668:	4630      	mov	r0, r6
  40266a:	4c3d      	ldr	r4, [pc, #244]	; (402760 <hif_handle_isr+0x2a0>)
  40266c:	47a0      	blx	r4
  40266e:	9903      	ldr	r1, [sp, #12]
  402670:	484a      	ldr	r0, [pc, #296]	; (40279c <hif_handle_isr+0x2dc>)
  402672:	47a0      	blx	r4
  402674:	483c      	ldr	r0, [pc, #240]	; (402768 <hif_handle_isr+0x2a8>)
  402676:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402678:	4b49      	ldr	r3, [pc, #292]	; (4027a0 <hif_handle_isr+0x2e0>)
  40267a:	4798      	blx	r3
  40267c:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  40267e:	bb04      	cbnz	r4, 4026c2 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402680:	f899 3000 	ldrb.w	r3, [r9]
  402684:	2b00      	cmp	r3, #0
  402686:	f000 809f 	beq.w	4027c8 <hif_handle_isr+0x308>
		gu8Interrupt--;
  40268a:	f899 3000 	ldrb.w	r3, [r9]
  40268e:	3b01      	subs	r3, #1
  402690:	b2db      	uxtb	r3, r3
  402692:	f889 3000 	strb.w	r3, [r9]
  402696:	e01f      	b.n	4026d8 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402698:	f240 221e 	movw	r2, #542	; 0x21e
  40269c:	4641      	mov	r1, r8
  40269e:	4630      	mov	r0, r6
  4026a0:	4d2f      	ldr	r5, [pc, #188]	; (402760 <hif_handle_isr+0x2a0>)
  4026a2:	47a8      	blx	r5
  4026a4:	483f      	ldr	r0, [pc, #252]	; (4027a4 <hif_handle_isr+0x2e4>)
  4026a6:	47a8      	blx	r5
  4026a8:	482f      	ldr	r0, [pc, #188]	; (402768 <hif_handle_isr+0x2a8>)
  4026aa:	47a8      	blx	r5
  4026ac:	e009      	b.n	4026c2 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4026ae:	f44f 7209 	mov.w	r2, #548	; 0x224
  4026b2:	4641      	mov	r1, r8
  4026b4:	4630      	mov	r0, r6
  4026b6:	4d2a      	ldr	r5, [pc, #168]	; (402760 <hif_handle_isr+0x2a0>)
  4026b8:	47a8      	blx	r5
  4026ba:	483b      	ldr	r0, [pc, #236]	; (4027a8 <hif_handle_isr+0x2e8>)
  4026bc:	47a8      	blx	r5
  4026be:	482a      	ldr	r0, [pc, #168]	; (402768 <hif_handle_isr+0x2a8>)
  4026c0:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4026c2:	f240 2243 	movw	r2, #579	; 0x243
  4026c6:	4939      	ldr	r1, [pc, #228]	; (4027ac <hif_handle_isr+0x2ec>)
  4026c8:	4630      	mov	r0, r6
  4026ca:	4d25      	ldr	r5, [pc, #148]	; (402760 <hif_handle_isr+0x2a0>)
  4026cc:	47a8      	blx	r5
  4026ce:	4621      	mov	r1, r4
  4026d0:	4837      	ldr	r0, [pc, #220]	; (4027b0 <hif_handle_isr+0x2f0>)
  4026d2:	47a8      	blx	r5
  4026d4:	4824      	ldr	r0, [pc, #144]	; (402768 <hif_handle_isr+0x2a8>)
  4026d6:	47a8      	blx	r5
	ret = hif_chip_wake();
  4026d8:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  4026da:	4604      	mov	r4, r0
  4026dc:	2800      	cmp	r0, #0
  4026de:	d1e6      	bne.n	4026ae <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  4026e0:	a903      	add	r1, sp, #12
  4026e2:	f241 0070 	movw	r0, #4208	; 0x1070
  4026e6:	4b33      	ldr	r3, [pc, #204]	; (4027b4 <hif_handle_isr+0x2f4>)
  4026e8:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  4026ea:	4604      	mov	r4, r0
  4026ec:	2800      	cmp	r0, #0
  4026ee:	d1d3      	bne.n	402698 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  4026f0:	9b03      	ldr	r3, [sp, #12]
  4026f2:	f013 0f01 	tst.w	r3, #1
  4026f6:	d0b4      	beq.n	402662 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  4026f8:	4b1d      	ldr	r3, [pc, #116]	; (402770 <hif_handle_isr+0x2b0>)
  4026fa:	4798      	blx	r3
				reg &= ~(1<<0);
  4026fc:	9903      	ldr	r1, [sp, #12]
  4026fe:	f021 0101 	bic.w	r1, r1, #1
  402702:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402704:	f241 0070 	movw	r0, #4208	; 0x1070
  402708:	4b2b      	ldr	r3, [pc, #172]	; (4027b8 <hif_handle_isr+0x2f8>)
  40270a:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  40270c:	4604      	mov	r4, r0
  40270e:	2800      	cmp	r0, #0
  402710:	d1d7      	bne.n	4026c2 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  402712:	2200      	movs	r2, #0
  402714:	4b19      	ldr	r3, [pc, #100]	; (40277c <hif_handle_isr+0x2bc>)
  402716:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402718:	9d03      	ldr	r5, [sp, #12]
  40271a:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  40271e:	2d00      	cmp	r5, #0
  402720:	d092      	beq.n	402648 <hif_handle_isr+0x188>
					uint32 address = 0;
  402722:	a906      	add	r1, sp, #24
  402724:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402728:	f241 0084 	movw	r0, #4228	; 0x1084
  40272c:	4b21      	ldr	r3, [pc, #132]	; (4027b4 <hif_handle_isr+0x2f4>)
  40272e:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402730:	4604      	mov	r4, r0
  402732:	2800      	cmp	r0, #0
  402734:	f43f aece 	beq.w	4024d4 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402738:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  40273c:	4641      	mov	r1, r8
  40273e:	4630      	mov	r0, r6
  402740:	4d07      	ldr	r5, [pc, #28]	; (402760 <hif_handle_isr+0x2a0>)
  402742:	47a8      	blx	r5
  402744:	481d      	ldr	r0, [pc, #116]	; (4027bc <hif_handle_isr+0x2fc>)
  402746:	47a8      	blx	r5
  402748:	4807      	ldr	r0, [pc, #28]	; (402768 <hif_handle_isr+0x2a8>)
  40274a:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40274c:	2001      	movs	r0, #1
  40274e:	4b08      	ldr	r3, [pc, #32]	; (402770 <hif_handle_isr+0x2b0>)
  402750:	4798      	blx	r3
  402752:	e794      	b.n	40267e <hif_handle_isr+0x1be>
  402754:	004021f9 	.word	0x004021f9
  402758:	00408c6c 	.word	0x00408c6c
  40275c:	004034bd 	.word	0x004034bd
  402760:	00405ced 	.word	0x00405ced
  402764:	00408d5c 	.word	0x00408d5c
  402768:	00408c98 	.word	0x00408c98
  40276c:	00408d04 	.word	0x00408d04
  402770:	00401f11 	.word	0x00401f11
  402774:	00408d1c 	.word	0x00408d1c
  402778:	2040c350 	.word	0x2040c350
  40277c:	2040c33a 	.word	0x2040c33a
  402780:	00408d74 	.word	0x00408d74
  402784:	004021b9 	.word	0x004021b9
  402788:	2040c344 	.word	0x2040c344
  40278c:	2040c348 	.word	0x2040c348
  402790:	2040c33c 	.word	0x2040c33c
  402794:	2040c34c 	.word	0x2040c34c
  402798:	00408d98 	.word	0x00408d98
  40279c:	00408dac 	.word	0x00408dac
  4027a0:	00402255 	.word	0x00402255
  4027a4:	00408dc8 	.word	0x00408dc8
  4027a8:	00408dec 	.word	0x00408dec
  4027ac:	00408cb0 	.word	0x00408cb0
  4027b0:	00408e0c 	.word	0x00408e0c
  4027b4:	004034a5 	.word	0x004034a5
  4027b8:	004034b1 	.word	0x004034b1
  4027bc:	00408cdc 	.word	0x00408cdc
  4027c0:	2040c33b 	.word	0x2040c33b
  4027c4:	00408ca8 	.word	0x00408ca8
			}
		}
	}

	return ret;
}
  4027c8:	2000      	movs	r0, #0
  4027ca:	b007      	add	sp, #28
  4027cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

004027d0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  4027d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4027d4:	b083      	sub	sp, #12
  4027d6:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  4027d8:	2a00      	cmp	r2, #0
  4027da:	bf18      	it	ne
  4027dc:	2900      	cmpne	r1, #0
  4027de:	d003      	beq.n	4027e8 <hif_receive+0x18>
  4027e0:	4605      	mov	r5, r0
  4027e2:	460f      	mov	r7, r1
  4027e4:	4616      	mov	r6, r2
  4027e6:	b9b8      	cbnz	r0, 402818 <hif_receive+0x48>
	{
		if(isDone)
  4027e8:	b14c      	cbz	r4, 4027fe <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  4027ea:	2201      	movs	r2, #1
  4027ec:	4b32      	ldr	r3, [pc, #200]	; (4028b8 <hif_receive+0xe8>)
  4027ee:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  4027f0:	4b32      	ldr	r3, [pc, #200]	; (4028bc <hif_receive+0xec>)
  4027f2:	4798      	blx	r3
  4027f4:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  4027f6:	4618      	mov	r0, r3
  4027f8:	b003      	add	sp, #12
  4027fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  4027fe:	f240 2269 	movw	r2, #617	; 0x269
  402802:	492f      	ldr	r1, [pc, #188]	; (4028c0 <hif_receive+0xf0>)
  402804:	482f      	ldr	r0, [pc, #188]	; (4028c4 <hif_receive+0xf4>)
  402806:	4c30      	ldr	r4, [pc, #192]	; (4028c8 <hif_receive+0xf8>)
  402808:	47a0      	blx	r4
  40280a:	4830      	ldr	r0, [pc, #192]	; (4028cc <hif_receive+0xfc>)
  40280c:	47a0      	blx	r4
  40280e:	4830      	ldr	r0, [pc, #192]	; (4028d0 <hif_receive+0x100>)
  402810:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402812:	f06f 030b 	mvn.w	r3, #11
  402816:	e7ee      	b.n	4027f6 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402818:	4669      	mov	r1, sp
  40281a:	f241 0070 	movw	r0, #4208	; 0x1070
  40281e:	4b2d      	ldr	r3, [pc, #180]	; (4028d4 <hif_receive+0x104>)
  402820:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402822:	4603      	mov	r3, r0
  402824:	2800      	cmp	r0, #0
  402826:	d1e6      	bne.n	4027f6 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402828:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  40282c:	a901      	add	r1, sp, #4
  40282e:	f241 0084 	movw	r0, #4228	; 0x1084
  402832:	4b28      	ldr	r3, [pc, #160]	; (4028d4 <hif_receive+0x104>)
  402834:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402836:	4603      	mov	r3, r0
  402838:	2800      	cmp	r0, #0
  40283a:	d1dc      	bne.n	4027f6 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  40283c:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402840:	4546      	cmp	r6, r8
  402842:	d81c      	bhi.n	40287e <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402844:	9b01      	ldr	r3, [sp, #4]
  402846:	429d      	cmp	r5, r3
  402848:	d328      	bcc.n	40289c <hif_receive+0xcc>
  40284a:	eb05 0906 	add.w	r9, r5, r6
  40284e:	4443      	add	r3, r8
  402850:	4599      	cmp	r9, r3
  402852:	d823      	bhi.n	40289c <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402854:	4632      	mov	r2, r6
  402856:	4639      	mov	r1, r7
  402858:	4628      	mov	r0, r5
  40285a:	4b1f      	ldr	r3, [pc, #124]	; (4028d8 <hif_receive+0x108>)
  40285c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40285e:	4603      	mov	r3, r0
  402860:	2800      	cmp	r0, #0
  402862:	d1c8      	bne.n	4027f6 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402864:	9a01      	ldr	r2, [sp, #4]
  402866:	4490      	add	r8, r2
  402868:	45c8      	cmp	r8, r9
  40286a:	d001      	beq.n	402870 <hif_receive+0xa0>
  40286c:	2c00      	cmp	r4, #0
  40286e:	d0c2      	beq.n	4027f6 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402870:	2201      	movs	r2, #1
  402872:	4b11      	ldr	r3, [pc, #68]	; (4028b8 <hif_receive+0xe8>)
  402874:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402876:	4b11      	ldr	r3, [pc, #68]	; (4028bc <hif_receive+0xec>)
  402878:	4798      	blx	r3
  40287a:	4603      	mov	r3, r0
  40287c:	e7bb      	b.n	4027f6 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  40287e:	f240 227a 	movw	r2, #634	; 0x27a
  402882:	490f      	ldr	r1, [pc, #60]	; (4028c0 <hif_receive+0xf0>)
  402884:	480f      	ldr	r0, [pc, #60]	; (4028c4 <hif_receive+0xf4>)
  402886:	4c10      	ldr	r4, [pc, #64]	; (4028c8 <hif_receive+0xf8>)
  402888:	47a0      	blx	r4
  40288a:	4642      	mov	r2, r8
  40288c:	4631      	mov	r1, r6
  40288e:	4813      	ldr	r0, [pc, #76]	; (4028dc <hif_receive+0x10c>)
  402890:	47a0      	blx	r4
  402892:	480f      	ldr	r0, [pc, #60]	; (4028d0 <hif_receive+0x100>)
  402894:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402896:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  40289a:	e7ac      	b.n	4027f6 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  40289c:	f44f 7220 	mov.w	r2, #640	; 0x280
  4028a0:	4907      	ldr	r1, [pc, #28]	; (4028c0 <hif_receive+0xf0>)
  4028a2:	4808      	ldr	r0, [pc, #32]	; (4028c4 <hif_receive+0xf4>)
  4028a4:	4c08      	ldr	r4, [pc, #32]	; (4028c8 <hif_receive+0xf8>)
  4028a6:	47a0      	blx	r4
  4028a8:	480d      	ldr	r0, [pc, #52]	; (4028e0 <hif_receive+0x110>)
  4028aa:	47a0      	blx	r4
  4028ac:	4808      	ldr	r0, [pc, #32]	; (4028d0 <hif_receive+0x100>)
  4028ae:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4028b0:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  4028b4:	e79f      	b.n	4027f6 <hif_receive+0x26>
  4028b6:	bf00      	nop
  4028b8:	2040c33a 	.word	0x2040c33a
  4028bc:	004021b9 	.word	0x004021b9
  4028c0:	00408cc0 	.word	0x00408cc0
  4028c4:	00408c6c 	.word	0x00408c6c
  4028c8:	00405ced 	.word	0x00405ced
  4028cc:	00408e3c 	.word	0x00408e3c
  4028d0:	00408c98 	.word	0x00408c98
  4028d4:	004034a5 	.word	0x004034a5
  4028d8:	004034bd 	.word	0x004034bd
  4028dc:	00408e5c 	.word	0x00408e5c
  4028e0:	00408ea0 	.word	0x00408ea0

004028e4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  4028e4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  4028e6:	1e43      	subs	r3, r0, #1
  4028e8:	2b06      	cmp	r3, #6
  4028ea:	d81d      	bhi.n	402928 <hif_register_cb+0x44>
  4028ec:	e8df f003 	tbb	[pc, r3]
  4028f0:	0c100408 	.word	0x0c100408
  4028f4:	141c      	.short	0x141c
  4028f6:	18          	.byte	0x18
  4028f7:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  4028f8:	4b13      	ldr	r3, [pc, #76]	; (402948 <hif_register_cb+0x64>)
  4028fa:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4028fc:	2000      	movs	r0, #0
			break;
  4028fe:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402900:	4b12      	ldr	r3, [pc, #72]	; (40294c <hif_register_cb+0x68>)
  402902:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402904:	2000      	movs	r0, #0
			break;
  402906:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402908:	4b11      	ldr	r3, [pc, #68]	; (402950 <hif_register_cb+0x6c>)
  40290a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  40290c:	2000      	movs	r0, #0
			break;
  40290e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402910:	4b10      	ldr	r3, [pc, #64]	; (402954 <hif_register_cb+0x70>)
  402912:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402914:	2000      	movs	r0, #0
			break;
  402916:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402918:	4b0f      	ldr	r3, [pc, #60]	; (402958 <hif_register_cb+0x74>)
  40291a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  40291c:	2000      	movs	r0, #0
			break;
  40291e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402920:	4b0e      	ldr	r3, [pc, #56]	; (40295c <hif_register_cb+0x78>)
  402922:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402924:	2000      	movs	r0, #0
			break;
  402926:	bd38      	pop	{r3, r4, r5, pc}
  402928:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  40292a:	f240 22b9 	movw	r2, #697	; 0x2b9
  40292e:	490c      	ldr	r1, [pc, #48]	; (402960 <hif_register_cb+0x7c>)
  402930:	480c      	ldr	r0, [pc, #48]	; (402964 <hif_register_cb+0x80>)
  402932:	4d0d      	ldr	r5, [pc, #52]	; (402968 <hif_register_cb+0x84>)
  402934:	47a8      	blx	r5
  402936:	4621      	mov	r1, r4
  402938:	480c      	ldr	r0, [pc, #48]	; (40296c <hif_register_cb+0x88>)
  40293a:	47a8      	blx	r5
  40293c:	480c      	ldr	r0, [pc, #48]	; (402970 <hif_register_cb+0x8c>)
  40293e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402940:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402944:	bd38      	pop	{r3, r4, r5, pc}
  402946:	bf00      	nop
  402948:	2040c344 	.word	0x2040c344
  40294c:	2040c350 	.word	0x2040c350
  402950:	2040c348 	.word	0x2040c348
  402954:	2040c340 	.word	0x2040c340
  402958:	2040c33c 	.word	0x2040c33c
  40295c:	2040c34c 	.word	0x2040c34c
  402960:	00408ccc 	.word	0x00408ccc
  402964:	00408c6c 	.word	0x00408c6c
  402968:	00405ced 	.word	0x00405ced
  40296c:	00408ee4 	.word	0x00408ee4
  402970:	00408c98 	.word	0x00408c98

00402974 <hif_init>:
{
  402974:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402976:	2400      	movs	r4, #0
  402978:	4b09      	ldr	r3, [pc, #36]	; (4029a0 <hif_init+0x2c>)
  40297a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  40297c:	4b09      	ldr	r3, [pc, #36]	; (4029a4 <hif_init+0x30>)
  40297e:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402980:	4b09      	ldr	r3, [pc, #36]	; (4029a8 <hif_init+0x34>)
  402982:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402984:	4b09      	ldr	r3, [pc, #36]	; (4029ac <hif_init+0x38>)
  402986:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402988:	4b09      	ldr	r3, [pc, #36]	; (4029b0 <hif_init+0x3c>)
  40298a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  40298c:	4809      	ldr	r0, [pc, #36]	; (4029b4 <hif_init+0x40>)
  40298e:	4b0a      	ldr	r3, [pc, #40]	; (4029b8 <hif_init+0x44>)
  402990:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402992:	490a      	ldr	r1, [pc, #40]	; (4029bc <hif_init+0x48>)
  402994:	2003      	movs	r0, #3
  402996:	4b0a      	ldr	r3, [pc, #40]	; (4029c0 <hif_init+0x4c>)
  402998:	4798      	blx	r3
}
  40299a:	4620      	mov	r0, r4
  40299c:	bd10      	pop	{r4, pc}
  40299e:	bf00      	nop
  4029a0:	2040c350 	.word	0x2040c350
  4029a4:	2040c344 	.word	0x2040c344
  4029a8:	2040c339 	.word	0x2040c339
  4029ac:	2040c338 	.word	0x2040c338
  4029b0:	2040c33b 	.word	0x2040c33b
  4029b4:	004021a5 	.word	0x004021a5
  4029b8:	00401e91 	.word	0x00401e91
  4029bc:	004021b5 	.word	0x004021b5
  4029c0:	004028e5 	.word	0x004028e5

004029c4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4029c4:	b530      	push	{r4, r5, lr}
  4029c6:	b09f      	sub	sp, #124	; 0x7c
  4029c8:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  4029ca:	282c      	cmp	r0, #44	; 0x2c
  4029cc:	d02e      	beq.n	402a2c <m2m_wifi_cb+0x68>
  4029ce:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  4029d0:	281b      	cmp	r0, #27
  4029d2:	d03b      	beq.n	402a4c <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  4029d4:	2806      	cmp	r0, #6
  4029d6:	d049      	beq.n	402a6c <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  4029d8:	280e      	cmp	r0, #14
  4029da:	d025      	beq.n	402a28 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  4029dc:	2832      	cmp	r0, #50	; 0x32
  4029de:	d055      	beq.n	402a8c <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  4029e0:	282f      	cmp	r0, #47	; 0x2f
  4029e2:	d063      	beq.n	402aac <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  4029e4:	2834      	cmp	r0, #52	; 0x34
  4029e6:	d076      	beq.n	402ad6 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  4029e8:	2811      	cmp	r0, #17
  4029ea:	f000 8093 	beq.w	402b14 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  4029ee:	2813      	cmp	r0, #19
  4029f0:	f000 80a8 	beq.w	402b44 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  4029f4:	2804      	cmp	r0, #4
  4029f6:	f000 80b7 	beq.w	402b68 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  4029fa:	2865      	cmp	r0, #101	; 0x65
  4029fc:	f000 80c6 	beq.w	402b8c <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402a00:	2809      	cmp	r0, #9
  402a02:	f000 80d5 	beq.w	402bb0 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402a06:	282a      	cmp	r0, #42	; 0x2a
  402a08:	f000 80e4 	beq.w	402bd4 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402a0c:	2820      	cmp	r0, #32
  402a0e:	f000 80f3 	beq.w	402bf8 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402a12:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402a16:	4986      	ldr	r1, [pc, #536]	; (402c30 <m2m_wifi_cb+0x26c>)
  402a18:	4886      	ldr	r0, [pc, #536]	; (402c34 <m2m_wifi_cb+0x270>)
  402a1a:	4d87      	ldr	r5, [pc, #540]	; (402c38 <m2m_wifi_cb+0x274>)
  402a1c:	47a8      	blx	r5
  402a1e:	4621      	mov	r1, r4
  402a20:	4886      	ldr	r0, [pc, #536]	; (402c3c <m2m_wifi_cb+0x278>)
  402a22:	47a8      	blx	r5
  402a24:	4886      	ldr	r0, [pc, #536]	; (402c40 <m2m_wifi_cb+0x27c>)
  402a26:	47a8      	blx	r5
	}
}
  402a28:	b01f      	add	sp, #124	; 0x7c
  402a2a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402a2c:	2300      	movs	r3, #0
  402a2e:	2204      	movs	r2, #4
  402a30:	a903      	add	r1, sp, #12
  402a32:	4628      	mov	r0, r5
  402a34:	4c83      	ldr	r4, [pc, #524]	; (402c44 <m2m_wifi_cb+0x280>)
  402a36:	47a0      	blx	r4
  402a38:	2800      	cmp	r0, #0
  402a3a:	d1f5      	bne.n	402a28 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402a3c:	4b82      	ldr	r3, [pc, #520]	; (402c48 <m2m_wifi_cb+0x284>)
  402a3e:	681b      	ldr	r3, [r3, #0]
  402a40:	2b00      	cmp	r3, #0
  402a42:	d0f1      	beq.n	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402a44:	a903      	add	r1, sp, #12
  402a46:	202c      	movs	r0, #44	; 0x2c
  402a48:	4798      	blx	r3
  402a4a:	e7ed      	b.n	402a28 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402a4c:	2300      	movs	r3, #0
  402a4e:	2208      	movs	r2, #8
  402a50:	a903      	add	r1, sp, #12
  402a52:	4628      	mov	r0, r5
  402a54:	4c7b      	ldr	r4, [pc, #492]	; (402c44 <m2m_wifi_cb+0x280>)
  402a56:	47a0      	blx	r4
  402a58:	2800      	cmp	r0, #0
  402a5a:	d1e5      	bne.n	402a28 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402a5c:	4b7a      	ldr	r3, [pc, #488]	; (402c48 <m2m_wifi_cb+0x284>)
  402a5e:	681b      	ldr	r3, [r3, #0]
  402a60:	2b00      	cmp	r3, #0
  402a62:	d0e1      	beq.n	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402a64:	a903      	add	r1, sp, #12
  402a66:	201b      	movs	r0, #27
  402a68:	4798      	blx	r3
  402a6a:	e7dd      	b.n	402a28 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402a6c:	2301      	movs	r3, #1
  402a6e:	2230      	movs	r2, #48	; 0x30
  402a70:	a903      	add	r1, sp, #12
  402a72:	4628      	mov	r0, r5
  402a74:	4c73      	ldr	r4, [pc, #460]	; (402c44 <m2m_wifi_cb+0x280>)
  402a76:	47a0      	blx	r4
  402a78:	2800      	cmp	r0, #0
  402a7a:	d1d5      	bne.n	402a28 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402a7c:	4b72      	ldr	r3, [pc, #456]	; (402c48 <m2m_wifi_cb+0x284>)
  402a7e:	681b      	ldr	r3, [r3, #0]
  402a80:	2b00      	cmp	r3, #0
  402a82:	d0d1      	beq.n	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402a84:	a903      	add	r1, sp, #12
  402a86:	2006      	movs	r0, #6
  402a88:	4798      	blx	r3
  402a8a:	e7cd      	b.n	402a28 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402a8c:	2300      	movs	r3, #0
  402a8e:	2210      	movs	r2, #16
  402a90:	a903      	add	r1, sp, #12
  402a92:	4628      	mov	r0, r5
  402a94:	4c6b      	ldr	r4, [pc, #428]	; (402c44 <m2m_wifi_cb+0x280>)
  402a96:	47a0      	blx	r4
  402a98:	2800      	cmp	r0, #0
  402a9a:	d1c5      	bne.n	402a28 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402a9c:	4b6a      	ldr	r3, [pc, #424]	; (402c48 <m2m_wifi_cb+0x284>)
  402a9e:	681b      	ldr	r3, [r3, #0]
  402aa0:	2b00      	cmp	r3, #0
  402aa2:	d0c1      	beq.n	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402aa4:	a903      	add	r1, sp, #12
  402aa6:	2032      	movs	r0, #50	; 0x32
  402aa8:	4798      	blx	r3
  402aaa:	e7bd      	b.n	402a28 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402aac:	2264      	movs	r2, #100	; 0x64
  402aae:	2100      	movs	r1, #0
  402ab0:	a803      	add	r0, sp, #12
  402ab2:	4b66      	ldr	r3, [pc, #408]	; (402c4c <m2m_wifi_cb+0x288>)
  402ab4:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402ab6:	2300      	movs	r3, #0
  402ab8:	2264      	movs	r2, #100	; 0x64
  402aba:	a903      	add	r1, sp, #12
  402abc:	4628      	mov	r0, r5
  402abe:	4c61      	ldr	r4, [pc, #388]	; (402c44 <m2m_wifi_cb+0x280>)
  402ac0:	47a0      	blx	r4
  402ac2:	2800      	cmp	r0, #0
  402ac4:	d1b0      	bne.n	402a28 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402ac6:	4b60      	ldr	r3, [pc, #384]	; (402c48 <m2m_wifi_cb+0x284>)
  402ac8:	681b      	ldr	r3, [r3, #0]
  402aca:	2b00      	cmp	r3, #0
  402acc:	d0ac      	beq.n	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402ace:	a903      	add	r1, sp, #12
  402ad0:	202f      	movs	r0, #47	; 0x2f
  402ad2:	4798      	blx	r3
  402ad4:	e7a8      	b.n	402a28 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402ad6:	2300      	movs	r3, #0
  402ad8:	2204      	movs	r2, #4
  402ada:	a903      	add	r1, sp, #12
  402adc:	4628      	mov	r0, r5
  402ade:	4c59      	ldr	r4, [pc, #356]	; (402c44 <m2m_wifi_cb+0x280>)
  402ae0:	47a0      	blx	r4
  402ae2:	2800      	cmp	r0, #0
  402ae4:	d1a0      	bne.n	402a28 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402ae6:	485a      	ldr	r0, [pc, #360]	; (402c50 <m2m_wifi_cb+0x28c>)
  402ae8:	4c53      	ldr	r4, [pc, #332]	; (402c38 <m2m_wifi_cb+0x274>)
  402aea:	47a0      	blx	r4
  402aec:	9903      	ldr	r1, [sp, #12]
  402aee:	b2cb      	uxtb	r3, r1
  402af0:	9300      	str	r3, [sp, #0]
  402af2:	f3c1 2307 	ubfx	r3, r1, #8, #8
  402af6:	f3c1 4207 	ubfx	r2, r1, #16, #8
  402afa:	0e09      	lsrs	r1, r1, #24
  402afc:	4855      	ldr	r0, [pc, #340]	; (402c54 <m2m_wifi_cb+0x290>)
  402afe:	47a0      	blx	r4
  402b00:	484f      	ldr	r0, [pc, #316]	; (402c40 <m2m_wifi_cb+0x27c>)
  402b02:	47a0      	blx	r4
			if (gpfAppWifiCb)
  402b04:	4b50      	ldr	r3, [pc, #320]	; (402c48 <m2m_wifi_cb+0x284>)
  402b06:	681b      	ldr	r3, [r3, #0]
  402b08:	2b00      	cmp	r3, #0
  402b0a:	d08d      	beq.n	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402b0c:	2100      	movs	r1, #0
  402b0e:	2034      	movs	r0, #52	; 0x34
  402b10:	4798      	blx	r3
  402b12:	e789      	b.n	402a28 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  402b14:	2300      	movs	r3, #0
  402b16:	4a50      	ldr	r2, [pc, #320]	; (402c58 <m2m_wifi_cb+0x294>)
  402b18:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402b1a:	2204      	movs	r2, #4
  402b1c:	a903      	add	r1, sp, #12
  402b1e:	4628      	mov	r0, r5
  402b20:	4c48      	ldr	r4, [pc, #288]	; (402c44 <m2m_wifi_cb+0x280>)
  402b22:	47a0      	blx	r4
  402b24:	2800      	cmp	r0, #0
  402b26:	f47f af7f 	bne.w	402a28 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402b2a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402b2e:	4b4b      	ldr	r3, [pc, #300]	; (402c5c <m2m_wifi_cb+0x298>)
  402b30:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402b32:	4b45      	ldr	r3, [pc, #276]	; (402c48 <m2m_wifi_cb+0x284>)
  402b34:	681b      	ldr	r3, [r3, #0]
  402b36:	2b00      	cmp	r3, #0
  402b38:	f43f af76 	beq.w	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402b3c:	a903      	add	r1, sp, #12
  402b3e:	2011      	movs	r0, #17
  402b40:	4798      	blx	r3
  402b42:	e771      	b.n	402a28 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402b44:	2300      	movs	r3, #0
  402b46:	222c      	movs	r2, #44	; 0x2c
  402b48:	a903      	add	r1, sp, #12
  402b4a:	4628      	mov	r0, r5
  402b4c:	4c3d      	ldr	r4, [pc, #244]	; (402c44 <m2m_wifi_cb+0x280>)
  402b4e:	47a0      	blx	r4
  402b50:	2800      	cmp	r0, #0
  402b52:	f47f af69 	bne.w	402a28 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402b56:	4b3c      	ldr	r3, [pc, #240]	; (402c48 <m2m_wifi_cb+0x284>)
  402b58:	681b      	ldr	r3, [r3, #0]
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	f43f af64 	beq.w	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  402b60:	a903      	add	r1, sp, #12
  402b62:	2013      	movs	r0, #19
  402b64:	4798      	blx	r3
  402b66:	e75f      	b.n	402a28 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402b68:	2300      	movs	r3, #0
  402b6a:	2204      	movs	r2, #4
  402b6c:	a91c      	add	r1, sp, #112	; 0x70
  402b6e:	4628      	mov	r0, r5
  402b70:	4c34      	ldr	r4, [pc, #208]	; (402c44 <m2m_wifi_cb+0x280>)
  402b72:	47a0      	blx	r4
  402b74:	2800      	cmp	r0, #0
  402b76:	f47f af57 	bne.w	402a28 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402b7a:	4b33      	ldr	r3, [pc, #204]	; (402c48 <m2m_wifi_cb+0x284>)
  402b7c:	681b      	ldr	r3, [r3, #0]
  402b7e:	2b00      	cmp	r3, #0
  402b80:	f43f af52 	beq.w	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  402b84:	a91c      	add	r1, sp, #112	; 0x70
  402b86:	2004      	movs	r0, #4
  402b88:	4798      	blx	r3
  402b8a:	e74d      	b.n	402a28 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402b8c:	2300      	movs	r3, #0
  402b8e:	2204      	movs	r2, #4
  402b90:	a91c      	add	r1, sp, #112	; 0x70
  402b92:	4628      	mov	r0, r5
  402b94:	4c2b      	ldr	r4, [pc, #172]	; (402c44 <m2m_wifi_cb+0x280>)
  402b96:	47a0      	blx	r4
  402b98:	2800      	cmp	r0, #0
  402b9a:	f47f af45 	bne.w	402a28 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402b9e:	4b2a      	ldr	r3, [pc, #168]	; (402c48 <m2m_wifi_cb+0x284>)
  402ba0:	681b      	ldr	r3, [r3, #0]
  402ba2:	2b00      	cmp	r3, #0
  402ba4:	f43f af40 	beq.w	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  402ba8:	a91c      	add	r1, sp, #112	; 0x70
  402baa:	2065      	movs	r0, #101	; 0x65
  402bac:	4798      	blx	r3
  402bae:	e73b      	b.n	402a28 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  402bb0:	2301      	movs	r3, #1
  402bb2:	2264      	movs	r2, #100	; 0x64
  402bb4:	a903      	add	r1, sp, #12
  402bb6:	4628      	mov	r0, r5
  402bb8:	4c22      	ldr	r4, [pc, #136]	; (402c44 <m2m_wifi_cb+0x280>)
  402bba:	47a0      	blx	r4
  402bbc:	2800      	cmp	r0, #0
  402bbe:	f47f af33 	bne.w	402a28 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402bc2:	4b21      	ldr	r3, [pc, #132]	; (402c48 <m2m_wifi_cb+0x284>)
  402bc4:	681b      	ldr	r3, [r3, #0]
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	f43f af2e 	beq.w	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  402bcc:	a903      	add	r1, sp, #12
  402bce:	2009      	movs	r0, #9
  402bd0:	4798      	blx	r3
  402bd2:	e729      	b.n	402a28 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  402bd4:	2301      	movs	r3, #1
  402bd6:	2204      	movs	r2, #4
  402bd8:	a903      	add	r1, sp, #12
  402bda:	4628      	mov	r0, r5
  402bdc:	4c19      	ldr	r4, [pc, #100]	; (402c44 <m2m_wifi_cb+0x280>)
  402bde:	47a0      	blx	r4
  402be0:	2800      	cmp	r0, #0
  402be2:	f47f af21 	bne.w	402a28 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402be6:	4b18      	ldr	r3, [pc, #96]	; (402c48 <m2m_wifi_cb+0x284>)
  402be8:	681b      	ldr	r3, [r3, #0]
  402bea:	2b00      	cmp	r3, #0
  402bec:	f43f af1c 	beq.w	402a28 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  402bf0:	a903      	add	r1, sp, #12
  402bf2:	202a      	movs	r0, #42	; 0x2a
  402bf4:	4798      	blx	r3
  402bf6:	e717      	b.n	402a28 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  402bf8:	2300      	movs	r3, #0
  402bfa:	2208      	movs	r2, #8
  402bfc:	a903      	add	r1, sp, #12
  402bfe:	4628      	mov	r0, r5
  402c00:	4c10      	ldr	r4, [pc, #64]	; (402c44 <m2m_wifi_cb+0x280>)
  402c02:	47a0      	blx	r4
  402c04:	2800      	cmp	r0, #0
  402c06:	f47f af0f 	bne.w	402a28 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  402c0a:	2301      	movs	r3, #1
  402c0c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402c10:	9903      	ldr	r1, [sp, #12]
  402c12:	f105 0008 	add.w	r0, r5, #8
  402c16:	47a0      	blx	r4
  402c18:	2800      	cmp	r0, #0
  402c1a:	f47f af05 	bne.w	402a28 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  402c1e:	4b0a      	ldr	r3, [pc, #40]	; (402c48 <m2m_wifi_cb+0x284>)
  402c20:	681b      	ldr	r3, [r3, #0]
  402c22:	2b00      	cmp	r3, #0
  402c24:	f43f af00 	beq.w	402a28 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  402c28:	a903      	add	r1, sp, #12
  402c2a:	2020      	movs	r0, #32
  402c2c:	4798      	blx	r3
  402c2e:	e6fb      	b.n	402a28 <m2m_wifi_cb+0x64>
  402c30:	00408f10 	.word	0x00408f10
  402c34:	00408c6c 	.word	0x00408c6c
  402c38:	00405ced 	.word	0x00405ced
  402c3c:	00408f6c 	.word	0x00408f6c
  402c40:	00408c98 	.word	0x00408c98
  402c44:	004027d1 	.word	0x004027d1
  402c48:	2040c354 	.word	0x2040c354
  402c4c:	0040217d 	.word	0x0040217d
  402c50:	00408f40 	.word	0x00408f40
  402c54:	00408f4c 	.word	0x00408f4c
  402c58:	2040c359 	.word	0x2040c359
  402c5c:	2040c358 	.word	0x2040c358

00402c60 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  402c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c62:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  402c64:	2301      	movs	r3, #1
  402c66:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  402c6a:	2800      	cmp	r0, #0
  402c6c:	d050      	beq.n	402d10 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  402c6e:	6802      	ldr	r2, [r0, #0]
  402c70:	4b29      	ldr	r3, [pc, #164]	; (402d18 <m2m_wifi_init+0xb8>)
  402c72:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  402c74:	2200      	movs	r2, #0
  402c76:	4b29      	ldr	r3, [pc, #164]	; (402d1c <m2m_wifi_init+0xbc>)
  402c78:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  402c7a:	f10d 0007 	add.w	r0, sp, #7
  402c7e:	4b28      	ldr	r3, [pc, #160]	; (402d20 <m2m_wifi_init+0xc0>)
  402c80:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  402c82:	4604      	mov	r4, r0
  402c84:	b110      	cbz	r0, 402c8c <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  402c86:	4620      	mov	r0, r4
  402c88:	b00b      	add	sp, #44	; 0x2c
  402c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  402c8c:	4b25      	ldr	r3, [pc, #148]	; (402d24 <m2m_wifi_init+0xc4>)
  402c8e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  402c90:	4604      	mov	r4, r0
  402c92:	2800      	cmp	r0, #0
  402c94:	d138      	bne.n	402d08 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  402c96:	4924      	ldr	r1, [pc, #144]	; (402d28 <m2m_wifi_init+0xc8>)
  402c98:	2001      	movs	r0, #1
  402c9a:	4b24      	ldr	r3, [pc, #144]	; (402d2c <m2m_wifi_init+0xcc>)
  402c9c:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  402c9e:	a802      	add	r0, sp, #8
  402ca0:	4b23      	ldr	r3, [pc, #140]	; (402d30 <m2m_wifi_init+0xd0>)
  402ca2:	4798      	blx	r3
  402ca4:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  402ca6:	4f23      	ldr	r7, [pc, #140]	; (402d34 <m2m_wifi_init+0xd4>)
  402ca8:	4638      	mov	r0, r7
  402caa:	4d23      	ldr	r5, [pc, #140]	; (402d38 <m2m_wifi_init+0xd8>)
  402cac:	47a8      	blx	r5
  402cae:	f89d 300e 	ldrb.w	r3, [sp, #14]
  402cb2:	f89d 200d 	ldrb.w	r2, [sp, #13]
  402cb6:	f89d 100c 	ldrb.w	r1, [sp, #12]
  402cba:	4820      	ldr	r0, [pc, #128]	; (402d3c <m2m_wifi_init+0xdc>)
  402cbc:	47a8      	blx	r5
  402cbe:	4e20      	ldr	r6, [pc, #128]	; (402d40 <m2m_wifi_init+0xe0>)
  402cc0:	4630      	mov	r0, r6
  402cc2:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  402cc4:	4638      	mov	r0, r7
  402cc6:	47a8      	blx	r5
  402cc8:	f89d 3011 	ldrb.w	r3, [sp, #17]
  402ccc:	f89d 2010 	ldrb.w	r2, [sp, #16]
  402cd0:	f89d 100f 	ldrb.w	r1, [sp, #15]
  402cd4:	481b      	ldr	r0, [pc, #108]	; (402d44 <m2m_wifi_init+0xe4>)
  402cd6:	47a8      	blx	r5
  402cd8:	4630      	mov	r0, r6
  402cda:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402cdc:	4638      	mov	r0, r7
  402cde:	47a8      	blx	r5
  402ce0:	2300      	movs	r3, #0
  402ce2:	2203      	movs	r2, #3
  402ce4:	2113      	movs	r1, #19
  402ce6:	4818      	ldr	r0, [pc, #96]	; (402d48 <m2m_wifi_init+0xe8>)
  402ce8:	47a8      	blx	r5
  402cea:	4630      	mov	r0, r6
  402cec:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  402cee:	f114 0f0d 	cmn.w	r4, #13
  402cf2:	d1c8      	bne.n	402c86 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  402cf4:	f240 12d5 	movw	r2, #469	; 0x1d5
  402cf8:	4914      	ldr	r1, [pc, #80]	; (402d4c <m2m_wifi_init+0xec>)
  402cfa:	4815      	ldr	r0, [pc, #84]	; (402d50 <m2m_wifi_init+0xf0>)
  402cfc:	47a8      	blx	r5
  402cfe:	4815      	ldr	r0, [pc, #84]	; (402d54 <m2m_wifi_init+0xf4>)
  402d00:	47a8      	blx	r5
  402d02:	4630      	mov	r0, r6
  402d04:	47a8      	blx	r5
  402d06:	e7be      	b.n	402c86 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  402d08:	2000      	movs	r0, #0
  402d0a:	4b13      	ldr	r3, [pc, #76]	; (402d58 <m2m_wifi_init+0xf8>)
  402d0c:	4798      	blx	r3
  402d0e:	e7ba      	b.n	402c86 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  402d10:	f06f 040b 	mvn.w	r4, #11
  402d14:	e7b7      	b.n	402c86 <m2m_wifi_init+0x26>
  402d16:	bf00      	nop
  402d18:	2040c354 	.word	0x2040c354
  402d1c:	2040c359 	.word	0x2040c359
  402d20:	00403625 	.word	0x00403625
  402d24:	00402975 	.word	0x00402975
  402d28:	004029c5 	.word	0x004029c5
  402d2c:	004028e5 	.word	0x004028e5
  402d30:	00403575 	.word	0x00403575
  402d34:	00408f40 	.word	0x00408f40
  402d38:	00405ced 	.word	0x00405ced
  402d3c:	0040902c 	.word	0x0040902c
  402d40:	00408c98 	.word	0x00408c98
  402d44:	00409048 	.word	0x00409048
  402d48:	00409064 	.word	0x00409064
  402d4c:	00408f1c 	.word	0x00408f1c
  402d50:	00408c6c 	.word	0x00408c6c
  402d54:	00409080 	.word	0x00409080
  402d58:	004036f1 	.word	0x004036f1

00402d5c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  402d5c:	b508      	push	{r3, lr}
	return hif_handle_isr();
  402d5e:	4b01      	ldr	r3, [pc, #4]	; (402d64 <m2m_wifi_handle_events+0x8>)
  402d60:	4798      	blx	r3
}
  402d62:	bd08      	pop	{r3, pc}
  402d64:	004024c1 	.word	0x004024c1

00402d68 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  402d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d6c:	b0a0      	sub	sp, #128	; 0x80
  402d6e:	4680      	mov	r8, r0
  402d70:	460d      	mov	r5, r1
  402d72:	4614      	mov	r4, r2
  402d74:	461e      	mov	r6, r3
  402d76:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  402d7a:	2a01      	cmp	r2, #1
  402d7c:	d003      	beq.n	402d86 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  402d7e:	2b00      	cmp	r3, #0
  402d80:	d037      	beq.n	402df2 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402d82:	2a02      	cmp	r2, #2
  402d84:	d042      	beq.n	402e0c <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  402d86:	1e6b      	subs	r3, r5, #1
  402d88:	b2db      	uxtb	r3, r3
  402d8a:	2b1f      	cmp	r3, #31
  402d8c:	d875      	bhi.n	402e7a <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  402d8e:	2fff      	cmp	r7, #255	; 0xff
  402d90:	d001      	beq.n	402d96 <m2m_wifi_connect_sc+0x2e>
  402d92:	2f0d      	cmp	r7, #13
  402d94:	d87e      	bhi.n	402e94 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  402d96:	462a      	mov	r2, r5
  402d98:	4641      	mov	r1, r8
  402d9a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  402d9e:	4b77      	ldr	r3, [pc, #476]	; (402f7c <m2m_wifi_connect_sc+0x214>)
  402da0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  402da2:	ab20      	add	r3, sp, #128	; 0x80
  402da4:	441d      	add	r5, r3
  402da6:	2300      	movs	r3, #0
  402da8:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  402dac:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  402db0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  402db4:	3300      	adds	r3, #0
  402db6:	bf18      	it	ne
  402db8:	2301      	movne	r3, #1
  402dba:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  402dbe:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  402dc2:	2c03      	cmp	r4, #3
  402dc4:	d073      	beq.n	402eae <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  402dc6:	2c02      	cmp	r4, #2
  402dc8:	f000 80aa 	beq.w	402f20 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  402dcc:	2c04      	cmp	r4, #4
  402dce:	f000 80c1 	beq.w	402f54 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  402dd2:	2c01      	cmp	r4, #1
  402dd4:	f040 80c4 	bne.w	402f60 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  402dd8:	2300      	movs	r3, #0
  402dda:	9302      	str	r3, [sp, #8]
  402ddc:	9301      	str	r3, [sp, #4]
  402dde:	9300      	str	r3, [sp, #0]
  402de0:	236c      	movs	r3, #108	; 0x6c
  402de2:	aa05      	add	r2, sp, #20
  402de4:	2128      	movs	r1, #40	; 0x28
  402de6:	2001      	movs	r0, #1
  402de8:	4c65      	ldr	r4, [pc, #404]	; (402f80 <m2m_wifi_connect_sc+0x218>)
  402dea:	47a0      	blx	r4

ERR1:
	return ret;
}
  402dec:	b020      	add	sp, #128	; 0x80
  402dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  402df2:	f240 2203 	movw	r2, #515	; 0x203
  402df6:	4963      	ldr	r1, [pc, #396]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402df8:	4863      	ldr	r0, [pc, #396]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402dfa:	4c64      	ldr	r4, [pc, #400]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402dfc:	47a0      	blx	r4
  402dfe:	4864      	ldr	r0, [pc, #400]	; (402f90 <m2m_wifi_connect_sc+0x228>)
  402e00:	47a0      	blx	r4
  402e02:	4864      	ldr	r0, [pc, #400]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402e04:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402e06:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402e0a:	e7ef      	b.n	402dec <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402e0c:	4618      	mov	r0, r3
  402e0e:	4b62      	ldr	r3, [pc, #392]	; (402f98 <m2m_wifi_connect_sc+0x230>)
  402e10:	4798      	blx	r3
  402e12:	2840      	cmp	r0, #64	; 0x40
  402e14:	d1b7      	bne.n	402d86 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  402e16:	7833      	ldrb	r3, [r6, #0]
  402e18:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402e1c:	b2d2      	uxtb	r2, r2
  402e1e:	2a06      	cmp	r2, #6
  402e20:	d91e      	bls.n	402e60 <m2m_wifi_connect_sc+0xf8>
  402e22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402e26:	b2d2      	uxtb	r2, r2
  402e28:	2a36      	cmp	r2, #54	; 0x36
  402e2a:	d819      	bhi.n	402e60 <m2m_wifi_connect_sc+0xf8>
  402e2c:	3b47      	subs	r3, #71	; 0x47
  402e2e:	b2db      	uxtb	r3, r3
  402e30:	2b19      	cmp	r3, #25
  402e32:	d915      	bls.n	402e60 <m2m_wifi_connect_sc+0xf8>
  402e34:	4631      	mov	r1, r6
  402e36:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  402e3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402e3e:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402e42:	b2d2      	uxtb	r2, r2
  402e44:	2a06      	cmp	r2, #6
  402e46:	d90b      	bls.n	402e60 <m2m_wifi_connect_sc+0xf8>
  402e48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402e4c:	b2d2      	uxtb	r2, r2
  402e4e:	2a36      	cmp	r2, #54	; 0x36
  402e50:	d806      	bhi.n	402e60 <m2m_wifi_connect_sc+0xf8>
  402e52:	3b47      	subs	r3, #71	; 0x47
  402e54:	b2db      	uxtb	r3, r3
  402e56:	2b19      	cmp	r3, #25
  402e58:	d902      	bls.n	402e60 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  402e5a:	4288      	cmp	r0, r1
  402e5c:	d1ed      	bne.n	402e3a <m2m_wifi_connect_sc+0xd2>
  402e5e:	e792      	b.n	402d86 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  402e60:	f240 220f 	movw	r2, #527	; 0x20f
  402e64:	4947      	ldr	r1, [pc, #284]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402e66:	4848      	ldr	r0, [pc, #288]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402e68:	4c48      	ldr	r4, [pc, #288]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402e6a:	47a0      	blx	r4
  402e6c:	484b      	ldr	r0, [pc, #300]	; (402f9c <m2m_wifi_connect_sc+0x234>)
  402e6e:	47a0      	blx	r4
  402e70:	4848      	ldr	r0, [pc, #288]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402e72:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  402e74:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  402e78:	e7b8      	b.n	402dec <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  402e7a:	f240 2219 	movw	r2, #537	; 0x219
  402e7e:	4941      	ldr	r1, [pc, #260]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402e80:	4841      	ldr	r0, [pc, #260]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402e82:	4c42      	ldr	r4, [pc, #264]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402e84:	47a0      	blx	r4
  402e86:	4846      	ldr	r0, [pc, #280]	; (402fa0 <m2m_wifi_connect_sc+0x238>)
  402e88:	47a0      	blx	r4
  402e8a:	4842      	ldr	r0, [pc, #264]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402e8c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402e8e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  402e92:	e7ab      	b.n	402dec <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  402e94:	f240 2222 	movw	r2, #546	; 0x222
  402e98:	493a      	ldr	r1, [pc, #232]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402e9a:	483b      	ldr	r0, [pc, #236]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402e9c:	4c3b      	ldr	r4, [pc, #236]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402e9e:	47a0      	blx	r4
  402ea0:	4840      	ldr	r0, [pc, #256]	; (402fa4 <m2m_wifi_connect_sc+0x23c>)
  402ea2:	47a0      	blx	r4
  402ea4:	483b      	ldr	r0, [pc, #236]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402ea6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402ea8:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402eac:	e79e      	b.n	402dec <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  402eae:	7833      	ldrb	r3, [r6, #0]
  402eb0:	3b01      	subs	r3, #1
  402eb2:	b2db      	uxtb	r3, r3
  402eb4:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  402eb8:	2b03      	cmp	r3, #3
  402eba:	d813      	bhi.n	402ee4 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  402ebc:	7872      	ldrb	r2, [r6, #1]
  402ebe:	1e53      	subs	r3, r2, #1
  402ec0:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  402ec4:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  402ec8:	2b0b      	cmp	r3, #11
  402eca:	d11a      	bne.n	402f02 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  402ecc:	1cb1      	adds	r1, r6, #2
  402ece:	f10d 0016 	add.w	r0, sp, #22
  402ed2:	4b2a      	ldr	r3, [pc, #168]	; (402f7c <m2m_wifi_connect_sc+0x214>)
  402ed4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  402ed6:	7873      	ldrb	r3, [r6, #1]
  402ed8:	aa20      	add	r2, sp, #128	; 0x80
  402eda:	4413      	add	r3, r2
  402edc:	2200      	movs	r2, #0
  402ede:	f803 2c6a 	strb.w	r2, [r3, #-106]
  402ee2:	e779      	b.n	402dd8 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  402ee4:	f240 2239 	movw	r2, #569	; 0x239
  402ee8:	4926      	ldr	r1, [pc, #152]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402eea:	4827      	ldr	r0, [pc, #156]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402eec:	4c27      	ldr	r4, [pc, #156]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402eee:	47a0      	blx	r4
  402ef0:	f89d 1014 	ldrb.w	r1, [sp, #20]
  402ef4:	482c      	ldr	r0, [pc, #176]	; (402fa8 <m2m_wifi_connect_sc+0x240>)
  402ef6:	47a0      	blx	r4
  402ef8:	4826      	ldr	r0, [pc, #152]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402efa:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402efc:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402f00:	e774      	b.n	402dec <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  402f02:	f44f 7210 	mov.w	r2, #576	; 0x240
  402f06:	491f      	ldr	r1, [pc, #124]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402f08:	481f      	ldr	r0, [pc, #124]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402f0a:	4c20      	ldr	r4, [pc, #128]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402f0c:	47a0      	blx	r4
  402f0e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  402f12:	4826      	ldr	r0, [pc, #152]	; (402fac <m2m_wifi_connect_sc+0x244>)
  402f14:	47a0      	blx	r4
  402f16:	481f      	ldr	r0, [pc, #124]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402f18:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402f1a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402f1e:	e765      	b.n	402dec <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  402f20:	4630      	mov	r0, r6
  402f22:	4b1d      	ldr	r3, [pc, #116]	; (402f98 <m2m_wifi_connect_sc+0x230>)
  402f24:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  402f26:	1e43      	subs	r3, r0, #1
  402f28:	b29b      	uxth	r3, r3
  402f2a:	2b3f      	cmp	r3, #63	; 0x3f
  402f2c:	d805      	bhi.n	402f3a <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  402f2e:	1c42      	adds	r2, r0, #1
  402f30:	4631      	mov	r1, r6
  402f32:	a805      	add	r0, sp, #20
  402f34:	4b11      	ldr	r3, [pc, #68]	; (402f7c <m2m_wifi_connect_sc+0x214>)
  402f36:	4798      	blx	r3
  402f38:	e74e      	b.n	402dd8 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  402f3a:	f240 224f 	movw	r2, #591	; 0x24f
  402f3e:	4911      	ldr	r1, [pc, #68]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402f40:	4811      	ldr	r0, [pc, #68]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402f42:	4c12      	ldr	r4, [pc, #72]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402f44:	47a0      	blx	r4
  402f46:	481a      	ldr	r0, [pc, #104]	; (402fb0 <m2m_wifi_connect_sc+0x248>)
  402f48:	47a0      	blx	r4
  402f4a:	4812      	ldr	r0, [pc, #72]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402f4c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402f4e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402f52:	e74b      	b.n	402dec <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  402f54:	223e      	movs	r2, #62	; 0x3e
  402f56:	4631      	mov	r1, r6
  402f58:	a805      	add	r0, sp, #20
  402f5a:	4b08      	ldr	r3, [pc, #32]	; (402f7c <m2m_wifi_connect_sc+0x214>)
  402f5c:	4798      	blx	r3
  402f5e:	e73b      	b.n	402dd8 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  402f60:	f240 225f 	movw	r2, #607	; 0x25f
  402f64:	4907      	ldr	r1, [pc, #28]	; (402f84 <m2m_wifi_connect_sc+0x21c>)
  402f66:	4808      	ldr	r0, [pc, #32]	; (402f88 <m2m_wifi_connect_sc+0x220>)
  402f68:	4c08      	ldr	r4, [pc, #32]	; (402f8c <m2m_wifi_connect_sc+0x224>)
  402f6a:	47a0      	blx	r4
  402f6c:	4811      	ldr	r0, [pc, #68]	; (402fb4 <m2m_wifi_connect_sc+0x24c>)
  402f6e:	47a0      	blx	r4
  402f70:	4808      	ldr	r0, [pc, #32]	; (402f94 <m2m_wifi_connect_sc+0x22c>)
  402f72:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402f74:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  402f78:	e738      	b.n	402dec <m2m_wifi_connect_sc+0x84>
  402f7a:	bf00      	nop
  402f7c:	00402169 	.word	0x00402169
  402f80:	004022e1 	.word	0x004022e1
  402f84:	00408f2c 	.word	0x00408f2c
  402f88:	00408c6c 	.word	0x00408c6c
  402f8c:	00405ced 	.word	0x00405ced
  402f90:	00408f80 	.word	0x00408f80
  402f94:	00408c98 	.word	0x00408c98
  402f98:	0040218b 	.word	0x0040218b
  402f9c:	00408f94 	.word	0x00408f94
  402fa0:	00408fa4 	.word	0x00408fa4
  402fa4:	00408fb8 	.word	0x00408fb8
  402fa8:	00408fc4 	.word	0x00408fc4
  402fac:	00408fe0 	.word	0x00408fe0
  402fb0:	00408ffc 	.word	0x00408ffc
  402fb4:	00409018 	.word	0x00409018

00402fb8 <m2m_wifi_connect>:
{
  402fb8:	b510      	push	{r4, lr}
  402fba:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  402fbc:	2400      	movs	r4, #0
  402fbe:	9401      	str	r4, [sp, #4]
  402fc0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  402fc4:	9400      	str	r4, [sp, #0]
  402fc6:	4c02      	ldr	r4, [pc, #8]	; (402fd0 <m2m_wifi_connect+0x18>)
  402fc8:	47a0      	blx	r4
}
  402fca:	b002      	add	sp, #8
  402fcc:	bd10      	pop	{r4, pc}
  402fce:	bf00      	nop
  402fd0:	00402d69 	.word	0x00402d69

00402fd4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  402fd4:	2000      	movs	r0, #0
  402fd6:	4770      	bx	lr

00402fd8 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  402fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402fda:	b083      	sub	sp, #12
  402fdc:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  402fde:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  402fe2:	4e0a      	ldr	r6, [pc, #40]	; (40300c <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  402fe4:	4f0a      	ldr	r7, [pc, #40]	; (403010 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  402fe6:	4621      	mov	r1, r4
  402fe8:	4628      	mov	r0, r5
  402fea:	47b0      	blx	r6
		if(val32 != 0) {		
  402fec:	b154      	cbz	r4, 403004 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  402fee:	a902      	add	r1, sp, #8
  402ff0:	2300      	movs	r3, #0
  402ff2:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  402ff6:	4628      	mov	r0, r5
  402ff8:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  402ffa:	2800      	cmp	r0, #0
  402ffc:	d1f3      	bne.n	402fe6 <chip_apply_conf+0xe>
				if(reg == val32)
  402ffe:	9b01      	ldr	r3, [sp, #4]
  403000:	429c      	cmp	r4, r3
  403002:	d1f0      	bne.n	402fe6 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  403004:	2000      	movs	r0, #0
  403006:	b003      	add	sp, #12
  403008:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40300a:	bf00      	nop
  40300c:	004034b1 	.word	0x004034b1
  403010:	004034a5 	.word	0x004034a5

00403014 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  403014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403018:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40301a:	2001      	movs	r0, #1
  40301c:	4b3c      	ldr	r3, [pc, #240]	; (403110 <nm_clkless_wake+0xfc>)
  40301e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  403020:	a901      	add	r1, sp, #4
  403022:	2001      	movs	r0, #1
  403024:	4b3b      	ldr	r3, [pc, #236]	; (403114 <nm_clkless_wake+0x100>)
  403026:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  403028:	4682      	mov	sl, r0
  40302a:	b938      	cbnz	r0, 40303c <nm_clkless_wake+0x28>
  40302c:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40302e:	f04f 0801 	mov.w	r8, #1
  403032:	f8df 9108 	ldr.w	r9, [pc, #264]	; 40313c <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  403036:	4d36      	ldr	r5, [pc, #216]	; (403110 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403038:	4f37      	ldr	r7, [pc, #220]	; (403118 <nm_clkless_wake+0x104>)
  40303a:	e020      	b.n	40307e <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  40303c:	2272      	movs	r2, #114	; 0x72
  40303e:	4937      	ldr	r1, [pc, #220]	; (40311c <nm_clkless_wake+0x108>)
  403040:	4837      	ldr	r0, [pc, #220]	; (403120 <nm_clkless_wake+0x10c>)
  403042:	4c38      	ldr	r4, [pc, #224]	; (403124 <nm_clkless_wake+0x110>)
  403044:	47a0      	blx	r4
  403046:	4838      	ldr	r0, [pc, #224]	; (403128 <nm_clkless_wake+0x114>)
  403048:	47a0      	blx	r4
  40304a:	4838      	ldr	r0, [pc, #224]	; (40312c <nm_clkless_wake+0x118>)
  40304c:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40304e:	e009      	b.n	403064 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  403050:	2296      	movs	r2, #150	; 0x96
  403052:	4932      	ldr	r1, [pc, #200]	; (40311c <nm_clkless_wake+0x108>)
  403054:	4832      	ldr	r0, [pc, #200]	; (403120 <nm_clkless_wake+0x10c>)
  403056:	4c33      	ldr	r4, [pc, #204]	; (403124 <nm_clkless_wake+0x110>)
  403058:	47a0      	blx	r4
  40305a:	4835      	ldr	r0, [pc, #212]	; (403130 <nm_clkless_wake+0x11c>)
  40305c:	47a0      	blx	r4
  40305e:	4833      	ldr	r0, [pc, #204]	; (40312c <nm_clkless_wake+0x118>)
  403060:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403062:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  403064:	4650      	mov	r0, sl
  403066:	b003      	add	sp, #12
  403068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  40306c:	9901      	ldr	r1, [sp, #4]
  40306e:	f041 0102 	orr.w	r1, r1, #2
  403072:	4640      	mov	r0, r8
  403074:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  403076:	9b00      	ldr	r3, [sp, #0]
  403078:	f013 0f04 	tst.w	r3, #4
  40307c:	d1f2      	bne.n	403064 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  40307e:	9901      	ldr	r1, [sp, #4]
  403080:	f041 0102 	orr.w	r1, r1, #2
  403084:	4640      	mov	r0, r8
  403086:	47c8      	blx	r9
		nm_bsp_sleep(1);
  403088:	4640      	mov	r0, r8
  40308a:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40308c:	4669      	mov	r1, sp
  40308e:	4b29      	ldr	r3, [pc, #164]	; (403134 <nm_clkless_wake+0x120>)
  403090:	6818      	ldr	r0, [r3, #0]
  403092:	4b20      	ldr	r3, [pc, #128]	; (403114 <nm_clkless_wake+0x100>)
  403094:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  403096:	b908      	cbnz	r0, 40309c <nm_clkless_wake+0x88>
  403098:	9b00      	ldr	r3, [sp, #0]
  40309a:	b9bb      	cbnz	r3, 4030cc <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  40309c:	4e25      	ldr	r6, [pc, #148]	; (403134 <nm_clkless_wake+0x120>)
  40309e:	230e      	movs	r3, #14
  4030a0:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  4030a2:	4640      	mov	r0, r8
  4030a4:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4030a6:	4669      	mov	r1, sp
  4030a8:	6830      	ldr	r0, [r6, #0]
  4030aa:	4b1a      	ldr	r3, [pc, #104]	; (403114 <nm_clkless_wake+0x100>)
  4030ac:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4030ae:	b908      	cbnz	r0, 4030b4 <nm_clkless_wake+0xa0>
  4030b0:	9b00      	ldr	r3, [sp, #0]
  4030b2:	b95b      	cbnz	r3, 4030cc <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  4030b4:	4e1f      	ldr	r6, [pc, #124]	; (403134 <nm_clkless_wake+0x120>)
  4030b6:	2313      	movs	r3, #19
  4030b8:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  4030ba:	4640      	mov	r0, r8
  4030bc:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4030be:	4669      	mov	r1, sp
  4030c0:	6830      	ldr	r0, [r6, #0]
  4030c2:	4b14      	ldr	r3, [pc, #80]	; (403114 <nm_clkless_wake+0x100>)
  4030c4:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4030c6:	4606      	mov	r6, r0
  4030c8:	2800      	cmp	r0, #0
  4030ca:	d1c1      	bne.n	403050 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4030cc:	4e19      	ldr	r6, [pc, #100]	; (403134 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4030ce:	9b00      	ldr	r3, [sp, #0]
  4030d0:	f013 0f04 	tst.w	r3, #4
  4030d4:	d1c6      	bne.n	403064 <nm_clkless_wake+0x50>
  4030d6:	3401      	adds	r4, #1
  4030d8:	fba7 2304 	umull	r2, r3, r7, r4
  4030dc:	085b      	lsrs	r3, r3, #1
  4030de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4030e2:	429c      	cmp	r4, r3
  4030e4:	d1c2      	bne.n	40306c <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4030e6:	2002      	movs	r0, #2
  4030e8:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4030ea:	4669      	mov	r1, sp
  4030ec:	6830      	ldr	r0, [r6, #0]
  4030ee:	4b09      	ldr	r3, [pc, #36]	; (403114 <nm_clkless_wake+0x100>)
  4030f0:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4030f2:	9b00      	ldr	r3, [sp, #0]
  4030f4:	f013 0f04 	tst.w	r3, #4
  4030f8:	d1e9      	bne.n	4030ce <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4030fa:	22aa      	movs	r2, #170	; 0xaa
  4030fc:	4907      	ldr	r1, [pc, #28]	; (40311c <nm_clkless_wake+0x108>)
  4030fe:	4808      	ldr	r0, [pc, #32]	; (403120 <nm_clkless_wake+0x10c>)
  403100:	f8df b020 	ldr.w	fp, [pc, #32]	; 403124 <nm_clkless_wake+0x110>
  403104:	47d8      	blx	fp
  403106:	480c      	ldr	r0, [pc, #48]	; (403138 <nm_clkless_wake+0x124>)
  403108:	47d8      	blx	fp
  40310a:	4808      	ldr	r0, [pc, #32]	; (40312c <nm_clkless_wake+0x118>)
  40310c:	47d8      	blx	fp
  40310e:	e7de      	b.n	4030ce <nm_clkless_wake+0xba>
  403110:	00401dc5 	.word	0x00401dc5
  403114:	004034a5 	.word	0x004034a5
  403118:	aaaaaaab 	.word	0xaaaaaaab
  40311c:	0040909c 	.word	0x0040909c
  403120:	00408c6c 	.word	0x00408c6c
  403124:	00405ced 	.word	0x00405ced
  403128:	0040910c 	.word	0x0040910c
  40312c:	00408c98 	.word	0x00408c98
  403130:	0040912c 	.word	0x0040912c
  403134:	20400014 	.word	0x20400014
  403138:	0040914c 	.word	0x0040914c
  40313c:	004034b1 	.word	0x004034b1

00403140 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  403140:	b500      	push	{lr}
  403142:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403144:	a901      	add	r1, sp, #4
  403146:	f241 4008 	movw	r0, #5128	; 0x1408
  40314a:	4b15      	ldr	r3, [pc, #84]	; (4031a0 <enable_interrupts+0x60>)
  40314c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40314e:	b9e8      	cbnz	r0, 40318c <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  403150:	9901      	ldr	r1, [sp, #4]
  403152:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403156:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403158:	f241 4008 	movw	r0, #5128	; 0x1408
  40315c:	4b11      	ldr	r3, [pc, #68]	; (4031a4 <enable_interrupts+0x64>)
  40315e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403160:	b9b8      	cbnz	r0, 403192 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403162:	a901      	add	r1, sp, #4
  403164:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403168:	4b0d      	ldr	r3, [pc, #52]	; (4031a0 <enable_interrupts+0x60>)
  40316a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40316c:	b9a0      	cbnz	r0, 403198 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40316e:	9901      	ldr	r1, [sp, #4]
  403170:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403174:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  403176:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40317a:	4b0a      	ldr	r3, [pc, #40]	; (4031a4 <enable_interrupts+0x64>)
  40317c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40317e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403180:	bf18      	it	ne
  403182:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  403186:	b003      	add	sp, #12
  403188:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  40318c:	f06f 0005 	mvn.w	r0, #5
  403190:	e7f9      	b.n	403186 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403192:	f06f 0005 	mvn.w	r0, #5
  403196:	e7f6      	b.n	403186 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403198:	f06f 0005 	mvn.w	r0, #5
  40319c:	e7f3      	b.n	403186 <enable_interrupts+0x46>
  40319e:	bf00      	nop
  4031a0:	004034a5 	.word	0x004034a5
  4031a4:	004034b1 	.word	0x004034b1

004031a8 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4031a8:	b510      	push	{r4, lr}
  4031aa:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4031ac:	4b25      	ldr	r3, [pc, #148]	; (403244 <nmi_get_chipid+0x9c>)
  4031ae:	681c      	ldr	r4, [r3, #0]
  4031b0:	b124      	cbz	r4, 4031bc <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  4031b2:	4b24      	ldr	r3, [pc, #144]	; (403244 <nmi_get_chipid+0x9c>)
  4031b4:	681c      	ldr	r4, [r3, #0]
}
  4031b6:	4620      	mov	r0, r4
  4031b8:	b002      	add	sp, #8
  4031ba:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4031bc:	4619      	mov	r1, r3
  4031be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4031c2:	4b21      	ldr	r3, [pc, #132]	; (403248 <nmi_get_chipid+0xa0>)
  4031c4:	4798      	blx	r3
  4031c6:	b118      	cbz	r0, 4031d0 <nmi_get_chipid+0x28>
			chipid = 0;
  4031c8:	2200      	movs	r2, #0
  4031ca:	4b1e      	ldr	r3, [pc, #120]	; (403244 <nmi_get_chipid+0x9c>)
  4031cc:	601a      	str	r2, [r3, #0]
			return 0;
  4031ce:	e7f2      	b.n	4031b6 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4031d0:	a901      	add	r1, sp, #4
  4031d2:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4031d6:	4b1c      	ldr	r3, [pc, #112]	; (403248 <nmi_get_chipid+0xa0>)
  4031d8:	4798      	blx	r3
  4031da:	b118      	cbz	r0, 4031e4 <nmi_get_chipid+0x3c>
			chipid = 0;
  4031dc:	2200      	movs	r2, #0
  4031de:	4b19      	ldr	r3, [pc, #100]	; (403244 <nmi_get_chipid+0x9c>)
  4031e0:	601a      	str	r2, [r3, #0]
			return 0;
  4031e2:	e7e8      	b.n	4031b6 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4031e4:	4b17      	ldr	r3, [pc, #92]	; (403244 <nmi_get_chipid+0x9c>)
  4031e6:	681b      	ldr	r3, [r3, #0]
  4031e8:	4a18      	ldr	r2, [pc, #96]	; (40324c <nmi_get_chipid+0xa4>)
  4031ea:	4293      	cmp	r3, r2
  4031ec:	d00d      	beq.n	40320a <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4031ee:	4a18      	ldr	r2, [pc, #96]	; (403250 <nmi_get_chipid+0xa8>)
  4031f0:	4293      	cmp	r3, r2
  4031f2:	d011      	beq.n	403218 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4031f4:	4a17      	ldr	r2, [pc, #92]	; (403254 <nmi_get_chipid+0xac>)
  4031f6:	4293      	cmp	r3, r2
  4031f8:	d018      	beq.n	40322c <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4031fa:	4a12      	ldr	r2, [pc, #72]	; (403244 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4031fc:	6813      	ldr	r3, [r2, #0]
  4031fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  403202:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  403206:	6013      	str	r3, [r2, #0]
  403208:	e7d3      	b.n	4031b2 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  40320a:	9b01      	ldr	r3, [sp, #4]
  40320c:	2b01      	cmp	r3, #1
  40320e:	d0f4      	beq.n	4031fa <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  403210:	3201      	adds	r2, #1
  403212:	4b0c      	ldr	r3, [pc, #48]	; (403244 <nmi_get_chipid+0x9c>)
  403214:	601a      	str	r2, [r3, #0]
  403216:	e7f0      	b.n	4031fa <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  403218:	9b01      	ldr	r3, [sp, #4]
  40321a:	2b03      	cmp	r3, #3
  40321c:	d0ed      	beq.n	4031fa <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  40321e:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  403220:	bf0c      	ite	eq
  403222:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  403224:	4a0c      	ldrne	r2, [pc, #48]	; (403258 <nmi_get_chipid+0xb0>)
  403226:	4b07      	ldr	r3, [pc, #28]	; (403244 <nmi_get_chipid+0x9c>)
  403228:	601a      	str	r2, [r3, #0]
  40322a:	e7e6      	b.n	4031fa <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  40322c:	4905      	ldr	r1, [pc, #20]	; (403244 <nmi_get_chipid+0x9c>)
  40322e:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  403232:	4b05      	ldr	r3, [pc, #20]	; (403248 <nmi_get_chipid+0xa0>)
  403234:	4798      	blx	r3
  403236:	2800      	cmp	r0, #0
  403238:	d0df      	beq.n	4031fa <nmi_get_chipid+0x52>
			chipid = 0;
  40323a:	2200      	movs	r2, #0
  40323c:	4b01      	ldr	r3, [pc, #4]	; (403244 <nmi_get_chipid+0x9c>)
  40323e:	601a      	str	r2, [r3, #0]
			return 0;
  403240:	e7b9      	b.n	4031b6 <nmi_get_chipid+0xe>
  403242:	bf00      	nop
  403244:	2040c35c 	.word	0x2040c35c
  403248:	004034a5 	.word	0x004034a5
  40324c:	001002a0 	.word	0x001002a0
  403250:	001002b0 	.word	0x001002b0
  403254:	001000f0 	.word	0x001000f0
  403258:	001002b2 	.word	0x001002b2

0040325c <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  40325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403260:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403262:	f241 0514 	movw	r5, #4116	; 0x1014
  403266:	4c28      	ldr	r4, [pc, #160]	; (403308 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403268:	4e28      	ldr	r6, [pc, #160]	; (40330c <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40326a:	4628      	mov	r0, r5
  40326c:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40326e:	2800      	cmp	r0, #0
  403270:	db02      	blt.n	403278 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403272:	2001      	movs	r0, #1
  403274:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403276:	e7f8      	b.n	40326a <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  403278:	4825      	ldr	r0, [pc, #148]	; (403310 <wait_for_bootrom+0xb4>)
  40327a:	4b23      	ldr	r3, [pc, #140]	; (403308 <wait_for_bootrom+0xac>)
  40327c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40327e:	f010 0f01 	tst.w	r0, #1
  403282:	d110      	bne.n	4032a6 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403284:	f8df 8084 	ldr.w	r8, [pc, #132]	; 40330c <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  403288:	4e1f      	ldr	r6, [pc, #124]	; (403308 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40328a:	4d22      	ldr	r5, [pc, #136]	; (403314 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  40328c:	2001      	movs	r0, #1
  40328e:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  403290:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403294:	47b0      	blx	r6
  403296:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  403298:	462a      	mov	r2, r5
  40329a:	4601      	mov	r1, r0
  40329c:	481e      	ldr	r0, [pc, #120]	; (403318 <wait_for_bootrom+0xbc>)
  40329e:	4b1f      	ldr	r3, [pc, #124]	; (40331c <wait_for_bootrom+0xc0>)
  4032a0:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  4032a2:	42ac      	cmp	r4, r5
  4032a4:	d1f2      	bne.n	40328c <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4032a6:	2f02      	cmp	r7, #2
  4032a8:	d019      	beq.n	4032de <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  4032aa:	2f03      	cmp	r7, #3
  4032ac:	d022      	beq.n	4032f4 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4032ae:	2f04      	cmp	r7, #4
  4032b0:	bf14      	ite	ne
  4032b2:	2400      	movne	r4, #0
  4032b4:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4032b6:	4b1a      	ldr	r3, [pc, #104]	; (403320 <wait_for_bootrom+0xc4>)
  4032b8:	4798      	blx	r3
  4032ba:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4032be:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4032c2:	bf0c      	ite	eq
  4032c4:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4032c8:	4620      	movne	r0, r4
  4032ca:	4b16      	ldr	r3, [pc, #88]	; (403324 <wait_for_bootrom+0xc8>)
  4032cc:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4032ce:	4916      	ldr	r1, [pc, #88]	; (403328 <wait_for_bootrom+0xcc>)
  4032d0:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4032d4:	4b15      	ldr	r3, [pc, #84]	; (40332c <wait_for_bootrom+0xd0>)
  4032d6:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4032d8:	2000      	movs	r0, #0
  4032da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4032de:	4914      	ldr	r1, [pc, #80]	; (403330 <wait_for_bootrom+0xd4>)
  4032e0:	4814      	ldr	r0, [pc, #80]	; (403334 <wait_for_bootrom+0xd8>)
  4032e2:	4c12      	ldr	r4, [pc, #72]	; (40332c <wait_for_bootrom+0xd0>)
  4032e4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4032e6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4032ea:	f241 008c 	movw	r0, #4236	; 0x108c
  4032ee:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4032f0:	2400      	movs	r4, #0
  4032f2:	e7e0      	b.n	4032b6 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4032f4:	490e      	ldr	r1, [pc, #56]	; (403330 <wait_for_bootrom+0xd4>)
  4032f6:	480f      	ldr	r0, [pc, #60]	; (403334 <wait_for_bootrom+0xd8>)
  4032f8:	4c0c      	ldr	r4, [pc, #48]	; (40332c <wait_for_bootrom+0xd0>)
  4032fa:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4032fc:	2100      	movs	r1, #0
  4032fe:	f241 008c 	movw	r0, #4236	; 0x108c
  403302:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403304:	2400      	movs	r4, #0
  403306:	e7d6      	b.n	4032b6 <wait_for_bootrom+0x5a>
  403308:	00403499 	.word	0x00403499
  40330c:	00401dc5 	.word	0x00401dc5
  403310:	000207bc 	.word	0x000207bc
  403314:	10add09e 	.word	0x10add09e
  403318:	00409170 	.word	0x00409170
  40331c:	00405ced 	.word	0x00405ced
  403320:	004031a9 	.word	0x004031a9
  403324:	00402fd9 	.word	0x00402fd9
  403328:	ef522f61 	.word	0xef522f61
  40332c:	004034b1 	.word	0x004034b1
  403330:	3c1cd57d 	.word	0x3c1cd57d
  403334:	000207ac 	.word	0x000207ac

00403338 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  403338:	b5f0      	push	{r4, r5, r6, r7, lr}
  40333a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  40333c:	f241 038c 	movw	r3, #4236	; 0x108c
  403340:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  403342:	4b18      	ldr	r3, [pc, #96]	; (4033a4 <wait_for_firmware_start+0x6c>)
  403344:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403346:	3802      	subs	r0, #2
  403348:	b2c0      	uxtb	r0, r0
  40334a:	2801      	cmp	r0, #1
  40334c:	d911      	bls.n	403372 <wait_for_firmware_start+0x3a>
{
  40334e:	f04f 34ff 	mov.w	r4, #4294967295
  403352:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403354:	2702      	movs	r7, #2
  403356:	4e14      	ldr	r6, [pc, #80]	; (4033a8 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403358:	4d14      	ldr	r5, [pc, #80]	; (4033ac <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  40335a:	9b00      	ldr	r3, [sp, #0]
  40335c:	4298      	cmp	r0, r3
  40335e:	d012      	beq.n	403386 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403360:	4638      	mov	r0, r7
  403362:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403364:	9801      	ldr	r0, [sp, #4]
  403366:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  403368:	3c01      	subs	r4, #1
  40336a:	d1f6      	bne.n	40335a <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  40336c:	f06f 0004 	mvn.w	r0, #4
  403370:	e00e      	b.n	403390 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403372:	4b0f      	ldr	r3, [pc, #60]	; (4033b0 <wait_for_firmware_start+0x78>)
  403374:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  403376:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40337a:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40337e:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403382:	9300      	str	r3, [sp, #0]
  403384:	e7e3      	b.n	40334e <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  403386:	9a00      	ldr	r2, [sp, #0]
  403388:	4b06      	ldr	r3, [pc, #24]	; (4033a4 <wait_for_firmware_start+0x6c>)
  40338a:	429a      	cmp	r2, r3
  40338c:	d002      	beq.n	403394 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  40338e:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403390:	b003      	add	sp, #12
  403392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403394:	2100      	movs	r1, #0
  403396:	f241 008c 	movw	r0, #4236	; 0x108c
  40339a:	4b06      	ldr	r3, [pc, #24]	; (4033b4 <wait_for_firmware_start+0x7c>)
  40339c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  40339e:	2000      	movs	r0, #0
  4033a0:	e7f6      	b.n	403390 <wait_for_firmware_start+0x58>
  4033a2:	bf00      	nop
  4033a4:	02532636 	.word	0x02532636
  4033a8:	00401dc5 	.word	0x00401dc5
  4033ac:	00403499 	.word	0x00403499
  4033b0:	000207ac 	.word	0x000207ac
  4033b4:	004034b1 	.word	0x004034b1

004033b8 <chip_deinit>:

sint8 chip_deinit(void)
{
  4033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033ba:	b083      	sub	sp, #12
	uint32 reg = 0;
  4033bc:	a902      	add	r1, sp, #8
  4033be:	2300      	movs	r3, #0
  4033c0:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4033c4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4033c8:	4b24      	ldr	r3, [pc, #144]	; (40345c <chip_deinit+0xa4>)
  4033ca:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4033cc:	bb20      	cbnz	r0, 403418 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  4033ce:	9901      	ldr	r1, [sp, #4]
  4033d0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4033d4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4033d6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4033da:	4b21      	ldr	r3, [pc, #132]	; (403460 <chip_deinit+0xa8>)
  4033dc:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4033de:	4605      	mov	r5, r0
  4033e0:	bb28      	cbnz	r0, 40342e <chip_deinit+0x76>
  4033e2:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4033e4:	4e1d      	ldr	r6, [pc, #116]	; (40345c <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4033e6:	4f1e      	ldr	r7, [pc, #120]	; (403460 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4033e8:	a901      	add	r1, sp, #4
  4033ea:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4033ee:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4033f0:	4605      	mov	r5, r0
  4033f2:	bb38      	cbnz	r0, 403444 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4033f4:	9901      	ldr	r1, [sp, #4]
  4033f6:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4033fa:	d00a      	beq.n	403412 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4033fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403400:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403402:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403406:	47b8      	blx	r7
  403408:	4605      	mov	r5, r0
  40340a:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  40340c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403410:	d1ea      	bne.n	4033e8 <chip_deinit+0x30>

	return ret;
}
  403412:	4628      	mov	r0, r5
  403414:	b003      	add	sp, #12
  403416:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  403418:	f240 2231 	movw	r2, #561	; 0x231
  40341c:	4911      	ldr	r1, [pc, #68]	; (403464 <chip_deinit+0xac>)
  40341e:	4812      	ldr	r0, [pc, #72]	; (403468 <chip_deinit+0xb0>)
  403420:	4c12      	ldr	r4, [pc, #72]	; (40346c <chip_deinit+0xb4>)
  403422:	47a0      	blx	r4
  403424:	4812      	ldr	r0, [pc, #72]	; (403470 <chip_deinit+0xb8>)
  403426:	47a0      	blx	r4
  403428:	4812      	ldr	r0, [pc, #72]	; (403474 <chip_deinit+0xbc>)
  40342a:	47a0      	blx	r4
  40342c:	e7cf      	b.n	4033ce <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  40342e:	f240 2237 	movw	r2, #567	; 0x237
  403432:	490c      	ldr	r1, [pc, #48]	; (403464 <chip_deinit+0xac>)
  403434:	480c      	ldr	r0, [pc, #48]	; (403468 <chip_deinit+0xb0>)
  403436:	4c0d      	ldr	r4, [pc, #52]	; (40346c <chip_deinit+0xb4>)
  403438:	47a0      	blx	r4
  40343a:	480f      	ldr	r0, [pc, #60]	; (403478 <chip_deinit+0xc0>)
  40343c:	47a0      	blx	r4
  40343e:	480d      	ldr	r0, [pc, #52]	; (403474 <chip_deinit+0xbc>)
  403440:	47a0      	blx	r4
		return ret;
  403442:	e7e6      	b.n	403412 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403444:	f240 223e 	movw	r2, #574	; 0x23e
  403448:	4906      	ldr	r1, [pc, #24]	; (403464 <chip_deinit+0xac>)
  40344a:	4807      	ldr	r0, [pc, #28]	; (403468 <chip_deinit+0xb0>)
  40344c:	4c07      	ldr	r4, [pc, #28]	; (40346c <chip_deinit+0xb4>)
  40344e:	47a0      	blx	r4
  403450:	480a      	ldr	r0, [pc, #40]	; (40347c <chip_deinit+0xc4>)
  403452:	47a0      	blx	r4
  403454:	4807      	ldr	r0, [pc, #28]	; (403474 <chip_deinit+0xbc>)
  403456:	47a0      	blx	r4
			return ret;
  403458:	e7db      	b.n	403412 <chip_deinit+0x5a>
  40345a:	bf00      	nop
  40345c:	004034a5 	.word	0x004034a5
  403460:	004034b1 	.word	0x004034b1
  403464:	004090ac 	.word	0x004090ac
  403468:	00408c6c 	.word	0x00408c6c
  40346c:	00405ced 	.word	0x00405ced
  403470:	004090b8 	.word	0x004090b8
  403474:	00408c98 	.word	0x00408c98
  403478:	004090d4 	.word	0x004090d4
  40347c:	004090f0 	.word	0x004090f0

00403480 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403480:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403482:	4b01      	ldr	r3, [pc, #4]	; (403488 <nm_bus_iface_init+0x8>)
  403484:	4798      	blx	r3

	return ret;
}
  403486:	bd08      	pop	{r3, pc}
  403488:	00401f39 	.word	0x00401f39

0040348c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  40348c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40348e:	4b01      	ldr	r3, [pc, #4]	; (403494 <nm_bus_iface_deinit+0x8>)
  403490:	4798      	blx	r3

	return ret;
}
  403492:	bd08      	pop	{r3, pc}
  403494:	00402129 	.word	0x00402129

00403498 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  403498:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40349a:	4b01      	ldr	r3, [pc, #4]	; (4034a0 <nm_read_reg+0x8>)
  40349c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40349e:	bd08      	pop	{r3, pc}
  4034a0:	00403ced 	.word	0x00403ced

004034a4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4034a4:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4034a6:	4b01      	ldr	r3, [pc, #4]	; (4034ac <nm_read_reg_with_ret+0x8>)
  4034a8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  4034aa:	bd08      	pop	{r3, pc}
  4034ac:	00403d05 	.word	0x00403d05

004034b0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4034b0:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4034b2:	4b01      	ldr	r3, [pc, #4]	; (4034b8 <nm_write_reg+0x8>)
  4034b4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4034b6:	bd08      	pop	{r3, pc}
  4034b8:	00403d1d 	.word	0x00403d1d

004034bc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4034bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4034c0:	4607      	mov	r7, r0
  4034c2:	4689      	mov	r9, r1
  4034c4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4034c6:	4b12      	ldr	r3, [pc, #72]	; (403510 <nm_read_block+0x54>)
  4034c8:	f8b3 8000 	ldrh.w	r8, [r3]
  4034cc:	f1a8 0808 	sub.w	r8, r8, #8
  4034d0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4034d4:	4542      	cmp	r2, r8
  4034d6:	d919      	bls.n	40350c <nm_read_block+0x50>
  4034d8:	4644      	mov	r4, r8
  4034da:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4034dc:	f8df a034 	ldr.w	sl, [pc, #52]	; 403514 <nm_read_block+0x58>
  4034e0:	4642      	mov	r2, r8
  4034e2:	eb09 0106 	add.w	r1, r9, r6
  4034e6:	4638      	mov	r0, r7
  4034e8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4034ea:	4603      	mov	r3, r0
  4034ec:	b958      	cbnz	r0, 403506 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4034ee:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4034f0:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4034f2:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4034f4:	42a5      	cmp	r5, r4
  4034f6:	d8f3      	bhi.n	4034e0 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4034f8:	b2aa      	uxth	r2, r5
  4034fa:	eb09 0106 	add.w	r1, r9, r6
  4034fe:	4638      	mov	r0, r7
  403500:	4b04      	ldr	r3, [pc, #16]	; (403514 <nm_read_block+0x58>)
  403502:	4798      	blx	r3
  403504:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403506:	4618      	mov	r0, r3
  403508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  40350c:	2600      	movs	r6, #0
  40350e:	e7f3      	b.n	4034f8 <nm_read_block+0x3c>
  403510:	20400010 	.word	0x20400010
  403514:	00403e49 	.word	0x00403e49

00403518 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40351c:	4607      	mov	r7, r0
  40351e:	4689      	mov	r9, r1
  403520:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403522:	4b12      	ldr	r3, [pc, #72]	; (40356c <nm_write_block+0x54>)
  403524:	f8b3 8000 	ldrh.w	r8, [r3]
  403528:	f1a8 0808 	sub.w	r8, r8, #8
  40352c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403530:	4542      	cmp	r2, r8
  403532:	d919      	bls.n	403568 <nm_write_block+0x50>
  403534:	4644      	mov	r4, r8
  403536:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403538:	f8df a034 	ldr.w	sl, [pc, #52]	; 403570 <nm_write_block+0x58>
  40353c:	4642      	mov	r2, r8
  40353e:	eb09 0106 	add.w	r1, r9, r6
  403542:	4638      	mov	r0, r7
  403544:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403546:	4603      	mov	r3, r0
  403548:	b958      	cbnz	r0, 403562 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40354a:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40354c:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40354e:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403550:	42a5      	cmp	r5, r4
  403552:	d8f3      	bhi.n	40353c <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403554:	b2aa      	uxth	r2, r5
  403556:	eb09 0106 	add.w	r1, r9, r6
  40355a:	4638      	mov	r0, r7
  40355c:	4b04      	ldr	r3, [pc, #16]	; (403570 <nm_write_block+0x58>)
  40355e:	4798      	blx	r3
  403560:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403562:	4618      	mov	r0, r3
  403564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403568:	2600      	movs	r6, #0
  40356a:	e7f3      	b.n	403554 <nm_write_block+0x3c>
  40356c:	20400010 	.word	0x20400010
  403570:	00403f11 	.word	0x00403f11

00403574 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403574:	b530      	push	{r4, r5, lr}
  403576:	b083      	sub	sp, #12
  403578:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40357a:	a902      	add	r1, sp, #8
  40357c:	2300      	movs	r3, #0
  40357e:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403582:	4824      	ldr	r0, [pc, #144]	; (403614 <nm_get_firmware_info+0xa0>)
  403584:	4b24      	ldr	r3, [pc, #144]	; (403618 <nm_get_firmware_info+0xa4>)
  403586:	4798      	blx	r3
  403588:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40358a:	9a01      	ldr	r2, [sp, #4]
  40358c:	4b23      	ldr	r3, [pc, #140]	; (40361c <nm_get_firmware_info+0xa8>)
  40358e:	429a      	cmp	r2, r3
  403590:	d039      	beq.n	403606 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403592:	9b01      	ldr	r3, [sp, #4]
  403594:	0c1a      	lsrs	r2, r3, #16
  403596:	b291      	uxth	r1, r2
  403598:	0a08      	lsrs	r0, r1, #8
  40359a:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40359c:	f3c1 1103 	ubfx	r1, r1, #4, #4
  4035a0:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  4035a2:	f002 020f 	and.w	r2, r2, #15
  4035a6:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  4035a8:	b29a      	uxth	r2, r3
  4035aa:	0a11      	lsrs	r1, r2, #8
  4035ac:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4035ae:	f3c2 1203 	ubfx	r2, r2, #4, #4
  4035b2:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4035b4:	f003 030f 	and.w	r3, r3, #15
  4035b8:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  4035ba:	4b19      	ldr	r3, [pc, #100]	; (403620 <nm_get_firmware_info+0xac>)
  4035bc:	4798      	blx	r3
  4035be:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4035c0:	7922      	ldrb	r2, [r4, #4]
  4035c2:	79a3      	ldrb	r3, [r4, #6]
  4035c4:	f003 030f 	and.w	r3, r3, #15
  4035c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4035cc:	7962      	ldrb	r2, [r4, #5]
  4035ce:	0112      	lsls	r2, r2, #4
  4035d0:	b2d2      	uxtb	r2, r2
  4035d2:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  4035d4:	79e1      	ldrb	r1, [r4, #7]
  4035d6:	7a62      	ldrb	r2, [r4, #9]
  4035d8:	f002 020f 	and.w	r2, r2, #15
  4035dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4035e0:	7a21      	ldrb	r1, [r4, #8]
  4035e2:	0109      	lsls	r1, r1, #4
  4035e4:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4035e6:	430a      	orrs	r2, r1
  4035e8:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4035ec:	428a      	cmp	r2, r1
  4035ee:	bf88      	it	hi
  4035f0:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4035f4:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4035f8:	4293      	cmp	r3, r2
	}
	return ret;
}
  4035fa:	bf8c      	ite	hi
  4035fc:	4628      	movhi	r0, r5
  4035fe:	f06f 000c 	mvnls.w	r0, #12
  403602:	b003      	add	sp, #12
  403604:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  403606:	a901      	add	r1, sp, #4
  403608:	f241 0048 	movw	r0, #4168	; 0x1048
  40360c:	4b02      	ldr	r3, [pc, #8]	; (403618 <nm_get_firmware_info+0xa4>)
  40360e:	4798      	blx	r3
  403610:	4605      	mov	r5, r0
  403612:	e7be      	b.n	403592 <nm_get_firmware_info+0x1e>
  403614:	000207ac 	.word	0x000207ac
  403618:	004034a5 	.word	0x004034a5
  40361c:	d75dc1c3 	.word	0xd75dc1c3
  403620:	004031a9 	.word	0x004031a9

00403624 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403624:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403626:	2800      	cmp	r0, #0
  403628:	d037      	beq.n	40369a <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  40362a:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  40362c:	1e63      	subs	r3, r4, #1
  40362e:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403630:	2b04      	cmp	r3, #4
  403632:	bf28      	it	cs
  403634:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403636:	2000      	movs	r0, #0
  403638:	4b1e      	ldr	r3, [pc, #120]	; (4036b4 <nm_drv_init+0x90>)
  40363a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40363c:	4605      	mov	r5, r0
  40363e:	2800      	cmp	r0, #0
  403640:	d12d      	bne.n	40369e <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403642:	481d      	ldr	r0, [pc, #116]	; (4036b8 <nm_drv_init+0x94>)
  403644:	4d1d      	ldr	r5, [pc, #116]	; (4036bc <nm_drv_init+0x98>)
  403646:	47a8      	blx	r5
  403648:	4b1d      	ldr	r3, [pc, #116]	; (4036c0 <nm_drv_init+0x9c>)
  40364a:	4798      	blx	r3
  40364c:	4601      	mov	r1, r0
  40364e:	481d      	ldr	r0, [pc, #116]	; (4036c4 <nm_drv_init+0xa0>)
  403650:	47a8      	blx	r5
  403652:	481d      	ldr	r0, [pc, #116]	; (4036c8 <nm_drv_init+0xa4>)
  403654:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403656:	4b1d      	ldr	r3, [pc, #116]	; (4036cc <nm_drv_init+0xa8>)
  403658:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  40365a:	4620      	mov	r0, r4
  40365c:	4b1c      	ldr	r3, [pc, #112]	; (4036d0 <nm_drv_init+0xac>)
  40365e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403660:	4605      	mov	r5, r0
  403662:	b9b0      	cbnz	r0, 403692 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403664:	4620      	mov	r0, r4
  403666:	4b1b      	ldr	r3, [pc, #108]	; (4036d4 <nm_drv_init+0xb0>)
  403668:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40366a:	4605      	mov	r5, r0
  40366c:	b988      	cbnz	r0, 403692 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  40366e:	3c02      	subs	r4, #2
  403670:	b2e4      	uxtb	r4, r4
  403672:	2c01      	cmp	r4, #1
  403674:	d90f      	bls.n	403696 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403676:	4b18      	ldr	r3, [pc, #96]	; (4036d8 <nm_drv_init+0xb4>)
  403678:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40367a:	4605      	mov	r5, r0
  40367c:	b158      	cbz	r0, 403696 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  40367e:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403682:	4916      	ldr	r1, [pc, #88]	; (4036dc <nm_drv_init+0xb8>)
  403684:	4816      	ldr	r0, [pc, #88]	; (4036e0 <nm_drv_init+0xbc>)
  403686:	4c0d      	ldr	r4, [pc, #52]	; (4036bc <nm_drv_init+0x98>)
  403688:	47a0      	blx	r4
  40368a:	4816      	ldr	r0, [pc, #88]	; (4036e4 <nm_drv_init+0xc0>)
  40368c:	47a0      	blx	r4
  40368e:	480e      	ldr	r0, [pc, #56]	; (4036c8 <nm_drv_init+0xa4>)
  403690:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403692:	4b15      	ldr	r3, [pc, #84]	; (4036e8 <nm_drv_init+0xc4>)
  403694:	4798      	blx	r3
ERR1:
	return ret;
}
  403696:	4628      	mov	r0, r5
  403698:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  40369a:	2401      	movs	r4, #1
  40369c:	e7cb      	b.n	403636 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  40369e:	f44f 7292 	mov.w	r2, #292	; 0x124
  4036a2:	490e      	ldr	r1, [pc, #56]	; (4036dc <nm_drv_init+0xb8>)
  4036a4:	480e      	ldr	r0, [pc, #56]	; (4036e0 <nm_drv_init+0xbc>)
  4036a6:	4c05      	ldr	r4, [pc, #20]	; (4036bc <nm_drv_init+0x98>)
  4036a8:	47a0      	blx	r4
  4036aa:	4810      	ldr	r0, [pc, #64]	; (4036ec <nm_drv_init+0xc8>)
  4036ac:	47a0      	blx	r4
  4036ae:	4806      	ldr	r0, [pc, #24]	; (4036c8 <nm_drv_init+0xa4>)
  4036b0:	47a0      	blx	r4
		goto ERR1;
  4036b2:	e7f0      	b.n	403696 <nm_drv_init+0x72>
  4036b4:	00403481 	.word	0x00403481
  4036b8:	00408f40 	.word	0x00408f40
  4036bc:	00405ced 	.word	0x00405ced
  4036c0:	004031a9 	.word	0x004031a9
  4036c4:	00409238 	.word	0x00409238
  4036c8:	00408c98 	.word	0x00408c98
  4036cc:	00403d35 	.word	0x00403d35
  4036d0:	0040325d 	.word	0x0040325d
  4036d4:	00403339 	.word	0x00403339
  4036d8:	00403141 	.word	0x00403141
  4036dc:	00409180 	.word	0x00409180
  4036e0:	00408c6c 	.word	0x00408c6c
  4036e4:	004091fc 	.word	0x004091fc
  4036e8:	0040348d 	.word	0x0040348d
  4036ec:	0040921c 	.word	0x0040921c

004036f0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  4036f0:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  4036f2:	4b19      	ldr	r3, [pc, #100]	; (403758 <nm_drv_deinit+0x68>)
  4036f4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4036f6:	b958      	cbnz	r0, 403710 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  4036f8:	2000      	movs	r0, #0
  4036fa:	4b18      	ldr	r3, [pc, #96]	; (40375c <nm_drv_deinit+0x6c>)
  4036fc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4036fe:	4604      	mov	r4, r0
  403700:	b998      	cbnz	r0, 40372a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  403702:	4b17      	ldr	r3, [pc, #92]	; (403760 <nm_drv_deinit+0x70>)
  403704:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403706:	4604      	mov	r4, r0
  403708:	b9d0      	cbnz	r0, 403740 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  40370a:	4b16      	ldr	r3, [pc, #88]	; (403764 <nm_drv_deinit+0x74>)
  40370c:	4798      	blx	r3
  40370e:	e00a      	b.n	403726 <nm_drv_deinit+0x36>
  403710:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403712:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403716:	4914      	ldr	r1, [pc, #80]	; (403768 <nm_drv_deinit+0x78>)
  403718:	4814      	ldr	r0, [pc, #80]	; (40376c <nm_drv_deinit+0x7c>)
  40371a:	4d15      	ldr	r5, [pc, #84]	; (403770 <nm_drv_deinit+0x80>)
  40371c:	47a8      	blx	r5
  40371e:	4815      	ldr	r0, [pc, #84]	; (403774 <nm_drv_deinit+0x84>)
  403720:	47a8      	blx	r5
  403722:	4815      	ldr	r0, [pc, #84]	; (403778 <nm_drv_deinit+0x88>)
  403724:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403726:	4620      	mov	r0, r4
  403728:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  40372a:	f240 127b 	movw	r2, #379	; 0x17b
  40372e:	490e      	ldr	r1, [pc, #56]	; (403768 <nm_drv_deinit+0x78>)
  403730:	480e      	ldr	r0, [pc, #56]	; (40376c <nm_drv_deinit+0x7c>)
  403732:	4d0f      	ldr	r5, [pc, #60]	; (403770 <nm_drv_deinit+0x80>)
  403734:	47a8      	blx	r5
  403736:	4811      	ldr	r0, [pc, #68]	; (40377c <nm_drv_deinit+0x8c>)
  403738:	47a8      	blx	r5
  40373a:	480f      	ldr	r0, [pc, #60]	; (403778 <nm_drv_deinit+0x88>)
  40373c:	47a8      	blx	r5
		goto ERR1;
  40373e:	e7f2      	b.n	403726 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403740:	f240 1281 	movw	r2, #385	; 0x181
  403744:	4908      	ldr	r1, [pc, #32]	; (403768 <nm_drv_deinit+0x78>)
  403746:	4809      	ldr	r0, [pc, #36]	; (40376c <nm_drv_deinit+0x7c>)
  403748:	4d09      	ldr	r5, [pc, #36]	; (403770 <nm_drv_deinit+0x80>)
  40374a:	47a8      	blx	r5
  40374c:	480c      	ldr	r0, [pc, #48]	; (403780 <nm_drv_deinit+0x90>)
  40374e:	47a8      	blx	r5
  403750:	4809      	ldr	r0, [pc, #36]	; (403778 <nm_drv_deinit+0x88>)
  403752:	47a8      	blx	r5
		goto ERR1;
  403754:	e7e7      	b.n	403726 <nm_drv_deinit+0x36>
  403756:	bf00      	nop
  403758:	004033b9 	.word	0x004033b9
  40375c:	00404839 	.word	0x00404839
  403760:	0040348d 	.word	0x0040348d
  403764:	00403ce1 	.word	0x00403ce1
  403768:	0040918c 	.word	0x0040918c
  40376c:	00408c6c 	.word	0x00408c6c
  403770:	00405ced 	.word	0x00405ced
  403774:	0040919c 	.word	0x0040919c
  403778:	00408c98 	.word	0x00408c98
  40377c:	004091bc 	.word	0x004091bc
  403780:	004091e0 	.word	0x004091e0

00403784 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403784:	b500      	push	{lr}
  403786:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403788:	2300      	movs	r3, #0
  40378a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  40378c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  40378e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403792:	a901      	add	r1, sp, #4
  403794:	2003      	movs	r0, #3
  403796:	4b02      	ldr	r3, [pc, #8]	; (4037a0 <nmi_spi_read+0x1c>)
  403798:	4798      	blx	r3
}
  40379a:	b005      	add	sp, #20
  40379c:	f85d fb04 	ldr.w	pc, [sp], #4
  4037a0:	00402055 	.word	0x00402055

004037a4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  4037a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037a8:	b082      	sub	sp, #8
  4037aa:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  4037ac:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  4037b0:	b2db      	uxtb	r3, r3
  4037b2:	2b01      	cmp	r3, #1
  4037b4:	d927      	bls.n	403806 <spi_cmd_rsp+0x62>
  4037b6:	28cf      	cmp	r0, #207	; 0xcf
  4037b8:	d025      	beq.n	403806 <spi_cmd_rsp+0x62>
{
  4037ba:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4037bc:	f04f 0801 	mov.w	r8, #1
  4037c0:	4f23      	ldr	r7, [pc, #140]	; (403850 <spi_cmd_rsp+0xac>)
  4037c2:	4641      	mov	r1, r8
  4037c4:	f10d 0007 	add.w	r0, sp, #7
  4037c8:	47b8      	blx	r7
  4037ca:	4606      	mov	r6, r0
  4037cc:	bb20      	cbnz	r0, 403818 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  4037ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4037d2:	42ab      	cmp	r3, r5
  4037d4:	d02c      	beq.n	403830 <spi_cmd_rsp+0x8c>
  4037d6:	1e63      	subs	r3, r4, #1
  4037d8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4037dc:	d1f1      	bne.n	4037c2 <spi_cmd_rsp+0x1e>
  4037de:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4037e0:	2701      	movs	r7, #1
  4037e2:	4d1b      	ldr	r5, [pc, #108]	; (403850 <spi_cmd_rsp+0xac>)
  4037e4:	4639      	mov	r1, r7
  4037e6:	f10d 0007 	add.w	r0, sp, #7
  4037ea:	47a8      	blx	r5
  4037ec:	bb10      	cbnz	r0, 403834 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  4037ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4037f2:	b353      	cbz	r3, 40384a <spi_cmd_rsp+0xa6>
  4037f4:	1e63      	subs	r3, r4, #1
  4037f6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4037fa:	d1f3      	bne.n	4037e4 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  4037fc:	2601      	movs	r6, #1

_fail_:

	return result;
}
  4037fe:	4630      	mov	r0, r6
  403800:	b002      	add	sp, #8
  403802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403806:	2101      	movs	r1, #1
  403808:	f10d 0007 	add.w	r0, sp, #7
  40380c:	4b10      	ldr	r3, [pc, #64]	; (403850 <spi_cmd_rsp+0xac>)
  40380e:	4798      	blx	r3
  403810:	2800      	cmp	r0, #0
  403812:	d0d2      	beq.n	4037ba <spi_cmd_rsp+0x16>
			result = N_FAIL;
  403814:	2600      	movs	r6, #0
  403816:	e7f2      	b.n	4037fe <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403818:	f240 1227 	movw	r2, #295	; 0x127
  40381c:	490d      	ldr	r1, [pc, #52]	; (403854 <spi_cmd_rsp+0xb0>)
  40381e:	480e      	ldr	r0, [pc, #56]	; (403858 <spi_cmd_rsp+0xb4>)
  403820:	4c0e      	ldr	r4, [pc, #56]	; (40385c <spi_cmd_rsp+0xb8>)
  403822:	47a0      	blx	r4
  403824:	480e      	ldr	r0, [pc, #56]	; (403860 <spi_cmd_rsp+0xbc>)
  403826:	47a0      	blx	r4
  403828:	480e      	ldr	r0, [pc, #56]	; (403864 <spi_cmd_rsp+0xc0>)
  40382a:	47a0      	blx	r4
			result = N_FAIL;
  40382c:	2600      	movs	r6, #0
			goto _fail_;
  40382e:	e7e6      	b.n	4037fe <spi_cmd_rsp+0x5a>
  403830:	240b      	movs	r4, #11
  403832:	e7d5      	b.n	4037e0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403834:	f240 1235 	movw	r2, #309	; 0x135
  403838:	4906      	ldr	r1, [pc, #24]	; (403854 <spi_cmd_rsp+0xb0>)
  40383a:	4807      	ldr	r0, [pc, #28]	; (403858 <spi_cmd_rsp+0xb4>)
  40383c:	4c07      	ldr	r4, [pc, #28]	; (40385c <spi_cmd_rsp+0xb8>)
  40383e:	47a0      	blx	r4
  403840:	4807      	ldr	r0, [pc, #28]	; (403860 <spi_cmd_rsp+0xbc>)
  403842:	47a0      	blx	r4
  403844:	4807      	ldr	r0, [pc, #28]	; (403864 <spi_cmd_rsp+0xc0>)
  403846:	47a0      	blx	r4
			goto _fail_;
  403848:	e7d9      	b.n	4037fe <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  40384a:	2601      	movs	r6, #1
  40384c:	e7d7      	b.n	4037fe <spi_cmd_rsp+0x5a>
  40384e:	bf00      	nop
  403850:	00403785 	.word	0x00403785
  403854:	00409250 	.word	0x00409250
  403858:	00408c6c 	.word	0x00408c6c
  40385c:	00405ced 	.word	0x00405ced
  403860:	00409690 	.word	0x00409690
  403864:	00408c98 	.word	0x00408c98

00403868 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40386c:	b085      	sub	sp, #20
  40386e:	4683      	mov	fp, r0
  403870:	468a      	mov	sl, r1
  403872:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403874:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403878:	4d37      	ldr	r5, [pc, #220]	; (403958 <spi_data_read+0xf0>)
  40387a:	e027      	b.n	4038cc <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  40387c:	f240 1257 	movw	r2, #343	; 0x157
  403880:	4936      	ldr	r1, [pc, #216]	; (40395c <spi_data_read+0xf4>)
  403882:	4837      	ldr	r0, [pc, #220]	; (403960 <spi_data_read+0xf8>)
  403884:	4c37      	ldr	r4, [pc, #220]	; (403964 <spi_data_read+0xfc>)
  403886:	47a0      	blx	r4
  403888:	4837      	ldr	r0, [pc, #220]	; (403968 <spi_data_read+0x100>)
  40388a:	47a0      	blx	r4
  40388c:	4837      	ldr	r0, [pc, #220]	; (40396c <spi_data_read+0x104>)
  40388e:	47a0      	blx	r4
  403890:	2300      	movs	r3, #0
  403892:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403894:	9801      	ldr	r0, [sp, #4]
  403896:	b005      	add	sp, #20
  403898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  40389c:	2c00      	cmp	r4, #0
  40389e:	dd2e      	ble.n	4038fe <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  4038a0:	4641      	mov	r1, r8
  4038a2:	eb0b 0009 	add.w	r0, fp, r9
  4038a6:	47a8      	blx	r5
  4038a8:	4604      	mov	r4, r0
  4038aa:	2800      	cmp	r0, #0
  4038ac:	d134      	bne.n	403918 <spi_data_read+0xb0>
		if(!clockless)
  4038ae:	b91f      	cbnz	r7, 4038b8 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  4038b0:	4b2f      	ldr	r3, [pc, #188]	; (403970 <spi_data_read+0x108>)
  4038b2:	781b      	ldrb	r3, [r3, #0]
  4038b4:	2b00      	cmp	r3, #0
  4038b6:	d03a      	beq.n	40392e <spi_data_read+0xc6>
		ix += nbytes;
  4038b8:	44c1      	add	r9, r8
  4038ba:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  4038be:	ebaa 0a08 	sub.w	sl, sl, r8
  4038c2:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  4038c6:	f1ba 0f00 	cmp.w	sl, #0
  4038ca:	d041      	beq.n	403950 <spi_data_read+0xe8>
  4038cc:	46d0      	mov	r8, sl
  4038ce:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  4038d2:	bf28      	it	cs
  4038d4:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  4038d8:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4038da:	2601      	movs	r6, #1
  4038dc:	4631      	mov	r1, r6
  4038de:	f10d 000b 	add.w	r0, sp, #11
  4038e2:	47a8      	blx	r5
  4038e4:	9001      	str	r0, [sp, #4]
  4038e6:	2800      	cmp	r0, #0
  4038e8:	d1c8      	bne.n	40387c <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  4038ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4038ee:	091b      	lsrs	r3, r3, #4
  4038f0:	2b0f      	cmp	r3, #15
  4038f2:	d0d3      	beq.n	40389c <spi_data_read+0x34>
  4038f4:	3c01      	subs	r4, #1
  4038f6:	b224      	sxth	r4, r4
		} while (retry--);
  4038f8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4038fc:	d1ee      	bne.n	4038dc <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  4038fe:	f240 1263 	movw	r2, #355	; 0x163
  403902:	4916      	ldr	r1, [pc, #88]	; (40395c <spi_data_read+0xf4>)
  403904:	4816      	ldr	r0, [pc, #88]	; (403960 <spi_data_read+0xf8>)
  403906:	4c17      	ldr	r4, [pc, #92]	; (403964 <spi_data_read+0xfc>)
  403908:	47a0      	blx	r4
  40390a:	f89d 100b 	ldrb.w	r1, [sp, #11]
  40390e:	4819      	ldr	r0, [pc, #100]	; (403974 <spi_data_read+0x10c>)
  403910:	47a0      	blx	r4
  403912:	4816      	ldr	r0, [pc, #88]	; (40396c <spi_data_read+0x104>)
  403914:	47a0      	blx	r4
			break;
  403916:	e7bd      	b.n	403894 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403918:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  40391c:	490f      	ldr	r1, [pc, #60]	; (40395c <spi_data_read+0xf4>)
  40391e:	4810      	ldr	r0, [pc, #64]	; (403960 <spi_data_read+0xf8>)
  403920:	4c10      	ldr	r4, [pc, #64]	; (403964 <spi_data_read+0xfc>)
  403922:	47a0      	blx	r4
  403924:	4814      	ldr	r0, [pc, #80]	; (403978 <spi_data_read+0x110>)
  403926:	47a0      	blx	r4
  403928:	4810      	ldr	r0, [pc, #64]	; (40396c <spi_data_read+0x104>)
  40392a:	47a0      	blx	r4
			break;
  40392c:	e7b2      	b.n	403894 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  40392e:	2102      	movs	r1, #2
  403930:	a803      	add	r0, sp, #12
  403932:	47a8      	blx	r5
  403934:	2800      	cmp	r0, #0
  403936:	d0bf      	beq.n	4038b8 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403938:	f240 1277 	movw	r2, #375	; 0x177
  40393c:	4907      	ldr	r1, [pc, #28]	; (40395c <spi_data_read+0xf4>)
  40393e:	4808      	ldr	r0, [pc, #32]	; (403960 <spi_data_read+0xf8>)
  403940:	4d08      	ldr	r5, [pc, #32]	; (403964 <spi_data_read+0xfc>)
  403942:	47a8      	blx	r5
  403944:	480d      	ldr	r0, [pc, #52]	; (40397c <spi_data_read+0x114>)
  403946:	47a8      	blx	r5
  403948:	4808      	ldr	r0, [pc, #32]	; (40396c <spi_data_read+0x104>)
  40394a:	47a8      	blx	r5
					result = N_FAIL;
  40394c:	9401      	str	r4, [sp, #4]
					break;
  40394e:	e7a1      	b.n	403894 <spi_data_read+0x2c>
  403950:	2301      	movs	r3, #1
  403952:	9301      	str	r3, [sp, #4]
  403954:	e79e      	b.n	403894 <spi_data_read+0x2c>
  403956:	bf00      	nop
  403958:	00403785 	.word	0x00403785
  40395c:	0040925c 	.word	0x0040925c
  403960:	00408c6c 	.word	0x00408c6c
  403964:	00405ced 	.word	0x00405ced
  403968:	004096c4 	.word	0x004096c4
  40396c:	00408c98 	.word	0x00408c98
  403970:	2040c360 	.word	0x2040c360
  403974:	004096f8 	.word	0x004096f8
  403978:	00409728 	.word	0x00409728
  40397c:	0040975c 	.word	0x0040975c

00403980 <nmi_spi_write>:
{
  403980:	b500      	push	{lr}
  403982:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403984:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403986:	2300      	movs	r3, #0
  403988:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  40398a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  40398e:	a901      	add	r1, sp, #4
  403990:	2003      	movs	r0, #3
  403992:	4b02      	ldr	r3, [pc, #8]	; (40399c <nmi_spi_write+0x1c>)
  403994:	4798      	blx	r3
}
  403996:	b005      	add	sp, #20
  403998:	f85d fb04 	ldr.w	pc, [sp], #4
  40399c:	00402055 	.word	0x00402055

004039a0 <spi_cmd>:
{
  4039a0:	b570      	push	{r4, r5, r6, lr}
  4039a2:	b084      	sub	sp, #16
  4039a4:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  4039a8:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  4039ac:	38c1      	subs	r0, #193	; 0xc1
  4039ae:	280e      	cmp	r0, #14
  4039b0:	f200 80a2 	bhi.w	403af8 <spi_cmd+0x158>
  4039b4:	e8df f000 	tbb	[pc, r0]
  4039b8:	19664545 	.word	0x19664545
  4039bc:	5454332a 	.word	0x5454332a
  4039c0:	a0a0087f 	.word	0xa0a0087f
  4039c4:	a0a0      	.short	0xa0a0
  4039c6:	3c          	.byte	0x3c
  4039c7:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  4039c8:	0c0b      	lsrs	r3, r1, #16
  4039ca:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4039ce:	0a0b      	lsrs	r3, r1, #8
  4039d0:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  4039d4:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  4039d8:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  4039da:	4b55      	ldr	r3, [pc, #340]	; (403b30 <spi_cmd+0x190>)
  4039dc:	781b      	ldrb	r3, [r3, #0]
  4039de:	2b00      	cmp	r3, #0
  4039e0:	f000 808c 	beq.w	403afc <spi_cmd+0x15c>
			len-=1;
  4039e4:	3901      	subs	r1, #1
  4039e6:	b2c9      	uxtb	r1, r1
  4039e8:	e09a      	b.n	403b20 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  4039ea:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  4039ee:	b944      	cbnz	r4, 403a02 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  4039f0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  4039f4:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  4039f8:	2300      	movs	r3, #0
  4039fa:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4039fe:	2105      	movs	r1, #5
		break;
  403a00:	e7eb      	b.n	4039da <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403a06:	f88d 3005 	strb.w	r3, [sp, #5]
  403a0a:	e7f3      	b.n	4039f4 <spi_cmd+0x54>
		bc[1] = 0x00;
  403a0c:	2300      	movs	r3, #0
  403a0e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403a12:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403a16:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403a1a:	2105      	movs	r1, #5
		break;
  403a1c:	e7dd      	b.n	4039da <spi_cmd+0x3a>
		bc[1] = 0x00;
  403a1e:	2300      	movs	r3, #0
  403a20:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403a24:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403a28:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403a2c:	2105      	movs	r1, #5
		break;
  403a2e:	e7d4      	b.n	4039da <spi_cmd+0x3a>
		bc[1] = 0xff;
  403a30:	23ff      	movs	r3, #255	; 0xff
  403a32:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403a36:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403a3a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403a3e:	2105      	movs	r1, #5
		break;
  403a40:	e7cb      	b.n	4039da <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403a42:	0c0a      	lsrs	r2, r1, #16
  403a44:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403a48:	0a0a      	lsrs	r2, r1, #8
  403a4a:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403a4e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403a52:	0a1a      	lsrs	r2, r3, #8
  403a54:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403a58:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403a5c:	2107      	movs	r1, #7
		break;
  403a5e:	e7bc      	b.n	4039da <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403a60:	0c0a      	lsrs	r2, r1, #16
  403a62:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403a66:	0a0a      	lsrs	r2, r1, #8
  403a68:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403a6c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403a70:	0c1a      	lsrs	r2, r3, #16
  403a72:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403a76:	0a1a      	lsrs	r2, r3, #8
  403a78:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403a7c:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403a80:	2108      	movs	r1, #8
		break;
  403a82:	e7aa      	b.n	4039da <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403a84:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403a88:	b984      	cbnz	r4, 403aac <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  403a8a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403a8e:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403a92:	0e13      	lsrs	r3, r2, #24
  403a94:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403a98:	0c13      	lsrs	r3, r2, #16
  403a9a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403a9e:	0a13      	lsrs	r3, r2, #8
  403aa0:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403aa4:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403aa8:	2108      	movs	r1, #8
		break;
  403aaa:	e796      	b.n	4039da <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403aac:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403ab0:	f88d 3005 	strb.w	r3, [sp, #5]
  403ab4:	e7eb      	b.n	403a8e <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403ab6:	0c0b      	lsrs	r3, r1, #16
  403ab8:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403abc:	0a0b      	lsrs	r3, r1, #8
  403abe:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403ac2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403ac6:	0e13      	lsrs	r3, r2, #24
  403ac8:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403acc:	0c13      	lsrs	r3, r2, #16
  403ace:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403ad2:	0a13      	lsrs	r3, r2, #8
  403ad4:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403ad8:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403adc:	2109      	movs	r1, #9
		break;
  403ade:	e77c      	b.n	4039da <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403ae0:	f44f 7284 	mov.w	r2, #264	; 0x108
  403ae4:	4913      	ldr	r1, [pc, #76]	; (403b34 <spi_cmd+0x194>)
  403ae6:	4814      	ldr	r0, [pc, #80]	; (403b38 <spi_cmd+0x198>)
  403ae8:	4c14      	ldr	r4, [pc, #80]	; (403b3c <spi_cmd+0x19c>)
  403aea:	47a0      	blx	r4
  403aec:	4814      	ldr	r0, [pc, #80]	; (403b40 <spi_cmd+0x1a0>)
  403aee:	47a0      	blx	r4
  403af0:	4814      	ldr	r0, [pc, #80]	; (403b44 <spi_cmd+0x1a4>)
  403af2:	47a0      	blx	r4
			result = N_FAIL;
  403af4:	2000      	movs	r0, #0
  403af6:	e019      	b.n	403b2c <spi_cmd+0x18c>
	switch (cmd) {
  403af8:	2000      	movs	r0, #0
  403afa:	e017      	b.n	403b2c <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403afc:	1e4e      	subs	r6, r1, #1
  403afe:	ab01      	add	r3, sp, #4
  403b00:	199d      	adds	r5, r3, r6
  403b02:	207f      	movs	r0, #127	; 0x7f
  403b04:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  403b06:	4c10      	ldr	r4, [pc, #64]	; (403b48 <spi_cmd+0x1a8>)
  403b08:	f812 3b01 	ldrb.w	r3, [r2], #1
  403b0c:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403b10:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  403b12:	4295      	cmp	r5, r2
  403b14:	d1f8      	bne.n	403b08 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403b16:	ab04      	add	r3, sp, #16
  403b18:	441e      	add	r6, r3
  403b1a:	0043      	lsls	r3, r0, #1
  403b1c:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403b20:	a801      	add	r0, sp, #4
  403b22:	4b0a      	ldr	r3, [pc, #40]	; (403b4c <spi_cmd+0x1ac>)
  403b24:	4798      	blx	r3
  403b26:	2800      	cmp	r0, #0
  403b28:	d1da      	bne.n	403ae0 <spi_cmd+0x140>
  403b2a:	2001      	movs	r0, #1
}
  403b2c:	b004      	add	sp, #16
  403b2e:	bd70      	pop	{r4, r5, r6, pc}
  403b30:	2040c360 	.word	0x2040c360
  403b34:	00409248 	.word	0x00409248
  403b38:	00408c6c 	.word	0x00408c6c
  403b3c:	00405ced 	.word	0x00405ced
  403b40:	00409664 	.word	0x00409664
  403b44:	00408c98 	.word	0x00408c98
  403b48:	004092c4 	.word	0x004092c4
  403b4c:	00403981 	.word	0x00403981

00403b50 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403b50:	b570      	push	{r4, r5, r6, lr}
  403b52:	b082      	sub	sp, #8
  403b54:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403b56:	2831      	cmp	r0, #49	; 0x31
  403b58:	bf35      	itete	cc
  403b5a:	2301      	movcc	r3, #1
  403b5c:	2300      	movcs	r3, #0
  403b5e:	25c3      	movcc	r5, #195	; 0xc3
  403b60:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403b62:	9300      	str	r3, [sp, #0]
  403b64:	2304      	movs	r3, #4
  403b66:	460a      	mov	r2, r1
  403b68:	4601      	mov	r1, r0
  403b6a:	4628      	mov	r0, r5
  403b6c:	4e15      	ldr	r6, [pc, #84]	; (403bc4 <spi_write_reg+0x74>)
  403b6e:	47b0      	blx	r6
	if (result != N_OK) {
  403b70:	2801      	cmp	r0, #1
  403b72:	d00d      	beq.n	403b90 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  403b74:	f240 12eb 	movw	r2, #491	; 0x1eb
  403b78:	4913      	ldr	r1, [pc, #76]	; (403bc8 <spi_write_reg+0x78>)
  403b7a:	4814      	ldr	r0, [pc, #80]	; (403bcc <spi_write_reg+0x7c>)
  403b7c:	4d14      	ldr	r5, [pc, #80]	; (403bd0 <spi_write_reg+0x80>)
  403b7e:	47a8      	blx	r5
  403b80:	4621      	mov	r1, r4
  403b82:	4814      	ldr	r0, [pc, #80]	; (403bd4 <spi_write_reg+0x84>)
  403b84:	47a8      	blx	r5
  403b86:	4814      	ldr	r0, [pc, #80]	; (403bd8 <spi_write_reg+0x88>)
  403b88:	47a8      	blx	r5
		return N_FAIL;
  403b8a:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  403b8c:	b002      	add	sp, #8
  403b8e:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  403b90:	4628      	mov	r0, r5
  403b92:	4b12      	ldr	r3, [pc, #72]	; (403bdc <spi_write_reg+0x8c>)
  403b94:	4798      	blx	r3
	if (result != N_OK) {
  403b96:	2801      	cmp	r0, #1
  403b98:	d0f8      	beq.n	403b8c <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403b9a:	f240 12f1 	movw	r2, #497	; 0x1f1
  403b9e:	490a      	ldr	r1, [pc, #40]	; (403bc8 <spi_write_reg+0x78>)
  403ba0:	480a      	ldr	r0, [pc, #40]	; (403bcc <spi_write_reg+0x7c>)
  403ba2:	4d0b      	ldr	r5, [pc, #44]	; (403bd0 <spi_write_reg+0x80>)
  403ba4:	47a8      	blx	r5
  403ba6:	4621      	mov	r1, r4
  403ba8:	480d      	ldr	r0, [pc, #52]	; (403be0 <spi_write_reg+0x90>)
  403baa:	47a8      	blx	r5
  403bac:	480a      	ldr	r0, [pc, #40]	; (403bd8 <spi_write_reg+0x88>)
  403bae:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403bb0:	2400      	movs	r4, #0
  403bb2:	9400      	str	r4, [sp, #0]
  403bb4:	4623      	mov	r3, r4
  403bb6:	4622      	mov	r2, r4
  403bb8:	4621      	mov	r1, r4
  403bba:	20cf      	movs	r0, #207	; 0xcf
  403bbc:	4d01      	ldr	r5, [pc, #4]	; (403bc4 <spi_write_reg+0x74>)
  403bbe:	47a8      	blx	r5
		return N_FAIL;
  403bc0:	4620      	mov	r0, r4
  403bc2:	e7e3      	b.n	403b8c <spi_write_reg+0x3c>
  403bc4:	004039a1 	.word	0x004039a1
  403bc8:	0040927c 	.word	0x0040927c
  403bcc:	00408c6c 	.word	0x00408c6c
  403bd0:	00405ced 	.word	0x00405ced
  403bd4:	00409814 	.word	0x00409814
  403bd8:	00408c98 	.word	0x00408c98
  403bdc:	004037a5 	.word	0x004037a5
  403be0:	00409840 	.word	0x00409840

00403be4 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  403be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403be8:	b084      	sub	sp, #16
  403bea:	4604      	mov	r4, r0
  403bec:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  403bee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  403bf2:	bf35      	itete	cc
  403bf4:	2601      	movcc	r6, #1
  403bf6:	2600      	movcs	r6, #0
  403bf8:	25c4      	movcc	r5, #196	; 0xc4
  403bfa:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  403bfc:	9600      	str	r6, [sp, #0]
  403bfe:	2304      	movs	r3, #4
  403c00:	2200      	movs	r2, #0
  403c02:	4601      	mov	r1, r0
  403c04:	4628      	mov	r0, r5
  403c06:	4f2c      	ldr	r7, [pc, #176]	; (403cb8 <spi_read_reg+0xd4>)
  403c08:	47b8      	blx	r7
	if (result != N_OK) {
  403c0a:	2801      	cmp	r0, #1
  403c0c:	d00e      	beq.n	403c2c <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403c0e:	f240 2245 	movw	r2, #581	; 0x245
  403c12:	492a      	ldr	r1, [pc, #168]	; (403cbc <spi_read_reg+0xd8>)
  403c14:	482a      	ldr	r0, [pc, #168]	; (403cc0 <spi_read_reg+0xdc>)
  403c16:	4d2b      	ldr	r5, [pc, #172]	; (403cc4 <spi_read_reg+0xe0>)
  403c18:	47a8      	blx	r5
  403c1a:	4621      	mov	r1, r4
  403c1c:	482a      	ldr	r0, [pc, #168]	; (403cc8 <spi_read_reg+0xe4>)
  403c1e:	47a8      	blx	r5
  403c20:	482a      	ldr	r0, [pc, #168]	; (403ccc <spi_read_reg+0xe8>)
  403c22:	47a8      	blx	r5
		return N_FAIL;
  403c24:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  403c26:	b004      	add	sp, #16
  403c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  403c2c:	4628      	mov	r0, r5
  403c2e:	4b28      	ldr	r3, [pc, #160]	; (403cd0 <spi_read_reg+0xec>)
  403c30:	4798      	blx	r3
	if (result != N_OK) {
  403c32:	2801      	cmp	r0, #1
  403c34:	d014      	beq.n	403c60 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  403c36:	f240 224b 	movw	r2, #587	; 0x24b
  403c3a:	4920      	ldr	r1, [pc, #128]	; (403cbc <spi_read_reg+0xd8>)
  403c3c:	4820      	ldr	r0, [pc, #128]	; (403cc0 <spi_read_reg+0xdc>)
  403c3e:	4d21      	ldr	r5, [pc, #132]	; (403cc4 <spi_read_reg+0xe0>)
  403c40:	47a8      	blx	r5
  403c42:	4621      	mov	r1, r4
  403c44:	4823      	ldr	r0, [pc, #140]	; (403cd4 <spi_read_reg+0xf0>)
  403c46:	47a8      	blx	r5
  403c48:	4820      	ldr	r0, [pc, #128]	; (403ccc <spi_read_reg+0xe8>)
  403c4a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403c4c:	2400      	movs	r4, #0
  403c4e:	9400      	str	r4, [sp, #0]
  403c50:	4623      	mov	r3, r4
  403c52:	4622      	mov	r2, r4
  403c54:	4621      	mov	r1, r4
  403c56:	20cf      	movs	r0, #207	; 0xcf
  403c58:	4d17      	ldr	r5, [pc, #92]	; (403cb8 <spi_read_reg+0xd4>)
  403c5a:	47a8      	blx	r5
		return N_FAIL;
  403c5c:	4620      	mov	r0, r4
  403c5e:	e7e2      	b.n	403c26 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  403c60:	4632      	mov	r2, r6
  403c62:	2104      	movs	r1, #4
  403c64:	a803      	add	r0, sp, #12
  403c66:	4b1c      	ldr	r3, [pc, #112]	; (403cd8 <spi_read_reg+0xf4>)
  403c68:	4798      	blx	r3
	if (result != N_OK) {
  403c6a:	2801      	cmp	r0, #1
  403c6c:	d110      	bne.n	403c90 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  403c6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  403c72:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403c76:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  403c78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  403c7c:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  403c80:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  403c82:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  403c86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  403c8a:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  403c8e:	e7ca      	b.n	403c26 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  403c90:	f240 2253 	movw	r2, #595	; 0x253
  403c94:	4909      	ldr	r1, [pc, #36]	; (403cbc <spi_read_reg+0xd8>)
  403c96:	480a      	ldr	r0, [pc, #40]	; (403cc0 <spi_read_reg+0xdc>)
  403c98:	4c0a      	ldr	r4, [pc, #40]	; (403cc4 <spi_read_reg+0xe0>)
  403c9a:	47a0      	blx	r4
  403c9c:	480f      	ldr	r0, [pc, #60]	; (403cdc <spi_read_reg+0xf8>)
  403c9e:	47a0      	blx	r4
  403ca0:	480a      	ldr	r0, [pc, #40]	; (403ccc <spi_read_reg+0xe8>)
  403ca2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403ca4:	2400      	movs	r4, #0
  403ca6:	9400      	str	r4, [sp, #0]
  403ca8:	4623      	mov	r3, r4
  403caa:	4622      	mov	r2, r4
  403cac:	4621      	mov	r1, r4
  403cae:	20cf      	movs	r0, #207	; 0xcf
  403cb0:	4d01      	ldr	r5, [pc, #4]	; (403cb8 <spi_read_reg+0xd4>)
  403cb2:	47a8      	blx	r5
		return N_FAIL;
  403cb4:	4620      	mov	r0, r4
  403cb6:	e7b6      	b.n	403c26 <spi_read_reg+0x42>
  403cb8:	004039a1 	.word	0x004039a1
  403cbc:	0040929c 	.word	0x0040929c
  403cc0:	00408c6c 	.word	0x00408c6c
  403cc4:	00405ced 	.word	0x00405ced
  403cc8:	00409794 	.word	0x00409794
  403ccc:	00408c98 	.word	0x00408c98
  403cd0:	004037a5 	.word	0x004037a5
  403cd4:	004097c0 	.word	0x004097c0
  403cd8:	00403869 	.word	0x00403869
  403cdc:	004097f4 	.word	0x004097f4

00403ce0 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  403ce0:	2000      	movs	r0, #0
  403ce2:	4b01      	ldr	r3, [pc, #4]	; (403ce8 <nm_spi_deinit+0x8>)
  403ce4:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  403ce6:	4770      	bx	lr
  403ce8:	2040c360 	.word	0x2040c360

00403cec <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  403cec:	b500      	push	{lr}
  403cee:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403cf0:	a901      	add	r1, sp, #4
  403cf2:	4b03      	ldr	r3, [pc, #12]	; (403d00 <nm_spi_read_reg+0x14>)
  403cf4:	4798      	blx	r3

	return u32Val;
}
  403cf6:	9801      	ldr	r0, [sp, #4]
  403cf8:	b003      	add	sp, #12
  403cfa:	f85d fb04 	ldr.w	pc, [sp], #4
  403cfe:	bf00      	nop
  403d00:	00403be5 	.word	0x00403be5

00403d04 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403d04:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  403d06:	4b04      	ldr	r3, [pc, #16]	; (403d18 <nm_spi_read_reg_with_ret+0x14>)
  403d08:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403d0a:	2801      	cmp	r0, #1

	return s8Ret;
}
  403d0c:	bf0c      	ite	eq
  403d0e:	2000      	moveq	r0, #0
  403d10:	f06f 0005 	mvnne.w	r0, #5
  403d14:	bd08      	pop	{r3, pc}
  403d16:	bf00      	nop
  403d18:	00403be5 	.word	0x00403be5

00403d1c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403d1c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  403d1e:	4b04      	ldr	r3, [pc, #16]	; (403d30 <nm_spi_write_reg+0x14>)
  403d20:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403d22:	2801      	cmp	r0, #1

	return s8Ret;
}
  403d24:	bf0c      	ite	eq
  403d26:	2000      	moveq	r0, #0
  403d28:	f06f 0005 	mvnne.w	r0, #5
  403d2c:	bd08      	pop	{r3, pc}
  403d2e:	bf00      	nop
  403d30:	00403b51 	.word	0x00403b51

00403d34 <nm_spi_init>:
{
  403d34:	b530      	push	{r4, r5, lr}
  403d36:	b083      	sub	sp, #12
	uint32 reg =0;
  403d38:	2300      	movs	r3, #0
  403d3a:	a902      	add	r1, sp, #8
  403d3c:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  403d40:	4a34      	ldr	r2, [pc, #208]	; (403e14 <nm_spi_init+0xe0>)
  403d42:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  403d44:	f64e 0024 	movw	r0, #59428	; 0xe824
  403d48:	4b33      	ldr	r3, [pc, #204]	; (403e18 <nm_spi_init+0xe4>)
  403d4a:	4798      	blx	r3
  403d4c:	b348      	cbz	r0, 403da2 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  403d4e:	4b31      	ldr	r3, [pc, #196]	; (403e14 <nm_spi_init+0xe0>)
  403d50:	781b      	ldrb	r3, [r3, #0]
  403d52:	b97b      	cbnz	r3, 403d74 <nm_spi_init+0x40>
		reg &= ~0x70;
  403d54:	9900      	ldr	r1, [sp, #0]
  403d56:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  403d5a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403d5e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403d60:	f64e 0024 	movw	r0, #59428	; 0xe824
  403d64:	4b2d      	ldr	r3, [pc, #180]	; (403e1c <nm_spi_init+0xe8>)
  403d66:	4798      	blx	r3
  403d68:	4604      	mov	r4, r0
  403d6a:	2800      	cmp	r0, #0
  403d6c:	d039      	beq.n	403de2 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  403d6e:	2201      	movs	r2, #1
  403d70:	4b28      	ldr	r3, [pc, #160]	; (403e14 <nm_spi_init+0xe0>)
  403d72:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  403d74:	a901      	add	r1, sp, #4
  403d76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403d7a:	4b27      	ldr	r3, [pc, #156]	; (403e18 <nm_spi_init+0xe4>)
  403d7c:	4798      	blx	r3
  403d7e:	2800      	cmp	r0, #0
  403d80:	d03a      	beq.n	403df8 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  403d82:	f64e 0024 	movw	r0, #59428	; 0xe824
  403d86:	4b26      	ldr	r3, [pc, #152]	; (403e20 <nm_spi_init+0xec>)
  403d88:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  403d8a:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403d8e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403d92:	f64e 0024 	movw	r0, #59428	; 0xe824
  403d96:	4b23      	ldr	r3, [pc, #140]	; (403e24 <nm_spi_init+0xf0>)
  403d98:	4798      	blx	r3
	return M2M_SUCCESS;
  403d9a:	2400      	movs	r4, #0
}
  403d9c:	4620      	mov	r0, r4
  403d9e:	b003      	add	sp, #12
  403da0:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  403da2:	2201      	movs	r2, #1
  403da4:	4b1b      	ldr	r3, [pc, #108]	; (403e14 <nm_spi_init+0xe0>)
  403da6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  403da8:	f240 22c5 	movw	r2, #709	; 0x2c5
  403dac:	491e      	ldr	r1, [pc, #120]	; (403e28 <nm_spi_init+0xf4>)
  403dae:	481f      	ldr	r0, [pc, #124]	; (403e2c <nm_spi_init+0xf8>)
  403db0:	4c1f      	ldr	r4, [pc, #124]	; (403e30 <nm_spi_init+0xfc>)
  403db2:	47a0      	blx	r4
  403db4:	481f      	ldr	r0, [pc, #124]	; (403e34 <nm_spi_init+0x100>)
  403db6:	47a0      	blx	r4
  403db8:	481f      	ldr	r0, [pc, #124]	; (403e38 <nm_spi_init+0x104>)
  403dba:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  403dbc:	4669      	mov	r1, sp
  403dbe:	f64e 0024 	movw	r0, #59428	; 0xe824
  403dc2:	4b15      	ldr	r3, [pc, #84]	; (403e18 <nm_spi_init+0xe4>)
  403dc4:	4798      	blx	r3
  403dc6:	4604      	mov	r4, r0
  403dc8:	2800      	cmp	r0, #0
  403dca:	d1c0      	bne.n	403d4e <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  403dcc:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  403dd0:	4915      	ldr	r1, [pc, #84]	; (403e28 <nm_spi_init+0xf4>)
  403dd2:	4816      	ldr	r0, [pc, #88]	; (403e2c <nm_spi_init+0xf8>)
  403dd4:	4d16      	ldr	r5, [pc, #88]	; (403e30 <nm_spi_init+0xfc>)
  403dd6:	47a8      	blx	r5
  403dd8:	4818      	ldr	r0, [pc, #96]	; (403e3c <nm_spi_init+0x108>)
  403dda:	47a8      	blx	r5
  403ddc:	4816      	ldr	r0, [pc, #88]	; (403e38 <nm_spi_init+0x104>)
  403dde:	47a8      	blx	r5
			return 0;
  403de0:	e7dc      	b.n	403d9c <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  403de2:	f240 22d2 	movw	r2, #722	; 0x2d2
  403de6:	4910      	ldr	r1, [pc, #64]	; (403e28 <nm_spi_init+0xf4>)
  403de8:	4810      	ldr	r0, [pc, #64]	; (403e2c <nm_spi_init+0xf8>)
  403dea:	4d11      	ldr	r5, [pc, #68]	; (403e30 <nm_spi_init+0xfc>)
  403dec:	47a8      	blx	r5
  403dee:	4814      	ldr	r0, [pc, #80]	; (403e40 <nm_spi_init+0x10c>)
  403df0:	47a8      	blx	r5
  403df2:	4811      	ldr	r0, [pc, #68]	; (403e38 <nm_spi_init+0x104>)
  403df4:	47a8      	blx	r5
			return 0;
  403df6:	e7d1      	b.n	403d9c <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  403df8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  403dfc:	490a      	ldr	r1, [pc, #40]	; (403e28 <nm_spi_init+0xf4>)
  403dfe:	480b      	ldr	r0, [pc, #44]	; (403e2c <nm_spi_init+0xf8>)
  403e00:	4c0b      	ldr	r4, [pc, #44]	; (403e30 <nm_spi_init+0xfc>)
  403e02:	47a0      	blx	r4
  403e04:	480f      	ldr	r0, [pc, #60]	; (403e44 <nm_spi_init+0x110>)
  403e06:	47a0      	blx	r4
  403e08:	480b      	ldr	r0, [pc, #44]	; (403e38 <nm_spi_init+0x104>)
  403e0a:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  403e0c:	f06f 0405 	mvn.w	r4, #5
  403e10:	e7c4      	b.n	403d9c <nm_spi_init+0x68>
  403e12:	bf00      	nop
  403e14:	2040c360 	.word	0x2040c360
  403e18:	00403be5 	.word	0x00403be5
  403e1c:	00403b51 	.word	0x00403b51
  403e20:	00403ced 	.word	0x00403ced
  403e24:	00403d1d 	.word	0x00403d1d
  403e28:	004092b8 	.word	0x004092b8
  403e2c:	00408c6c 	.word	0x00408c6c
  403e30:	00405ced 	.word	0x00405ced
  403e34:	004093c4 	.word	0x004093c4
  403e38:	00408c98 	.word	0x00408c98
  403e3c:	00409414 	.word	0x00409414
  403e40:	00409444 	.word	0x00409444
  403e44:	00409478 	.word	0x00409478

00403e48 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403e48:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e4a:	b083      	sub	sp, #12
  403e4c:	4604      	mov	r4, r0
  403e4e:	460f      	mov	r7, r1
  403e50:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403e52:	2200      	movs	r2, #0
  403e54:	9200      	str	r2, [sp, #0]
  403e56:	462b      	mov	r3, r5
  403e58:	4601      	mov	r1, r0
  403e5a:	20c8      	movs	r0, #200	; 0xc8
  403e5c:	4e22      	ldr	r6, [pc, #136]	; (403ee8 <nm_spi_read_block+0xa0>)
  403e5e:	47b0      	blx	r6
	if (result != N_OK) {
  403e60:	2801      	cmp	r0, #1
  403e62:	d00e      	beq.n	403e82 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  403e64:	f44f 721d 	mov.w	r2, #628	; 0x274
  403e68:	4920      	ldr	r1, [pc, #128]	; (403eec <nm_spi_read_block+0xa4>)
  403e6a:	4821      	ldr	r0, [pc, #132]	; (403ef0 <nm_spi_read_block+0xa8>)
  403e6c:	4d21      	ldr	r5, [pc, #132]	; (403ef4 <nm_spi_read_block+0xac>)
  403e6e:	47a8      	blx	r5
  403e70:	4621      	mov	r1, r4
  403e72:	4821      	ldr	r0, [pc, #132]	; (403ef8 <nm_spi_read_block+0xb0>)
  403e74:	47a8      	blx	r5
  403e76:	4821      	ldr	r0, [pc, #132]	; (403efc <nm_spi_read_block+0xb4>)
  403e78:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403e7a:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403e7e:	b003      	add	sp, #12
  403e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  403e82:	20c8      	movs	r0, #200	; 0xc8
  403e84:	4b1e      	ldr	r3, [pc, #120]	; (403f00 <nm_spi_read_block+0xb8>)
  403e86:	4798      	blx	r3
	if (result != N_OK) {
  403e88:	2801      	cmp	r0, #1
  403e8a:	d012      	beq.n	403eb2 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  403e8c:	f240 227a 	movw	r2, #634	; 0x27a
  403e90:	4916      	ldr	r1, [pc, #88]	; (403eec <nm_spi_read_block+0xa4>)
  403e92:	4817      	ldr	r0, [pc, #92]	; (403ef0 <nm_spi_read_block+0xa8>)
  403e94:	4d17      	ldr	r5, [pc, #92]	; (403ef4 <nm_spi_read_block+0xac>)
  403e96:	47a8      	blx	r5
  403e98:	4621      	mov	r1, r4
  403e9a:	481a      	ldr	r0, [pc, #104]	; (403f04 <nm_spi_read_block+0xbc>)
  403e9c:	47a8      	blx	r5
  403e9e:	4817      	ldr	r0, [pc, #92]	; (403efc <nm_spi_read_block+0xb4>)
  403ea0:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403ea2:	2100      	movs	r1, #0
  403ea4:	9100      	str	r1, [sp, #0]
  403ea6:	460b      	mov	r3, r1
  403ea8:	460a      	mov	r2, r1
  403eaa:	20cf      	movs	r0, #207	; 0xcf
  403eac:	4c0e      	ldr	r4, [pc, #56]	; (403ee8 <nm_spi_read_block+0xa0>)
  403eae:	47a0      	blx	r4
  403eb0:	e7e3      	b.n	403e7a <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  403eb2:	2200      	movs	r2, #0
  403eb4:	4629      	mov	r1, r5
  403eb6:	4638      	mov	r0, r7
  403eb8:	4b13      	ldr	r3, [pc, #76]	; (403f08 <nm_spi_read_block+0xc0>)
  403eba:	4798      	blx	r3
	if (result != N_OK) {
  403ebc:	2801      	cmp	r0, #1
  403ebe:	d011      	beq.n	403ee4 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  403ec0:	f44f 7221 	mov.w	r2, #644	; 0x284
  403ec4:	4909      	ldr	r1, [pc, #36]	; (403eec <nm_spi_read_block+0xa4>)
  403ec6:	480a      	ldr	r0, [pc, #40]	; (403ef0 <nm_spi_read_block+0xa8>)
  403ec8:	4c0a      	ldr	r4, [pc, #40]	; (403ef4 <nm_spi_read_block+0xac>)
  403eca:	47a0      	blx	r4
  403ecc:	480f      	ldr	r0, [pc, #60]	; (403f0c <nm_spi_read_block+0xc4>)
  403ece:	47a0      	blx	r4
  403ed0:	480a      	ldr	r0, [pc, #40]	; (403efc <nm_spi_read_block+0xb4>)
  403ed2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403ed4:	2100      	movs	r1, #0
  403ed6:	9100      	str	r1, [sp, #0]
  403ed8:	460b      	mov	r3, r1
  403eda:	460a      	mov	r2, r1
  403edc:	20cf      	movs	r0, #207	; 0xcf
  403ede:	4c02      	ldr	r4, [pc, #8]	; (403ee8 <nm_spi_read_block+0xa0>)
  403ee0:	47a0      	blx	r4
  403ee2:	e7ca      	b.n	403e7a <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403ee4:	2000      	movs	r0, #0
  403ee6:	e7ca      	b.n	403e7e <nm_spi_read_block+0x36>
  403ee8:	004039a1 	.word	0x004039a1
  403eec:	004092ac 	.word	0x004092ac
  403ef0:	00408c6c 	.word	0x00408c6c
  403ef4:	00405ced 	.word	0x00405ced
  403ef8:	004094a0 	.word	0x004094a0
  403efc:	00408c98 	.word	0x00408c98
  403f00:	004037a5 	.word	0x004037a5
  403f04:	004094d0 	.word	0x004094d0
  403f08:	00403869 	.word	0x00403869
  403f0c:	00409508 	.word	0x00409508

00403f10 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403f14:	b085      	sub	sp, #20
  403f16:	4604      	mov	r4, r0
  403f18:	4688      	mov	r8, r1
  403f1a:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403f1c:	2200      	movs	r2, #0
  403f1e:	9200      	str	r2, [sp, #0]
  403f20:	462b      	mov	r3, r5
  403f22:	4601      	mov	r1, r0
  403f24:	20c7      	movs	r0, #199	; 0xc7
  403f26:	4e4d      	ldr	r6, [pc, #308]	; (40405c <nm_spi_write_block+0x14c>)
  403f28:	47b0      	blx	r6
	if (result != N_OK) {
  403f2a:	2801      	cmp	r0, #1
  403f2c:	d00f      	beq.n	403f4e <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  403f2e:	f240 220f 	movw	r2, #527	; 0x20f
  403f32:	494b      	ldr	r1, [pc, #300]	; (404060 <nm_spi_write_block+0x150>)
  403f34:	484b      	ldr	r0, [pc, #300]	; (404064 <nm_spi_write_block+0x154>)
  403f36:	4d4c      	ldr	r5, [pc, #304]	; (404068 <nm_spi_write_block+0x158>)
  403f38:	47a8      	blx	r5
  403f3a:	4621      	mov	r1, r4
  403f3c:	484b      	ldr	r0, [pc, #300]	; (40406c <nm_spi_write_block+0x15c>)
  403f3e:	47a8      	blx	r5
  403f40:	484b      	ldr	r0, [pc, #300]	; (404070 <nm_spi_write_block+0x160>)
  403f42:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403f44:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403f48:	b005      	add	sp, #20
  403f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  403f4e:	20c7      	movs	r0, #199	; 0xc7
  403f50:	4b48      	ldr	r3, [pc, #288]	; (404074 <nm_spi_write_block+0x164>)
  403f52:	4798      	blx	r3
	if (result != N_OK) {
  403f54:	2801      	cmp	r0, #1
  403f56:	d012      	beq.n	403f7e <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  403f58:	f240 2215 	movw	r2, #533	; 0x215
  403f5c:	4940      	ldr	r1, [pc, #256]	; (404060 <nm_spi_write_block+0x150>)
  403f5e:	4841      	ldr	r0, [pc, #260]	; (404064 <nm_spi_write_block+0x154>)
  403f60:	4d41      	ldr	r5, [pc, #260]	; (404068 <nm_spi_write_block+0x158>)
  403f62:	47a8      	blx	r5
  403f64:	4621      	mov	r1, r4
  403f66:	4844      	ldr	r0, [pc, #272]	; (404078 <nm_spi_write_block+0x168>)
  403f68:	47a8      	blx	r5
  403f6a:	4841      	ldr	r0, [pc, #260]	; (404070 <nm_spi_write_block+0x160>)
  403f6c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403f6e:	2100      	movs	r1, #0
  403f70:	9100      	str	r1, [sp, #0]
  403f72:	460b      	mov	r3, r1
  403f74:	460a      	mov	r2, r1
  403f76:	20cf      	movs	r0, #207	; 0xcf
  403f78:	4c38      	ldr	r4, [pc, #224]	; (40405c <nm_spi_write_block+0x14c>)
  403f7a:	47a0      	blx	r4
  403f7c:	e7e2      	b.n	403f44 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  403f7e:	2400      	movs	r4, #0
  403f80:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403f84:	4f3d      	ldr	r7, [pc, #244]	; (40407c <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  403f86:	f8df 910c 	ldr.w	r9, [pc, #268]	; 404094 <nm_spi_write_block+0x184>
  403f8a:	e01d      	b.n	403fc8 <nm_spi_write_block+0xb8>
				order = 0x2;
  403f8c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403f90:	bf94      	ite	ls
  403f92:	2303      	movls	r3, #3
  403f94:	2302      	movhi	r3, #2
		cmd |= order;
  403f96:	f063 030f 	orn	r3, r3, #15
  403f9a:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  403f9e:	2101      	movs	r1, #1
  403fa0:	f10d 000b 	add.w	r0, sp, #11
  403fa4:	47b8      	blx	r7
  403fa6:	b9e8      	cbnz	r0, 403fe4 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  403fa8:	4631      	mov	r1, r6
  403faa:	eb08 0004 	add.w	r0, r8, r4
  403fae:	47b8      	blx	r7
  403fb0:	2800      	cmp	r0, #0
  403fb2:	d135      	bne.n	404020 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  403fb4:	f899 3000 	ldrb.w	r3, [r9]
  403fb8:	2b00      	cmp	r3, #0
  403fba:	d03c      	beq.n	404036 <nm_spi_write_block+0x126>
		ix += nbytes;
  403fbc:	4434      	add	r4, r6
  403fbe:	b224      	sxth	r4, r4
		sz -= nbytes;
  403fc0:	1bad      	subs	r5, r5, r6
  403fc2:	b2ad      	uxth	r5, r5
	} while (sz);
  403fc4:	2d00      	cmp	r5, #0
  403fc6:	d046      	beq.n	404056 <nm_spi_write_block+0x146>
  403fc8:	462e      	mov	r6, r5
  403fca:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403fce:	bf28      	it	cs
  403fd0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  403fd4:	2c00      	cmp	r4, #0
  403fd6:	d1d9      	bne.n	403f8c <nm_spi_write_block+0x7c>
				order = 0x1;
  403fd8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  403fdc:	bf94      	ite	ls
  403fde:	2303      	movls	r3, #3
  403fe0:	2301      	movhi	r3, #1
  403fe2:	e7d8      	b.n	403f96 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  403fe4:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  403fe8:	4925      	ldr	r1, [pc, #148]	; (404080 <nm_spi_write_block+0x170>)
  403fea:	481e      	ldr	r0, [pc, #120]	; (404064 <nm_spi_write_block+0x154>)
  403fec:	4c1e      	ldr	r4, [pc, #120]	; (404068 <nm_spi_write_block+0x158>)
  403fee:	47a0      	blx	r4
  403ff0:	4824      	ldr	r0, [pc, #144]	; (404084 <nm_spi_write_block+0x174>)
  403ff2:	47a0      	blx	r4
  403ff4:	481e      	ldr	r0, [pc, #120]	; (404070 <nm_spi_write_block+0x160>)
  403ff6:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  403ff8:	f240 2226 	movw	r2, #550	; 0x226
  403ffc:	4918      	ldr	r1, [pc, #96]	; (404060 <nm_spi_write_block+0x150>)
  403ffe:	4819      	ldr	r0, [pc, #100]	; (404064 <nm_spi_write_block+0x154>)
  404000:	4c19      	ldr	r4, [pc, #100]	; (404068 <nm_spi_write_block+0x158>)
  404002:	47a0      	blx	r4
  404004:	4820      	ldr	r0, [pc, #128]	; (404088 <nm_spi_write_block+0x178>)
  404006:	47a0      	blx	r4
  404008:	4819      	ldr	r0, [pc, #100]	; (404070 <nm_spi_write_block+0x160>)
  40400a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40400c:	2400      	movs	r4, #0
  40400e:	9400      	str	r4, [sp, #0]
  404010:	4623      	mov	r3, r4
  404012:	4622      	mov	r2, r4
  404014:	4621      	mov	r1, r4
  404016:	20cf      	movs	r0, #207	; 0xcf
  404018:	4d10      	ldr	r5, [pc, #64]	; (40405c <nm_spi_write_block+0x14c>)
  40401a:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40401c:	4620      	mov	r0, r4
  40401e:	e793      	b.n	403f48 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  404020:	f240 12b1 	movw	r2, #433	; 0x1b1
  404024:	4916      	ldr	r1, [pc, #88]	; (404080 <nm_spi_write_block+0x170>)
  404026:	480f      	ldr	r0, [pc, #60]	; (404064 <nm_spi_write_block+0x154>)
  404028:	4c0f      	ldr	r4, [pc, #60]	; (404068 <nm_spi_write_block+0x158>)
  40402a:	47a0      	blx	r4
  40402c:	4817      	ldr	r0, [pc, #92]	; (40408c <nm_spi_write_block+0x17c>)
  40402e:	47a0      	blx	r4
  404030:	480f      	ldr	r0, [pc, #60]	; (404070 <nm_spi_write_block+0x160>)
  404032:	47a0      	blx	r4
  404034:	e7e0      	b.n	403ff8 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  404036:	2102      	movs	r1, #2
  404038:	a803      	add	r0, sp, #12
  40403a:	47b8      	blx	r7
  40403c:	2800      	cmp	r0, #0
  40403e:	d0bd      	beq.n	403fbc <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  404040:	f240 12bb 	movw	r2, #443	; 0x1bb
  404044:	490e      	ldr	r1, [pc, #56]	; (404080 <nm_spi_write_block+0x170>)
  404046:	4807      	ldr	r0, [pc, #28]	; (404064 <nm_spi_write_block+0x154>)
  404048:	4c07      	ldr	r4, [pc, #28]	; (404068 <nm_spi_write_block+0x158>)
  40404a:	47a0      	blx	r4
  40404c:	4810      	ldr	r0, [pc, #64]	; (404090 <nm_spi_write_block+0x180>)
  40404e:	47a0      	blx	r4
  404050:	4807      	ldr	r0, [pc, #28]	; (404070 <nm_spi_write_block+0x160>)
  404052:	47a0      	blx	r4
  404054:	e7d0      	b.n	403ff8 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404056:	2000      	movs	r0, #0
  404058:	e776      	b.n	403f48 <nm_spi_write_block+0x38>
  40405a:	bf00      	nop
  40405c:	004039a1 	.word	0x004039a1
  404060:	0040928c 	.word	0x0040928c
  404064:	00408c6c 	.word	0x00408c6c
  404068:	00405ced 	.word	0x00405ced
  40406c:	00409530 	.word	0x00409530
  404070:	00408c98 	.word	0x00408c98
  404074:	004037a5 	.word	0x004037a5
  404078:	00409560 	.word	0x00409560
  40407c:	00403981 	.word	0x00403981
  404080:	0040926c 	.word	0x0040926c
  404084:	00409598 	.word	0x00409598
  404088:	0040963c 	.word	0x0040963c
  40408c:	004095d0 	.word	0x004095d0
  404090:	00409604 	.word	0x00409604
  404094:	2040c360 	.word	0x2040c360

00404098 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  404098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40409c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4040a0:	b194      	cbz	r4, 4040c8 <Socket_ReadSocketData+0x30>
  4040a2:	4681      	mov	r9, r0
  4040a4:	460e      	mov	r6, r1
  4040a6:	4692      	mov	sl, r2
  4040a8:	4698      	mov	r8, r3
  4040aa:	0103      	lsls	r3, r0, #4
  4040ac:	4922      	ldr	r1, [pc, #136]	; (404138 <Socket_ReadSocketData+0xa0>)
  4040ae:	58cb      	ldr	r3, [r1, r3]
  4040b0:	b153      	cbz	r3, 4040c8 <Socket_ReadSocketData+0x30>
  4040b2:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4040b6:	889b      	ldrh	r3, [r3, #4]
  4040b8:	b29b      	uxth	r3, r3
  4040ba:	b12b      	cbz	r3, 4040c8 <Socket_ReadSocketData+0x30>
  4040bc:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4040c0:	7a9b      	ldrb	r3, [r3, #10]
  4040c2:	b2db      	uxtb	r3, r3
  4040c4:	2b01      	cmp	r3, #1
  4040c6:	d001      	beq.n	4040cc <Socket_ReadSocketData+0x34>
  4040c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4040cc:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4040ce:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4040d2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 404150 <Socket_ReadSocketData+0xb8>
  4040d6:	e006      	b.n	4040e6 <Socket_ReadSocketData+0x4e>
  4040d8:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4040da:	2301      	movs	r3, #1
  4040dc:	e00b      	b.n	4040f6 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4040de:	1b64      	subs	r4, r4, r5
  4040e0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4040e2:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4040e4:	b1ec      	cbz	r4, 404122 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4040e6:	88bb      	ldrh	r3, [r7, #4]
  4040e8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4040ea:	b21b      	sxth	r3, r3
  4040ec:	2b00      	cmp	r3, #0
  4040ee:	ddf3      	ble.n	4040d8 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4040f0:	88bd      	ldrh	r5, [r7, #4]
  4040f2:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4040f4:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4040f6:	6839      	ldr	r1, [r7, #0]
  4040f8:	462a      	mov	r2, r5
  4040fa:	4640      	mov	r0, r8
  4040fc:	47d8      	blx	fp
  4040fe:	b990      	cbnz	r0, 404126 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  404100:	683b      	ldr	r3, [r7, #0]
  404102:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  404104:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  404106:	88f3      	ldrh	r3, [r6, #6]
  404108:	1b5b      	subs	r3, r3, r5
  40410a:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  40410c:	4b0b      	ldr	r3, [pc, #44]	; (40413c <Socket_ReadSocketData+0xa4>)
  40410e:	681b      	ldr	r3, [r3, #0]
  404110:	2b00      	cmp	r3, #0
  404112:	d0e4      	beq.n	4040de <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  404114:	4b09      	ldr	r3, [pc, #36]	; (40413c <Socket_ReadSocketData+0xa4>)
  404116:	681b      	ldr	r3, [r3, #0]
  404118:	4632      	mov	r2, r6
  40411a:	4651      	mov	r1, sl
  40411c:	4648      	mov	r0, r9
  40411e:	4798      	blx	r3
  404120:	e7dd      	b.n	4040de <Socket_ReadSocketData+0x46>
  404122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  404126:	4806      	ldr	r0, [pc, #24]	; (404140 <Socket_ReadSocketData+0xa8>)
  404128:	4d06      	ldr	r5, [pc, #24]	; (404144 <Socket_ReadSocketData+0xac>)
  40412a:	47a8      	blx	r5
  40412c:	4621      	mov	r1, r4
  40412e:	4806      	ldr	r0, [pc, #24]	; (404148 <Socket_ReadSocketData+0xb0>)
  404130:	47a8      	blx	r5
  404132:	4806      	ldr	r0, [pc, #24]	; (40414c <Socket_ReadSocketData+0xb4>)
  404134:	47a8      	blx	r5
	}
}
  404136:	e7c7      	b.n	4040c8 <Socket_ReadSocketData+0x30>
  404138:	2040c9dc 	.word	0x2040c9dc
  40413c:	2040ca8c 	.word	0x2040ca8c
  404140:	00408f40 	.word	0x00408f40
  404144:	00405ced 	.word	0x00405ced
  404148:	00409878 	.word	0x00409878
  40414c:	00408c98 	.word	0x00408c98
  404150:	004027d1 	.word	0x004027d1

00404154 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404154:	b5f0      	push	{r4, r5, r6, r7, lr}
  404156:	b099      	sub	sp, #100	; 0x64
  404158:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40415a:	2841      	cmp	r0, #65	; 0x41
  40415c:	d049      	beq.n	4041f2 <m2m_ip_cb+0x9e>
  40415e:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404160:	2842      	cmp	r0, #66	; 0x42
  404162:	d05f      	beq.n	404224 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404164:	2843      	cmp	r0, #67	; 0x43
  404166:	d075      	beq.n	404254 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  404168:	2844      	cmp	r0, #68	; 0x44
  40416a:	f000 80b0 	beq.w	4042ce <m2m_ip_cb+0x17a>
  40416e:	284b      	cmp	r0, #75	; 0x4b
  404170:	f000 80ad 	beq.w	4042ce <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404174:	284a      	cmp	r0, #74	; 0x4a
  404176:	f000 80cc 	beq.w	404312 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40417a:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40417e:	b2db      	uxtb	r3, r3
  404180:	2b07      	cmp	r3, #7
  404182:	f200 80f4 	bhi.w	40436e <m2m_ip_cb+0x21a>
  404186:	2285      	movs	r2, #133	; 0x85
  404188:	fa22 f303 	lsr.w	r3, r2, r3
  40418c:	f013 0f01 	tst.w	r3, #1
  404190:	f000 80ed 	beq.w	40436e <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404194:	2848      	cmp	r0, #72	; 0x48
  404196:	bf14      	ite	ne
  404198:	2706      	movne	r7, #6
  40419a:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  40419c:	2300      	movs	r3, #0
  40419e:	2210      	movs	r2, #16
  4041a0:	a903      	add	r1, sp, #12
  4041a2:	4620      	mov	r0, r4
  4041a4:	4e93      	ldr	r6, [pc, #588]	; (4043f4 <m2m_ip_cb+0x2a0>)
  4041a6:	47b0      	blx	r6
  4041a8:	2800      	cmp	r0, #0
  4041aa:	f040 80b0 	bne.w	40430e <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4041ae:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4041b2:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4041b6:	4a90      	ldr	r2, [pc, #576]	; (4043f8 <m2m_ip_cb+0x2a4>)
  4041b8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4041bc:	2300      	movs	r3, #0
  4041be:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4041c0:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4041c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4041c8:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4041cc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4041d0:	9e04      	ldr	r6, [sp, #16]
  4041d2:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4041d4:	88d2      	ldrh	r2, [r2, #6]
  4041d6:	b292      	uxth	r2, r2
  4041d8:	4291      	cmp	r1, r2
  4041da:	f000 80ac 	beq.w	404336 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4041de:	2d10      	cmp	r5, #16
  4041e0:	f240 8095 	bls.w	40430e <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4041e4:	2301      	movs	r3, #1
  4041e6:	2200      	movs	r2, #0
  4041e8:	4611      	mov	r1, r2
  4041ea:	4610      	mov	r0, r2
  4041ec:	4c81      	ldr	r4, [pc, #516]	; (4043f4 <m2m_ip_cb+0x2a0>)
  4041ee:	47a0      	blx	r4
	{
  4041f0:	e08d      	b.n	40430e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4041f2:	2300      	movs	r3, #0
  4041f4:	2204      	movs	r2, #4
  4041f6:	a907      	add	r1, sp, #28
  4041f8:	4620      	mov	r0, r4
  4041fa:	4c7e      	ldr	r4, [pc, #504]	; (4043f4 <m2m_ip_cb+0x2a0>)
  4041fc:	47a0      	blx	r4
  4041fe:	2800      	cmp	r0, #0
  404200:	f040 8085 	bne.w	40430e <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  404204:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404208:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40420c:	4b7b      	ldr	r3, [pc, #492]	; (4043fc <m2m_ip_cb+0x2a8>)
  40420e:	681b      	ldr	r3, [r3, #0]
  404210:	2b00      	cmp	r3, #0
  404212:	d07c      	beq.n	40430e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  404214:	4b79      	ldr	r3, [pc, #484]	; (4043fc <m2m_ip_cb+0x2a8>)
  404216:	681b      	ldr	r3, [r3, #0]
  404218:	aa03      	add	r2, sp, #12
  40421a:	2101      	movs	r1, #1
  40421c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404220:	4798      	blx	r3
  404222:	e074      	b.n	40430e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  404224:	2300      	movs	r3, #0
  404226:	2204      	movs	r2, #4
  404228:	a907      	add	r1, sp, #28
  40422a:	4620      	mov	r0, r4
  40422c:	4c71      	ldr	r4, [pc, #452]	; (4043f4 <m2m_ip_cb+0x2a0>)
  40422e:	47a0      	blx	r4
  404230:	2800      	cmp	r0, #0
  404232:	d16c      	bne.n	40430e <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  404234:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404238:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40423c:	4b6f      	ldr	r3, [pc, #444]	; (4043fc <m2m_ip_cb+0x2a8>)
  40423e:	681b      	ldr	r3, [r3, #0]
  404240:	2b00      	cmp	r3, #0
  404242:	d064      	beq.n	40430e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404244:	4b6d      	ldr	r3, [pc, #436]	; (4043fc <m2m_ip_cb+0x2a8>)
  404246:	681b      	ldr	r3, [r3, #0]
  404248:	aa03      	add	r2, sp, #12
  40424a:	2102      	movs	r1, #2
  40424c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404250:	4798      	blx	r3
  404252:	e05c      	b.n	40430e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404254:	2300      	movs	r3, #0
  404256:	220c      	movs	r2, #12
  404258:	eb0d 0102 	add.w	r1, sp, r2
  40425c:	4620      	mov	r0, r4
  40425e:	4c65      	ldr	r4, [pc, #404]	; (4043f4 <m2m_ip_cb+0x2a0>)
  404260:	47a0      	blx	r4
  404262:	2800      	cmp	r0, #0
  404264:	d153      	bne.n	40430e <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  404266:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40426a:	2b00      	cmp	r3, #0
  40426c:	db19      	blt.n	4042a2 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40426e:	4a62      	ldr	r2, [pc, #392]	; (4043f8 <m2m_ip_cb+0x2a4>)
  404270:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404274:	2100      	movs	r1, #0
  404276:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  404278:	2101      	movs	r1, #1
  40427a:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  40427c:	4960      	ldr	r1, [pc, #384]	; (404400 <m2m_ip_cb+0x2ac>)
  40427e:	880a      	ldrh	r2, [r1, #0]
  404280:	3201      	adds	r2, #1
  404282:	b292      	uxth	r2, r2
  404284:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  404286:	880a      	ldrh	r2, [r1, #0]
  404288:	b292      	uxth	r2, r2
  40428a:	b91a      	cbnz	r2, 404294 <m2m_ip_cb+0x140>
					++gu16SessionID;
  40428c:	880a      	ldrh	r2, [r1, #0]
  40428e:	3201      	adds	r2, #1
  404290:	b292      	uxth	r2, r2
  404292:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404294:	4a5a      	ldr	r2, [pc, #360]	; (404400 <m2m_ip_cb+0x2ac>)
  404296:	8811      	ldrh	r1, [r2, #0]
  404298:	b289      	uxth	r1, r1
  40429a:	4a57      	ldr	r2, [pc, #348]	; (4043f8 <m2m_ip_cb+0x2a4>)
  40429c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4042a0:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  4042a2:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4042a6:	2302      	movs	r3, #2
  4042a8:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4042ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4042b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4042b4:	9b04      	ldr	r3, [sp, #16]
  4042b6:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4042b8:	4b50      	ldr	r3, [pc, #320]	; (4043fc <m2m_ip_cb+0x2a8>)
  4042ba:	681b      	ldr	r3, [r3, #0]
  4042bc:	b33b      	cbz	r3, 40430e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4042be:	4b4f      	ldr	r3, [pc, #316]	; (4043fc <m2m_ip_cb+0x2a8>)
  4042c0:	681b      	ldr	r3, [r3, #0]
  4042c2:	aa07      	add	r2, sp, #28
  4042c4:	2104      	movs	r1, #4
  4042c6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4042ca:	4798      	blx	r3
  4042cc:	e01f      	b.n	40430e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4042ce:	2300      	movs	r3, #0
  4042d0:	2204      	movs	r2, #4
  4042d2:	a907      	add	r1, sp, #28
  4042d4:	4620      	mov	r0, r4
  4042d6:	4c47      	ldr	r4, [pc, #284]	; (4043f4 <m2m_ip_cb+0x2a0>)
  4042d8:	47a0      	blx	r4
  4042da:	b9c0      	cbnz	r0, 40430e <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4042dc:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4042e0:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4042e4:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4042e8:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4042ec:	b93b      	cbnz	r3, 4042fe <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4042ee:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4042f2:	3b08      	subs	r3, #8
  4042f4:	b29b      	uxth	r3, r3
  4042f6:	4a40      	ldr	r2, [pc, #256]	; (4043f8 <m2m_ip_cb+0x2a4>)
  4042f8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4042fc:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4042fe:	4b3f      	ldr	r3, [pc, #252]	; (4043fc <m2m_ip_cb+0x2a8>)
  404300:	681b      	ldr	r3, [r3, #0]
  404302:	b123      	cbz	r3, 40430e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  404304:	4b3d      	ldr	r3, [pc, #244]	; (4043fc <m2m_ip_cb+0x2a8>)
  404306:	681b      	ldr	r3, [r3, #0]
  404308:	aa03      	add	r2, sp, #12
  40430a:	2105      	movs	r1, #5
  40430c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  40430e:	b019      	add	sp, #100	; 0x64
  404310:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  404312:	2300      	movs	r3, #0
  404314:	2244      	movs	r2, #68	; 0x44
  404316:	a907      	add	r1, sp, #28
  404318:	4620      	mov	r0, r4
  40431a:	4c36      	ldr	r4, [pc, #216]	; (4043f4 <m2m_ip_cb+0x2a0>)
  40431c:	47a0      	blx	r4
  40431e:	2800      	cmp	r0, #0
  404320:	d1f5      	bne.n	40430e <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  404322:	4b38      	ldr	r3, [pc, #224]	; (404404 <m2m_ip_cb+0x2b0>)
  404324:	681b      	ldr	r3, [r3, #0]
  404326:	2b00      	cmp	r3, #0
  404328:	d0f1      	beq.n	40430e <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  40432a:	4b36      	ldr	r3, [pc, #216]	; (404404 <m2m_ip_cb+0x2b0>)
  40432c:	681b      	ldr	r3, [r3, #0]
  40432e:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404330:	a807      	add	r0, sp, #28
  404332:	4798      	blx	r3
  404334:	e7eb      	b.n	40430e <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404336:	f1be 0f00 	cmp.w	lr, #0
  40433a:	dd01      	ble.n	404340 <m2m_ip_cb+0x1ec>
  40433c:	45ae      	cmp	lr, r5
  40433e:	db0d      	blt.n	40435c <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  404340:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404344:	2300      	movs	r3, #0
  404346:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  404348:	4b2c      	ldr	r3, [pc, #176]	; (4043fc <m2m_ip_cb+0x2a8>)
  40434a:	681b      	ldr	r3, [r3, #0]
  40434c:	2b00      	cmp	r3, #0
  40434e:	d0de      	beq.n	40430e <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  404350:	4b2a      	ldr	r3, [pc, #168]	; (4043fc <m2m_ip_cb+0x2a8>)
  404352:	681b      	ldr	r3, [r3, #0]
  404354:	aa07      	add	r2, sp, #28
  404356:	4639      	mov	r1, r7
  404358:	4798      	blx	r3
  40435a:	e7d8      	b.n	40430e <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  40435c:	fa1f f28e 	uxth.w	r2, lr
  404360:	9200      	str	r2, [sp, #0]
  404362:	4423      	add	r3, r4
  404364:	463a      	mov	r2, r7
  404366:	a907      	add	r1, sp, #28
  404368:	4c27      	ldr	r4, [pc, #156]	; (404408 <m2m_ip_cb+0x2b4>)
  40436a:	47a0      	blx	r4
  40436c:	e7cf      	b.n	40430e <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  40436e:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404372:	2b45      	cmp	r3, #69	; 0x45
  404374:	d019      	beq.n	4043aa <m2m_ip_cb+0x256>
  404376:	284c      	cmp	r0, #76	; 0x4c
  404378:	d017      	beq.n	4043aa <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40437a:	2852      	cmp	r0, #82	; 0x52
  40437c:	d1c7      	bne.n	40430e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40437e:	2301      	movs	r3, #1
  404380:	2214      	movs	r2, #20
  404382:	a907      	add	r1, sp, #28
  404384:	4620      	mov	r0, r4
  404386:	4c1b      	ldr	r4, [pc, #108]	; (4043f4 <m2m_ip_cb+0x2a0>)
  404388:	47a0      	blx	r4
  40438a:	2800      	cmp	r0, #0
  40438c:	d1bf      	bne.n	40430e <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40438e:	4b1f      	ldr	r3, [pc, #124]	; (40440c <m2m_ip_cb+0x2b8>)
  404390:	9a08      	ldr	r2, [sp, #32]
  404392:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404394:	681b      	ldr	r3, [r3, #0]
  404396:	2b00      	cmp	r3, #0
  404398:	d0b9      	beq.n	40430e <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40439a:	4b1c      	ldr	r3, [pc, #112]	; (40440c <m2m_ip_cb+0x2b8>)
  40439c:	681b      	ldr	r3, [r3, #0]
  40439e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4043a2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4043a4:	9807      	ldr	r0, [sp, #28]
  4043a6:	4798      	blx	r3
}
  4043a8:	e7b1      	b.n	40430e <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  4043aa:	2847      	cmp	r0, #71	; 0x47
  4043ac:	bf14      	ite	ne
  4043ae:	2507      	movne	r5, #7
  4043b0:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  4043b2:	2300      	movs	r3, #0
  4043b4:	2208      	movs	r2, #8
  4043b6:	a907      	add	r1, sp, #28
  4043b8:	4620      	mov	r0, r4
  4043ba:	4c0e      	ldr	r4, [pc, #56]	; (4043f4 <m2m_ip_cb+0x2a0>)
  4043bc:	47a0      	blx	r4
  4043be:	2800      	cmp	r0, #0
  4043c0:	d1a5      	bne.n	40430e <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  4043c2:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4043c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4043ca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4043ce:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4043d2:	4b09      	ldr	r3, [pc, #36]	; (4043f8 <m2m_ip_cb+0x2a4>)
  4043d4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4043d8:	88db      	ldrh	r3, [r3, #6]
  4043da:	b29b      	uxth	r3, r3
  4043dc:	429a      	cmp	r2, r3
  4043de:	d196      	bne.n	40430e <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4043e0:	4b06      	ldr	r3, [pc, #24]	; (4043fc <m2m_ip_cb+0x2a8>)
  4043e2:	681b      	ldr	r3, [r3, #0]
  4043e4:	2b00      	cmp	r3, #0
  4043e6:	d092      	beq.n	40430e <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4043e8:	4b04      	ldr	r3, [pc, #16]	; (4043fc <m2m_ip_cb+0x2a8>)
  4043ea:	681b      	ldr	r3, [r3, #0]
  4043ec:	aa03      	add	r2, sp, #12
  4043ee:	4629      	mov	r1, r5
  4043f0:	4798      	blx	r3
	{
  4043f2:	e78c      	b.n	40430e <m2m_ip_cb+0x1ba>
  4043f4:	004027d1 	.word	0x004027d1
  4043f8:	2040c9dc 	.word	0x2040c9dc
  4043fc:	2040ca8c 	.word	0x2040ca8c
  404400:	2040c362 	.word	0x2040c362
  404404:	2040ca94 	.word	0x2040ca94
  404408:	00404099 	.word	0x00404099
  40440c:	2040ca90 	.word	0x2040ca90

00404410 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  404410:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  404412:	4b0a      	ldr	r3, [pc, #40]	; (40443c <socketInit+0x2c>)
  404414:	781b      	ldrb	r3, [r3, #0]
  404416:	b103      	cbz	r3, 40441a <socketInit+0xa>
  404418:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  40441a:	22b0      	movs	r2, #176	; 0xb0
  40441c:	2100      	movs	r1, #0
  40441e:	4808      	ldr	r0, [pc, #32]	; (404440 <socketInit+0x30>)
  404420:	4b08      	ldr	r3, [pc, #32]	; (404444 <socketInit+0x34>)
  404422:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404424:	4908      	ldr	r1, [pc, #32]	; (404448 <socketInit+0x38>)
  404426:	2002      	movs	r0, #2
  404428:	4b08      	ldr	r3, [pc, #32]	; (40444c <socketInit+0x3c>)
  40442a:	4798      	blx	r3
		gbSocketInit=1;
  40442c:	2201      	movs	r2, #1
  40442e:	4b03      	ldr	r3, [pc, #12]	; (40443c <socketInit+0x2c>)
  404430:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  404432:	2200      	movs	r2, #0
  404434:	4b06      	ldr	r3, [pc, #24]	; (404450 <socketInit+0x40>)
  404436:	801a      	strh	r2, [r3, #0]
	}
}
  404438:	e7ee      	b.n	404418 <socketInit+0x8>
  40443a:	bf00      	nop
  40443c:	2040c361 	.word	0x2040c361
  404440:	2040c9dc 	.word	0x2040c9dc
  404444:	0040217d 	.word	0x0040217d
  404448:	00404155 	.word	0x00404155
  40444c:	004028e5 	.word	0x004028e5
  404450:	2040c362 	.word	0x2040c362

00404454 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404454:	4b02      	ldr	r3, [pc, #8]	; (404460 <registerSocketCallback+0xc>)
  404456:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404458:	4b02      	ldr	r3, [pc, #8]	; (404464 <registerSocketCallback+0x10>)
  40445a:	6019      	str	r1, [r3, #0]
  40445c:	4770      	bx	lr
  40445e:	bf00      	nop
  404460:	2040ca8c 	.word	0x2040ca8c
  404464:	2040ca94 	.word	0x2040ca94

00404468 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  404468:	b5f0      	push	{r4, r5, r6, r7, lr}
  40446a:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  40446c:	2802      	cmp	r0, #2
  40446e:	d158      	bne.n	404522 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404470:	2901      	cmp	r1, #1
  404472:	d059      	beq.n	404528 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404474:	2902      	cmp	r1, #2
  404476:	d116      	bne.n	4044a6 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  404478:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40447a:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40447c:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40447e:	4b2e      	ldr	r3, [pc, #184]	; (404538 <socket+0xd0>)
  404480:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404484:	7a9b      	ldrb	r3, [r3, #10]
  404486:	2b00      	cmp	r3, #0
  404488:	d051      	beq.n	40452e <socket+0xc6>
  40448a:	1c63      	adds	r3, r4, #1
  40448c:	b2db      	uxtb	r3, r3
  40448e:	4f2a      	ldr	r7, [pc, #168]	; (404538 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404490:	b2dc      	uxtb	r4, r3
  404492:	42b4      	cmp	r4, r6
  404494:	d240      	bcs.n	404518 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  404496:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  404498:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  40449c:	7a89      	ldrb	r1, [r1, #10]
  40449e:	1c58      	adds	r0, r3, #1
  4044a0:	b121      	cbz	r1, 4044ac <socket+0x44>
  4044a2:	4603      	mov	r3, r0
  4044a4:	e7f4      	b.n	404490 <socket+0x28>
			return sock;
  4044a6:	f04f 34ff 	mov.w	r4, #4294967295
  4044aa:	e037      	b.n	40451c <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  4044ac:	4822      	ldr	r0, [pc, #136]	; (404538 <socket+0xd0>)
  4044ae:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4044b2:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4044b4:	2210      	movs	r2, #16
  4044b6:	2100      	movs	r1, #0
  4044b8:	4b20      	ldr	r3, [pc, #128]	; (40453c <socket+0xd4>)
  4044ba:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4044bc:	4b1e      	ldr	r3, [pc, #120]	; (404538 <socket+0xd0>)
  4044be:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4044c2:	2201      	movs	r2, #1
  4044c4:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4044c6:	4a1e      	ldr	r2, [pc, #120]	; (404540 <socket+0xd8>)
  4044c8:	8813      	ldrh	r3, [r2, #0]
  4044ca:	3301      	adds	r3, #1
  4044cc:	b29b      	uxth	r3, r3
  4044ce:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  4044d0:	8813      	ldrh	r3, [r2, #0]
  4044d2:	b29b      	uxth	r3, r3
  4044d4:	b91b      	cbnz	r3, 4044de <socket+0x76>
					++gu16SessionID;
  4044d6:	8813      	ldrh	r3, [r2, #0]
  4044d8:	3301      	adds	r3, #1
  4044da:	b29b      	uxth	r3, r3
  4044dc:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4044de:	4b18      	ldr	r3, [pc, #96]	; (404540 <socket+0xd8>)
  4044e0:	881a      	ldrh	r2, [r3, #0]
  4044e2:	b292      	uxth	r2, r2
  4044e4:	4b14      	ldr	r3, [pc, #80]	; (404538 <socket+0xd0>)
  4044e6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4044ea:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4044ec:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4044ee:	f016 0f01 	tst.w	r6, #1
  4044f2:	d013      	beq.n	40451c <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4044f4:	aa06      	add	r2, sp, #24
  4044f6:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4044fa:	4b0f      	ldr	r3, [pc, #60]	; (404538 <socket+0xd0>)
  4044fc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  404500:	2321      	movs	r3, #33	; 0x21
  404502:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  404504:	2300      	movs	r3, #0
  404506:	9302      	str	r3, [sp, #8]
  404508:	9301      	str	r3, [sp, #4]
  40450a:	9300      	str	r3, [sp, #0]
  40450c:	2304      	movs	r3, #4
  40450e:	2150      	movs	r1, #80	; 0x50
  404510:	2002      	movs	r0, #2
  404512:	4d0c      	ldr	r5, [pc, #48]	; (404544 <socket+0xdc>)
  404514:	47a8      	blx	r5
  404516:	e001      	b.n	40451c <socket+0xb4>
	SOCKET		sock = -1;
  404518:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  40451c:	4620      	mov	r0, r4
  40451e:	b007      	add	sp, #28
  404520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  404522:	f04f 34ff 	mov.w	r4, #4294967295
  404526:	e7f9      	b.n	40451c <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  404528:	2607      	movs	r6, #7
			u8Count = 0;
  40452a:	2400      	movs	r4, #0
  40452c:	e7a6      	b.n	40447c <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  40452e:	4802      	ldr	r0, [pc, #8]	; (404538 <socket+0xd0>)
  404530:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404534:	e7bd      	b.n	4044b2 <socket+0x4a>
  404536:	bf00      	nop
  404538:	2040c9dc 	.word	0x2040c9dc
  40453c:	0040217d 	.word	0x0040217d
  404540:	2040c362 	.word	0x2040c362
  404544:	004022e1 	.word	0x004022e1

00404548 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404548:	b530      	push	{r4, r5, lr}
  40454a:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40454c:	1e04      	subs	r4, r0, #0
  40454e:	db36      	blt.n	4045be <connect+0x76>
  404550:	2900      	cmp	r1, #0
  404552:	d034      	beq.n	4045be <connect+0x76>
  404554:	4b1d      	ldr	r3, [pc, #116]	; (4045cc <connect+0x84>)
  404556:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40455a:	7a9b      	ldrb	r3, [r3, #10]
  40455c:	b2db      	uxtb	r3, r3
  40455e:	2a00      	cmp	r2, #0
  404560:	d030      	beq.n	4045c4 <connect+0x7c>
  404562:	2b01      	cmp	r3, #1
  404564:	d12e      	bne.n	4045c4 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404566:	4b19      	ldr	r3, [pc, #100]	; (4045cc <connect+0x84>)
  404568:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40456c:	7adb      	ldrb	r3, [r3, #11]
  40456e:	f013 0f01 	tst.w	r3, #1
  404572:	d022      	beq.n	4045ba <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404574:	4b15      	ldr	r3, [pc, #84]	; (4045cc <connect+0x84>)
  404576:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40457a:	7adb      	ldrb	r3, [r3, #11]
  40457c:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404580:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404582:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404586:	2208      	movs	r2, #8
  404588:	a805      	add	r0, sp, #20
  40458a:	4b11      	ldr	r3, [pc, #68]	; (4045d0 <connect+0x88>)
  40458c:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  40458e:	480f      	ldr	r0, [pc, #60]	; (4045cc <connect+0x84>)
  404590:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404594:	88c3      	ldrh	r3, [r0, #6]
  404596:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40459a:	2300      	movs	r3, #0
  40459c:	9302      	str	r3, [sp, #8]
  40459e:	9301      	str	r3, [sp, #4]
  4045a0:	9300      	str	r3, [sp, #0]
  4045a2:	230c      	movs	r3, #12
  4045a4:	aa05      	add	r2, sp, #20
  4045a6:	4629      	mov	r1, r5
  4045a8:	2002      	movs	r0, #2
  4045aa:	4c0a      	ldr	r4, [pc, #40]	; (4045d4 <connect+0x8c>)
  4045ac:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4045ae:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4045b0:	bf18      	it	ne
  4045b2:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  4045b6:	b009      	add	sp, #36	; 0x24
  4045b8:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4045ba:	2544      	movs	r5, #68	; 0x44
  4045bc:	e7e1      	b.n	404582 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4045be:	f06f 0005 	mvn.w	r0, #5
  4045c2:	e7f8      	b.n	4045b6 <connect+0x6e>
  4045c4:	f06f 0005 	mvn.w	r0, #5
  4045c8:	e7f5      	b.n	4045b6 <connect+0x6e>
  4045ca:	bf00      	nop
  4045cc:	2040c9dc 	.word	0x2040c9dc
  4045d0:	00402169 	.word	0x00402169
  4045d4:	004022e1 	.word	0x004022e1

004045d8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4045d8:	b530      	push	{r4, r5, lr}
  4045da:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4045dc:	460c      	mov	r4, r1
  4045de:	3100      	adds	r1, #0
  4045e0:	bf18      	it	ne
  4045e2:	2101      	movne	r1, #1
  4045e4:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4045e8:	bf88      	it	hi
  4045ea:	2100      	movhi	r1, #0
  4045ec:	2900      	cmp	r1, #0
  4045ee:	d037      	beq.n	404660 <send+0x88>
  4045f0:	2800      	cmp	r0, #0
  4045f2:	db35      	blt.n	404660 <send+0x88>
  4045f4:	4b1d      	ldr	r3, [pc, #116]	; (40466c <send+0x94>)
  4045f6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4045fa:	7a9b      	ldrb	r3, [r3, #10]
  4045fc:	b2db      	uxtb	r3, r3
  4045fe:	2b01      	cmp	r3, #1
  404600:	d131      	bne.n	404666 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404602:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404606:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  40460a:	4b18      	ldr	r3, [pc, #96]	; (40466c <send+0x94>)
  40460c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404610:	88db      	ldrh	r3, [r3, #6]
  404612:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404616:	2807      	cmp	r0, #7
  404618:	bfb4      	ite	lt
  40461a:	2550      	movlt	r5, #80	; 0x50
  40461c:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40461e:	4b13      	ldr	r3, [pc, #76]	; (40466c <send+0x94>)
  404620:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404624:	7adb      	ldrb	r3, [r3, #11]
  404626:	f013 0f01 	tst.w	r3, #1
  40462a:	d017      	beq.n	40465c <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  40462c:	4b0f      	ldr	r3, [pc, #60]	; (40466c <send+0x94>)
  40462e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404632:	8905      	ldrh	r5, [r0, #8]
  404634:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404636:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404638:	9502      	str	r5, [sp, #8]
  40463a:	9201      	str	r2, [sp, #4]
  40463c:	9400      	str	r4, [sp, #0]
  40463e:	2310      	movs	r3, #16
  404640:	eb0d 0203 	add.w	r2, sp, r3
  404644:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404648:	2002      	movs	r0, #2
  40464a:	4c09      	ldr	r4, [pc, #36]	; (404670 <send+0x98>)
  40464c:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  40464e:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404650:	bf0c      	ite	eq
  404652:	2000      	moveq	r0, #0
  404654:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404658:	b009      	add	sp, #36	; 0x24
  40465a:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  40465c:	2145      	movs	r1, #69	; 0x45
  40465e:	e7eb      	b.n	404638 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404660:	f06f 0005 	mvn.w	r0, #5
  404664:	e7f8      	b.n	404658 <send+0x80>
  404666:	f06f 0005 	mvn.w	r0, #5
  40466a:	e7f5      	b.n	404658 <send+0x80>
  40466c:	2040c9dc 	.word	0x2040c9dc
  404670:	004022e1 	.word	0x004022e1

00404674 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404674:	2900      	cmp	r1, #0
  404676:	bf18      	it	ne
  404678:	2a00      	cmpne	r2, #0
  40467a:	d044      	beq.n	404706 <recv+0x92>
{
  40467c:	b570      	push	{r4, r5, r6, lr}
  40467e:	b086      	sub	sp, #24
  404680:	460e      	mov	r6, r1
  404682:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404684:	2800      	cmp	r0, #0
  404686:	db36      	blt.n	4046f6 <recv+0x82>
  404688:	4a20      	ldr	r2, [pc, #128]	; (40470c <recv+0x98>)
  40468a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40468e:	7a92      	ldrb	r2, [r2, #10]
  404690:	b2d2      	uxtb	r2, r2
  404692:	2a01      	cmp	r2, #1
  404694:	d132      	bne.n	4046fc <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404696:	4c1d      	ldr	r4, [pc, #116]	; (40470c <recv+0x98>)
  404698:	0101      	lsls	r1, r0, #4
  40469a:	1862      	adds	r2, r4, r1
  40469c:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  40469e:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  4046a0:	7b12      	ldrb	r2, [r2, #12]
  4046a2:	2a00      	cmp	r2, #0
  4046a4:	d12d      	bne.n	404702 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  4046a6:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  4046aa:	2101      	movs	r1, #1
  4046ac:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4046ae:	7ad2      	ldrb	r2, [r2, #11]
  4046b0:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  4046b2:	2a00      	cmp	r2, #0
  4046b4:	bf0c      	ite	eq
  4046b6:	2146      	moveq	r1, #70	; 0x46
  4046b8:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  4046ba:	b9d3      	cbnz	r3, 4046f2 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  4046bc:	f04f 33ff 	mov.w	r3, #4294967295
  4046c0:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  4046c2:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  4046c6:	4b11      	ldr	r3, [pc, #68]	; (40470c <recv+0x98>)
  4046c8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4046cc:	88c3      	ldrh	r3, [r0, #6]
  4046ce:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  4046d2:	2300      	movs	r3, #0
  4046d4:	9302      	str	r3, [sp, #8]
  4046d6:	9301      	str	r3, [sp, #4]
  4046d8:	9300      	str	r3, [sp, #0]
  4046da:	2308      	movs	r3, #8
  4046dc:	aa04      	add	r2, sp, #16
  4046de:	2002      	movs	r0, #2
  4046e0:	4c0b      	ldr	r4, [pc, #44]	; (404710 <recv+0x9c>)
  4046e2:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  4046e4:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  4046e6:	bf0c      	ite	eq
  4046e8:	2000      	moveq	r0, #0
  4046ea:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  4046ee:	b006      	add	sp, #24
  4046f0:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  4046f2:	9304      	str	r3, [sp, #16]
  4046f4:	e7e5      	b.n	4046c2 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4046f6:	f06f 0005 	mvn.w	r0, #5
  4046fa:	e7f8      	b.n	4046ee <recv+0x7a>
  4046fc:	f06f 0005 	mvn.w	r0, #5
  404700:	e7f5      	b.n	4046ee <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  404702:	2000      	movs	r0, #0
  404704:	e7f3      	b.n	4046ee <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404706:	f06f 0005 	mvn.w	r0, #5
}
  40470a:	4770      	bx	lr
  40470c:	2040c9dc 	.word	0x2040c9dc
  404710:	004022e1 	.word	0x004022e1

00404714 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404714:	b530      	push	{r4, r5, lr}
  404716:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404718:	1e04      	subs	r4, r0, #0
  40471a:	db2f      	blt.n	40477c <close+0x68>
  40471c:	4b1a      	ldr	r3, [pc, #104]	; (404788 <close+0x74>)
  40471e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404722:	7a9b      	ldrb	r3, [r3, #10]
  404724:	b2db      	uxtb	r3, r3
  404726:	2b01      	cmp	r3, #1
  404728:	d12b      	bne.n	404782 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  40472a:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  40472e:	4b16      	ldr	r3, [pc, #88]	; (404788 <close+0x74>)
  404730:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404734:	88da      	ldrh	r2, [r3, #6]
  404736:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  40473a:	2200      	movs	r2, #0
  40473c:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  40473e:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404740:	7adb      	ldrb	r3, [r3, #11]
  404742:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404746:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404748:	9202      	str	r2, [sp, #8]
  40474a:	9201      	str	r2, [sp, #4]
  40474c:	9200      	str	r2, [sp, #0]
  40474e:	f04f 0304 	mov.w	r3, #4
  404752:	aa05      	add	r2, sp, #20
  404754:	bf0c      	ite	eq
  404756:	2149      	moveq	r1, #73	; 0x49
  404758:	214e      	movne	r1, #78	; 0x4e
  40475a:	2002      	movs	r0, #2
  40475c:	4d0b      	ldr	r5, [pc, #44]	; (40478c <close+0x78>)
  40475e:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404760:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404762:	bf18      	it	ne
  404764:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404768:	2210      	movs	r2, #16
  40476a:	2100      	movs	r1, #0
  40476c:	4806      	ldr	r0, [pc, #24]	; (404788 <close+0x74>)
  40476e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404772:	4b07      	ldr	r3, [pc, #28]	; (404790 <close+0x7c>)
  404774:	4798      	blx	r3
	}
	return s8Ret;
}
  404776:	4628      	mov	r0, r5
  404778:	b007      	add	sp, #28
  40477a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40477c:	f06f 0505 	mvn.w	r5, #5
  404780:	e7f9      	b.n	404776 <close+0x62>
  404782:	f06f 0505 	mvn.w	r5, #5
  404786:	e7f6      	b.n	404776 <close+0x62>
  404788:	2040c9dc 	.word	0x2040c9dc
  40478c:	004022e1 	.word	0x004022e1
  404790:	0040217d 	.word	0x0040217d

00404794 <recvfrom>:
		5 June 2012
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404794:	2900      	cmp	r1, #0
  404796:	bf18      	it	ne
  404798:	2a00      	cmpne	r2, #0
  40479a:	d045      	beq.n	404828 <recvfrom+0x94>
{
  40479c:	b570      	push	{r4, r5, r6, lr}
  40479e:	b086      	sub	sp, #24
  4047a0:	460d      	mov	r5, r1
  4047a2:	4614      	mov	r4, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  4047a4:	2800      	cmp	r0, #0
  4047a6:	db34      	blt.n	404812 <recvfrom+0x7e>
  4047a8:	4a21      	ldr	r2, [pc, #132]	; (404830 <recvfrom+0x9c>)
  4047aa:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4047ae:	7a92      	ldrb	r2, [r2, #10]
  4047b0:	b2d2      	uxtb	r2, r2
  4047b2:	2a01      	cmp	r2, #1
  4047b4:	d130      	bne.n	404818 <recvfrom+0x84>
	{
		if(gastrSockets[sock].bIsUsed)
  4047b6:	4a1e      	ldr	r2, [pc, #120]	; (404830 <recvfrom+0x9c>)
  4047b8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4047bc:	7a92      	ldrb	r2, [r2, #10]
  4047be:	b372      	cbz	r2, 40481e <recvfrom+0x8a>
		{
			s16Ret = SOCK_ERR_NO_ERROR;
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
  4047c0:	4e1b      	ldr	r6, [pc, #108]	; (404830 <recvfrom+0x9c>)
  4047c2:	0101      	lsls	r1, r0, #4
  4047c4:	1872      	adds	r2, r6, r1
  4047c6:	5075      	str	r5, [r6, r1]
			gastrSockets[sock].u16UserBufferSize = u16BufLen;
  4047c8:	8094      	strh	r4, [r2, #4]

			if(!gastrSockets[sock].bIsRecvPending)
  4047ca:	7b12      	ldrb	r2, [r2, #12]
  4047cc:	bb52      	cbnz	r2, 404824 <recvfrom+0x90>
			{
				tstrRecvCmd	strRecv;

				gastrSockets[sock].bIsRecvPending = 1;
  4047ce:	eb06 1200 	add.w	r2, r6, r0, lsl #4
  4047d2:	2101      	movs	r1, #1
  4047d4:	7311      	strb	r1, [r2, #12]

				/* Check the timeout value. */
				if(u32Timeoutmsec == 0)
  4047d6:	b9d3      	cbnz	r3, 40480e <recvfrom+0x7a>
					strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  4047d8:	f04f 33ff 	mov.w	r3, #4294967295
  4047dc:	9304      	str	r3, [sp, #16]
				else
					strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
				strRecv.sock = sock;
  4047de:	f88d 0014 	strb.w	r0, [sp, #20]
				strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  4047e2:	4b13      	ldr	r3, [pc, #76]	; (404830 <recvfrom+0x9c>)
  4047e4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4047e8:	88c3      	ldrh	r3, [r0, #6]
  4047ea:	f8ad 3016 	strh.w	r3, [sp, #22]
				
				s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  4047ee:	2300      	movs	r3, #0
  4047f0:	9302      	str	r3, [sp, #8]
  4047f2:	9301      	str	r3, [sp, #4]
  4047f4:	9300      	str	r3, [sp, #0]
  4047f6:	2308      	movs	r3, #8
  4047f8:	aa04      	add	r2, sp, #16
  4047fa:	2148      	movs	r1, #72	; 0x48
  4047fc:	2002      	movs	r0, #2
  4047fe:	4c0d      	ldr	r4, [pc, #52]	; (404834 <recvfrom+0xa0>)
  404800:	47a0      	blx	r4
				if(s16Ret != SOCK_ERR_NO_ERROR)
  404802:	2800      	cmp	r0, #0
				{
					s16Ret = SOCK_ERR_BUFFER_FULL;
  404804:	bf0c      	ite	eq
  404806:	2000      	moveq	r0, #0
  404808:	f06f 000d 	mvnne.w	r0, #13
  40480c:	e008      	b.n	404820 <recvfrom+0x8c>
					strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  40480e:	9304      	str	r3, [sp, #16]
  404810:	e7e5      	b.n	4047de <recvfrom+0x4a>
			}
		}
	}
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
  404812:	f06f 0005 	mvn.w	r0, #5
  404816:	e003      	b.n	404820 <recvfrom+0x8c>
  404818:	f06f 0005 	mvn.w	r0, #5
  40481c:	e000      	b.n	404820 <recvfrom+0x8c>
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
  40481e:	2000      	movs	r0, #0
	}
	return s16Ret;
}
  404820:	b006      	add	sp, #24
  404822:	bd70      	pop	{r4, r5, r6, pc}
			s16Ret = SOCK_ERR_NO_ERROR;
  404824:	2000      	movs	r0, #0
  404826:	e7fb      	b.n	404820 <recvfrom+0x8c>
		s16Ret = SOCK_ERR_INVALID_ARG;
  404828:	f06f 0005 	mvn.w	r0, #5
}
  40482c:	4770      	bx	lr
  40482e:	bf00      	nop
  404830:	2040c9dc 	.word	0x2040c9dc
  404834:	004022e1 	.word	0x004022e1

00404838 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404838:	b570      	push	{r4, r5, r6, lr}
  40483a:	b082      	sub	sp, #8
  40483c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  40483e:	4b2b      	ldr	r3, [pc, #172]	; (4048ec <spi_flash_enable+0xb4>)
  404840:	4798      	blx	r3
  404842:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404846:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  40484a:	d203      	bcs.n	404854 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  40484c:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  40484e:	4620      	mov	r0, r4
  404850:	b002      	add	sp, #8
  404852:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404854:	a901      	add	r1, sp, #4
  404856:	f241 4010 	movw	r0, #5136	; 0x1410
  40485a:	4b25      	ldr	r3, [pc, #148]	; (4048f0 <spi_flash_enable+0xb8>)
  40485c:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  40485e:	4604      	mov	r4, r0
  404860:	2800      	cmp	r0, #0
  404862:	d1f4      	bne.n	40484e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  404864:	4b23      	ldr	r3, [pc, #140]	; (4048f4 <spi_flash_enable+0xbc>)
  404866:	9a01      	ldr	r2, [sp, #4]
  404868:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  40486a:	4923      	ldr	r1, [pc, #140]	; (4048f8 <spi_flash_enable+0xc0>)
  40486c:	4319      	orrs	r1, r3
  40486e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404870:	f241 4010 	movw	r0, #5136	; 0x1410
  404874:	4b21      	ldr	r3, [pc, #132]	; (4048fc <spi_flash_enable+0xc4>)
  404876:	4798      	blx	r3
		if(enable) {
  404878:	b305      	cbz	r5, 4048bc <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  40487a:	2100      	movs	r1, #0
  40487c:	4820      	ldr	r0, [pc, #128]	; (404900 <spi_flash_enable+0xc8>)
  40487e:	4d1f      	ldr	r5, [pc, #124]	; (4048fc <spi_flash_enable+0xc4>)
  404880:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404882:	21ab      	movs	r1, #171	; 0xab
  404884:	481f      	ldr	r0, [pc, #124]	; (404904 <spi_flash_enable+0xcc>)
  404886:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404888:	2101      	movs	r1, #1
  40488a:	481f      	ldr	r0, [pc, #124]	; (404908 <spi_flash_enable+0xd0>)
  40488c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  40488e:	2100      	movs	r1, #0
  404890:	481e      	ldr	r0, [pc, #120]	; (40490c <spi_flash_enable+0xd4>)
  404892:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404894:	2181      	movs	r1, #129	; 0x81
  404896:	481e      	ldr	r0, [pc, #120]	; (404910 <spi_flash_enable+0xd8>)
  404898:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  40489a:	4e1e      	ldr	r6, [pc, #120]	; (404914 <spi_flash_enable+0xdc>)
  40489c:	4d1e      	ldr	r5, [pc, #120]	; (404918 <spi_flash_enable+0xe0>)
  40489e:	4630      	mov	r0, r6
  4048a0:	47a8      	blx	r5
  4048a2:	2801      	cmp	r0, #1
  4048a4:	d1fb      	bne.n	40489e <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  4048a6:	4913      	ldr	r1, [pc, #76]	; (4048f4 <spi_flash_enable+0xbc>)
  4048a8:	9b01      	ldr	r3, [sp, #4]
  4048aa:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  4048ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4048b0:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4048b2:	f241 4010 	movw	r0, #5136	; 0x1410
  4048b6:	4b11      	ldr	r3, [pc, #68]	; (4048fc <spi_flash_enable+0xc4>)
  4048b8:	4798      	blx	r3
  4048ba:	e7c8      	b.n	40484e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4048bc:	2100      	movs	r1, #0
  4048be:	4810      	ldr	r0, [pc, #64]	; (404900 <spi_flash_enable+0xc8>)
  4048c0:	4d0e      	ldr	r5, [pc, #56]	; (4048fc <spi_flash_enable+0xc4>)
  4048c2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4048c4:	21b9      	movs	r1, #185	; 0xb9
  4048c6:	480f      	ldr	r0, [pc, #60]	; (404904 <spi_flash_enable+0xcc>)
  4048c8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4048ca:	2101      	movs	r1, #1
  4048cc:	480e      	ldr	r0, [pc, #56]	; (404908 <spi_flash_enable+0xd0>)
  4048ce:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4048d0:	2100      	movs	r1, #0
  4048d2:	480e      	ldr	r0, [pc, #56]	; (40490c <spi_flash_enable+0xd4>)
  4048d4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  4048d6:	2181      	movs	r1, #129	; 0x81
  4048d8:	480d      	ldr	r0, [pc, #52]	; (404910 <spi_flash_enable+0xd8>)
  4048da:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4048dc:	4e0d      	ldr	r6, [pc, #52]	; (404914 <spi_flash_enable+0xdc>)
  4048de:	4d0e      	ldr	r5, [pc, #56]	; (404918 <spi_flash_enable+0xe0>)
  4048e0:	4630      	mov	r0, r6
  4048e2:	47a8      	blx	r5
  4048e4:	2801      	cmp	r0, #1
  4048e6:	d1fb      	bne.n	4048e0 <spi_flash_enable+0xa8>
  4048e8:	e7dd      	b.n	4048a6 <spi_flash_enable+0x6e>
  4048ea:	bf00      	nop
  4048ec:	004031a9 	.word	0x004031a9
  4048f0:	004034a5 	.word	0x004034a5
  4048f4:	f8888fff 	.word	0xf8888fff
  4048f8:	01111000 	.word	0x01111000
  4048fc:	004034b1 	.word	0x004034b1
  404900:	00010208 	.word	0x00010208
  404904:	0001020c 	.word	0x0001020c
  404908:	00010214 	.word	0x00010214
  40490c:	0001021c 	.word	0x0001021c
  404910:	00010204 	.word	0x00010204
  404914:	00010218 	.word	0x00010218
  404918:	00403499 	.word	0x00403499

0040491c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40491c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40491e:	4810      	ldr	r0, [pc, #64]	; (404960 <sysclk_init+0x44>)
  404920:	4b10      	ldr	r3, [pc, #64]	; (404964 <sysclk_init+0x48>)
  404922:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404924:	213e      	movs	r1, #62	; 0x3e
  404926:	2000      	movs	r0, #0
  404928:	4b0f      	ldr	r3, [pc, #60]	; (404968 <sysclk_init+0x4c>)
  40492a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40492c:	4c0f      	ldr	r4, [pc, #60]	; (40496c <sysclk_init+0x50>)
  40492e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404930:	2800      	cmp	r0, #0
  404932:	d0fc      	beq.n	40492e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404934:	4b0e      	ldr	r3, [pc, #56]	; (404970 <sysclk_init+0x54>)
  404936:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404938:	4a0e      	ldr	r2, [pc, #56]	; (404974 <sysclk_init+0x58>)
  40493a:	4b0f      	ldr	r3, [pc, #60]	; (404978 <sysclk_init+0x5c>)
  40493c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40493e:	4c0f      	ldr	r4, [pc, #60]	; (40497c <sysclk_init+0x60>)
  404940:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404942:	2800      	cmp	r0, #0
  404944:	d0fc      	beq.n	404940 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404946:	2002      	movs	r0, #2
  404948:	4b0d      	ldr	r3, [pc, #52]	; (404980 <sysclk_init+0x64>)
  40494a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40494c:	2000      	movs	r0, #0
  40494e:	4b0d      	ldr	r3, [pc, #52]	; (404984 <sysclk_init+0x68>)
  404950:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404952:	4b0d      	ldr	r3, [pc, #52]	; (404988 <sysclk_init+0x6c>)
  404954:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404956:	4802      	ldr	r0, [pc, #8]	; (404960 <sysclk_init+0x44>)
  404958:	4b02      	ldr	r3, [pc, #8]	; (404964 <sysclk_init+0x48>)
  40495a:	4798      	blx	r3
  40495c:	bd10      	pop	{r4, pc}
  40495e:	bf00      	nop
  404960:	11e1a300 	.word	0x11e1a300
  404964:	00405599 	.word	0x00405599
  404968:	00405061 	.word	0x00405061
  40496c:	004050b5 	.word	0x004050b5
  404970:	004050c5 	.word	0x004050c5
  404974:	20183f01 	.word	0x20183f01
  404978:	400e0600 	.word	0x400e0600
  40497c:	004050d5 	.word	0x004050d5
  404980:	00404fc5 	.word	0x00404fc5
  404984:	00404ffd 	.word	0x00404ffd
  404988:	0040548d 	.word	0x0040548d

0040498c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  404990:	b980      	cbnz	r0, 4049b4 <_read+0x28>
  404992:	460c      	mov	r4, r1
  404994:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  404996:	2a00      	cmp	r2, #0
  404998:	dd0f      	ble.n	4049ba <_read+0x2e>
  40499a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40499c:	4e08      	ldr	r6, [pc, #32]	; (4049c0 <_read+0x34>)
  40499e:	4d09      	ldr	r5, [pc, #36]	; (4049c4 <_read+0x38>)
  4049a0:	6830      	ldr	r0, [r6, #0]
  4049a2:	4621      	mov	r1, r4
  4049a4:	682b      	ldr	r3, [r5, #0]
  4049a6:	4798      	blx	r3
		ptr++;
  4049a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4049aa:	42bc      	cmp	r4, r7
  4049ac:	d1f8      	bne.n	4049a0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4049ae:	4640      	mov	r0, r8
  4049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4049b4:	f04f 38ff 	mov.w	r8, #4294967295
  4049b8:	e7f9      	b.n	4049ae <_read+0x22>
	for (; len > 0; --len) {
  4049ba:	4680      	mov	r8, r0
  4049bc:	e7f7      	b.n	4049ae <_read+0x22>
  4049be:	bf00      	nop
  4049c0:	2040caa0 	.word	0x2040caa0
  4049c4:	2040ca98 	.word	0x2040ca98

004049c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4049c8:	3801      	subs	r0, #1
  4049ca:	2802      	cmp	r0, #2
  4049cc:	d815      	bhi.n	4049fa <_write+0x32>
{
  4049ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4049d2:	460e      	mov	r6, r1
  4049d4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4049d6:	b19a      	cbz	r2, 404a00 <_write+0x38>
  4049d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4049da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404a14 <_write+0x4c>
  4049de:	4f0c      	ldr	r7, [pc, #48]	; (404a10 <_write+0x48>)
  4049e0:	f8d8 0000 	ldr.w	r0, [r8]
  4049e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4049e8:	683b      	ldr	r3, [r7, #0]
  4049ea:	4798      	blx	r3
  4049ec:	2800      	cmp	r0, #0
  4049ee:	db0a      	blt.n	404a06 <_write+0x3e>
  4049f0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4049f2:	3c01      	subs	r4, #1
  4049f4:	d1f4      	bne.n	4049e0 <_write+0x18>
  4049f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4049fa:	f04f 30ff 	mov.w	r0, #4294967295
  4049fe:	4770      	bx	lr
	for (; len != 0; --len) {
  404a00:	4610      	mov	r0, r2
  404a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404a06:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a0e:	bf00      	nop
  404a10:	2040ca9c 	.word	0x2040ca9c
  404a14:	2040caa0 	.word	0x2040caa0

00404a18 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404a1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404a1e:	4b5c      	ldr	r3, [pc, #368]	; (404b90 <board_init+0x178>)
  404a20:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404a22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404a26:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404a2a:	4b5a      	ldr	r3, [pc, #360]	; (404b94 <board_init+0x17c>)
  404a2c:	2200      	movs	r2, #0
  404a2e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404a32:	695a      	ldr	r2, [r3, #20]
  404a34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404a38:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404a3e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404a42:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404a46:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404a4a:	f007 0007 	and.w	r0, r7, #7
  404a4e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404a50:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404a54:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404a58:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404a5c:	f3bf 8f4f 	dsb	sy
  404a60:	f04f 34ff 	mov.w	r4, #4294967295
  404a64:	fa04 fc00 	lsl.w	ip, r4, r0
  404a68:	fa06 f000 	lsl.w	r0, r6, r0
  404a6c:	fa04 f40e 	lsl.w	r4, r4, lr
  404a70:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404a74:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404a76:	463a      	mov	r2, r7
  404a78:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404a7a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404a7e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404a82:	3a01      	subs	r2, #1
  404a84:	4423      	add	r3, r4
  404a86:	f1b2 3fff 	cmp.w	r2, #4294967295
  404a8a:	d1f6      	bne.n	404a7a <board_init+0x62>
        } while(sets--);
  404a8c:	3e01      	subs	r6, #1
  404a8e:	4460      	add	r0, ip
  404a90:	f1b6 3fff 	cmp.w	r6, #4294967295
  404a94:	d1ef      	bne.n	404a76 <board_init+0x5e>
  404a96:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404a9a:	4b3e      	ldr	r3, [pc, #248]	; (404b94 <board_init+0x17c>)
  404a9c:	695a      	ldr	r2, [r3, #20]
  404a9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404aa2:	615a      	str	r2, [r3, #20]
  404aa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404aa8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404aac:	4a3a      	ldr	r2, [pc, #232]	; (404b98 <board_init+0x180>)
  404aae:	493b      	ldr	r1, [pc, #236]	; (404b9c <board_init+0x184>)
  404ab0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404ab2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404ab6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404abc:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404ac0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404ac4:	f022 0201 	bic.w	r2, r2, #1
  404ac8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404acc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  404ad0:	f022 0201 	bic.w	r2, r2, #1
  404ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404ad8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404adc:	f3bf 8f6f 	isb	sy
  404ae0:	200a      	movs	r0, #10
  404ae2:	4c2f      	ldr	r4, [pc, #188]	; (404ba0 <board_init+0x188>)
  404ae4:	47a0      	blx	r4
  404ae6:	200b      	movs	r0, #11
  404ae8:	47a0      	blx	r4
  404aea:	200c      	movs	r0, #12
  404aec:	47a0      	blx	r4
  404aee:	2010      	movs	r0, #16
  404af0:	47a0      	blx	r4
  404af2:	2011      	movs	r0, #17
  404af4:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404af6:	4b2b      	ldr	r3, [pc, #172]	; (404ba4 <board_init+0x18c>)
  404af8:	f44f 7280 	mov.w	r2, #256	; 0x100
  404afc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404afe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404b02:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404b04:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404b0c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404b0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  404b12:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404b18:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404b1a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  404b20:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404b22:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404b26:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404b28:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404b2a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404b2e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404b30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404b34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404b38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404b3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404b40:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404b46:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404b48:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404b4e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404b50:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404b54:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404b56:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404b58:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404b5c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404b5e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404b60:	4a11      	ldr	r2, [pc, #68]	; (404ba8 <board_init+0x190>)
  404b62:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404b66:	f043 0310 	orr.w	r3, r3, #16
  404b6a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  404b6e:	4b0f      	ldr	r3, [pc, #60]	; (404bac <board_init+0x194>)
  404b70:	2210      	movs	r2, #16
  404b72:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404b74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404b78:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404b7a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404b80:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404b82:	4311      	orrs	r1, r2
  404b84:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404b86:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404b88:	4311      	orrs	r1, r2
  404b8a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404b8c:	605a      	str	r2, [r3, #4]
  404b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b90:	400e1850 	.word	0x400e1850
  404b94:	e000ed00 	.word	0xe000ed00
  404b98:	400e0c00 	.word	0x400e0c00
  404b9c:	5a00080c 	.word	0x5a00080c
  404ba0:	004050e5 	.word	0x004050e5
  404ba4:	400e1200 	.word	0x400e1200
  404ba8:	40088000 	.word	0x40088000
  404bac:	400e1000 	.word	0x400e1000

00404bb0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404bb0:	b90a      	cbnz	r2, 404bb6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404bb2:	6601      	str	r1, [r0, #96]	; 0x60
  404bb4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404bb6:	6641      	str	r1, [r0, #100]	; 0x64
  404bb8:	4770      	bx	lr

00404bba <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404bba:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404bbc:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404bc0:	d03a      	beq.n	404c38 <pio_set_peripheral+0x7e>
  404bc2:	d813      	bhi.n	404bec <pio_set_peripheral+0x32>
  404bc4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404bc8:	d025      	beq.n	404c16 <pio_set_peripheral+0x5c>
  404bca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404bce:	d10a      	bne.n	404be6 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404bd0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404bd2:	4313      	orrs	r3, r2
  404bd4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404bd6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404bd8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404bda:	400b      	ands	r3, r1
  404bdc:	ea23 0302 	bic.w	r3, r3, r2
  404be0:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404be2:	6042      	str	r2, [r0, #4]
  404be4:	4770      	bx	lr
	switch (ul_type) {
  404be6:	2900      	cmp	r1, #0
  404be8:	d1fb      	bne.n	404be2 <pio_set_peripheral+0x28>
  404bea:	4770      	bx	lr
  404bec:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404bf0:	d021      	beq.n	404c36 <pio_set_peripheral+0x7c>
  404bf2:	d809      	bhi.n	404c08 <pio_set_peripheral+0x4e>
  404bf4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404bf8:	d1f3      	bne.n	404be2 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  404bfa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404bfc:	4313      	orrs	r3, r2
  404bfe:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c00:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404c02:	4313      	orrs	r3, r2
  404c04:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404c06:	e7ec      	b.n	404be2 <pio_set_peripheral+0x28>
	switch (ul_type) {
  404c08:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404c0c:	d013      	beq.n	404c36 <pio_set_peripheral+0x7c>
  404c0e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404c12:	d010      	beq.n	404c36 <pio_set_peripheral+0x7c>
  404c14:	e7e5      	b.n	404be2 <pio_set_peripheral+0x28>
{
  404c16:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c18:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404c1a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  404c1c:	43d3      	mvns	r3, r2
  404c1e:	4021      	ands	r1, r4
  404c20:	461c      	mov	r4, r3
  404c22:	4019      	ands	r1, r3
  404c24:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c26:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404c28:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404c2a:	400b      	ands	r3, r1
  404c2c:	4023      	ands	r3, r4
  404c2e:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  404c30:	6042      	str	r2, [r0, #4]
}
  404c32:	f85d 4b04 	ldr.w	r4, [sp], #4
  404c36:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c38:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404c3a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404c3c:	400b      	ands	r3, r1
  404c3e:	ea23 0302 	bic.w	r3, r3, r2
  404c42:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c44:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404c46:	4313      	orrs	r3, r2
  404c48:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404c4a:	e7ca      	b.n	404be2 <pio_set_peripheral+0x28>

00404c4c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404c4c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404c4e:	f012 0f01 	tst.w	r2, #1
  404c52:	d10d      	bne.n	404c70 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  404c54:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404c56:	f012 0f0a 	tst.w	r2, #10
  404c5a:	d00b      	beq.n	404c74 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  404c5c:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  404c5e:	f012 0f02 	tst.w	r2, #2
  404c62:	d109      	bne.n	404c78 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  404c64:	f012 0f08 	tst.w	r2, #8
  404c68:	d008      	beq.n	404c7c <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  404c6a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  404c6e:	e005      	b.n	404c7c <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  404c70:	6641      	str	r1, [r0, #100]	; 0x64
  404c72:	e7f0      	b.n	404c56 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  404c74:	6241      	str	r1, [r0, #36]	; 0x24
  404c76:	e7f2      	b.n	404c5e <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  404c78:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  404c7c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404c7e:	6001      	str	r1, [r0, #0]
  404c80:	4770      	bx	lr

00404c82 <pio_set_output>:
{
  404c82:	b410      	push	{r4}
  404c84:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  404c86:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404c88:	b94c      	cbnz	r4, 404c9e <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  404c8a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  404c8c:	b14b      	cbz	r3, 404ca2 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  404c8e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404c90:	b94a      	cbnz	r2, 404ca6 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  404c92:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  404c94:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  404c96:	6001      	str	r1, [r0, #0]
}
  404c98:	f85d 4b04 	ldr.w	r4, [sp], #4
  404c9c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404c9e:	6641      	str	r1, [r0, #100]	; 0x64
  404ca0:	e7f4      	b.n	404c8c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404ca2:	6541      	str	r1, [r0, #84]	; 0x54
  404ca4:	e7f4      	b.n	404c90 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  404ca6:	6301      	str	r1, [r0, #48]	; 0x30
  404ca8:	e7f4      	b.n	404c94 <pio_set_output+0x12>

00404caa <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  404caa:	f012 0f10 	tst.w	r2, #16
  404cae:	d012      	beq.n	404cd6 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  404cb0:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404cb4:	f012 0f20 	tst.w	r2, #32
  404cb8:	d007      	beq.n	404cca <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  404cba:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  404cbe:	f012 0f40 	tst.w	r2, #64	; 0x40
  404cc2:	d005      	beq.n	404cd0 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  404cc4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  404cc8:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  404cca:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  404cce:	e7f6      	b.n	404cbe <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  404cd0:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  404cd4:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  404cd6:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  404cda:	4770      	bx	lr

00404cdc <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  404cdc:	6401      	str	r1, [r0, #64]	; 0x40
  404cde:	4770      	bx	lr

00404ce0 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  404ce0:	6441      	str	r1, [r0, #68]	; 0x44
  404ce2:	4770      	bx	lr

00404ce4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404ce4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  404ce6:	4770      	bx	lr

00404ce8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  404ce8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  404cea:	4770      	bx	lr

00404cec <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404cec:	b570      	push	{r4, r5, r6, lr}
  404cee:	b082      	sub	sp, #8
  404cf0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404cf2:	4c46      	ldr	r4, [pc, #280]	; (404e0c <pio_configure_pin+0x120>)
  404cf4:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  404cf8:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  404cfa:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  404cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404d02:	d059      	beq.n	404db8 <pio_configure_pin+0xcc>
  404d04:	d80a      	bhi.n	404d1c <pio_configure_pin+0x30>
  404d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404d0a:	d02f      	beq.n	404d6c <pio_configure_pin+0x80>
  404d0c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404d10:	d03f      	beq.n	404d92 <pio_configure_pin+0xa6>
  404d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404d16:	d016      	beq.n	404d46 <pio_configure_pin+0x5a>
		return 0;
  404d18:	2000      	movs	r0, #0
  404d1a:	e012      	b.n	404d42 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  404d1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404d20:	d05d      	beq.n	404dde <pio_configure_pin+0xf2>
  404d22:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404d26:	d05a      	beq.n	404dde <pio_configure_pin+0xf2>
  404d28:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404d2c:	d1f4      	bne.n	404d18 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  404d2e:	f000 011f 	and.w	r1, r0, #31
  404d32:	2601      	movs	r6, #1
  404d34:	462a      	mov	r2, r5
  404d36:	fa06 f101 	lsl.w	r1, r6, r1
  404d3a:	4620      	mov	r0, r4
  404d3c:	4b34      	ldr	r3, [pc, #208]	; (404e10 <pio_configure_pin+0x124>)
  404d3e:	4798      	blx	r3
	return 1;
  404d40:	4630      	mov	r0, r6
}
  404d42:	b002      	add	sp, #8
  404d44:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404d46:	f000 001f 	and.w	r0, r0, #31
  404d4a:	2601      	movs	r6, #1
  404d4c:	4086      	lsls	r6, r0
  404d4e:	4632      	mov	r2, r6
  404d50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404d54:	4620      	mov	r0, r4
  404d56:	4b2f      	ldr	r3, [pc, #188]	; (404e14 <pio_configure_pin+0x128>)
  404d58:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404d5a:	f015 0f01 	tst.w	r5, #1
  404d5e:	d102      	bne.n	404d66 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  404d60:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404d62:	2001      	movs	r0, #1
  404d64:	e7ed      	b.n	404d42 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404d66:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404d68:	2001      	movs	r0, #1
  404d6a:	e7ea      	b.n	404d42 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404d6c:	f000 001f 	and.w	r0, r0, #31
  404d70:	2601      	movs	r6, #1
  404d72:	4086      	lsls	r6, r0
  404d74:	4632      	mov	r2, r6
  404d76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404d7a:	4620      	mov	r0, r4
  404d7c:	4b25      	ldr	r3, [pc, #148]	; (404e14 <pio_configure_pin+0x128>)
  404d7e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404d80:	f015 0f01 	tst.w	r5, #1
  404d84:	d102      	bne.n	404d8c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  404d86:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404d88:	2001      	movs	r0, #1
  404d8a:	e7da      	b.n	404d42 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404d8c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404d8e:	2001      	movs	r0, #1
  404d90:	e7d7      	b.n	404d42 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404d92:	f000 001f 	and.w	r0, r0, #31
  404d96:	2601      	movs	r6, #1
  404d98:	4086      	lsls	r6, r0
  404d9a:	4632      	mov	r2, r6
  404d9c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404da0:	4620      	mov	r0, r4
  404da2:	4b1c      	ldr	r3, [pc, #112]	; (404e14 <pio_configure_pin+0x128>)
  404da4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404da6:	f015 0f01 	tst.w	r5, #1
  404daa:	d102      	bne.n	404db2 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  404dac:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404dae:	2001      	movs	r0, #1
  404db0:	e7c7      	b.n	404d42 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404db2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404db4:	2001      	movs	r0, #1
  404db6:	e7c4      	b.n	404d42 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404db8:	f000 001f 	and.w	r0, r0, #31
  404dbc:	2601      	movs	r6, #1
  404dbe:	4086      	lsls	r6, r0
  404dc0:	4632      	mov	r2, r6
  404dc2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404dc6:	4620      	mov	r0, r4
  404dc8:	4b12      	ldr	r3, [pc, #72]	; (404e14 <pio_configure_pin+0x128>)
  404dca:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404dcc:	f015 0f01 	tst.w	r5, #1
  404dd0:	d102      	bne.n	404dd8 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  404dd2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404dd4:	2001      	movs	r0, #1
  404dd6:	e7b4      	b.n	404d42 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404dd8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404dda:	2001      	movs	r0, #1
  404ddc:	e7b1      	b.n	404d42 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404dde:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404de2:	f000 011f 	and.w	r1, r0, #31
  404de6:	2601      	movs	r6, #1
  404de8:	ea05 0306 	and.w	r3, r5, r6
  404dec:	9300      	str	r3, [sp, #0]
  404dee:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404df2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404df6:	bf14      	ite	ne
  404df8:	2200      	movne	r2, #0
  404dfa:	2201      	moveq	r2, #1
  404dfc:	fa06 f101 	lsl.w	r1, r6, r1
  404e00:	4620      	mov	r0, r4
  404e02:	4c05      	ldr	r4, [pc, #20]	; (404e18 <pio_configure_pin+0x12c>)
  404e04:	47a0      	blx	r4
	return 1;
  404e06:	4630      	mov	r0, r6
		break;
  404e08:	e79b      	b.n	404d42 <pio_configure_pin+0x56>
  404e0a:	bf00      	nop
  404e0c:	00200707 	.word	0x00200707
  404e10:	00404c4d 	.word	0x00404c4d
  404e14:	00404bbb 	.word	0x00404bbb
  404e18:	00404c83 	.word	0x00404c83

00404e1c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e20:	4604      	mov	r4, r0
  404e22:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404e24:	4b0e      	ldr	r3, [pc, #56]	; (404e60 <pio_handler_process+0x44>)
  404e26:	4798      	blx	r3
  404e28:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404e2a:	4620      	mov	r0, r4
  404e2c:	4b0d      	ldr	r3, [pc, #52]	; (404e64 <pio_handler_process+0x48>)
  404e2e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  404e30:	4005      	ands	r5, r0
  404e32:	d013      	beq.n	404e5c <pio_handler_process+0x40>
  404e34:	4c0c      	ldr	r4, [pc, #48]	; (404e68 <pio_handler_process+0x4c>)
  404e36:	f104 0660 	add.w	r6, r4, #96	; 0x60
  404e3a:	e003      	b.n	404e44 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  404e3c:	42b4      	cmp	r4, r6
  404e3e:	d00d      	beq.n	404e5c <pio_handler_process+0x40>
  404e40:	3410      	adds	r4, #16
		while (status != 0) {
  404e42:	b15d      	cbz	r5, 404e5c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  404e44:	6820      	ldr	r0, [r4, #0]
  404e46:	4540      	cmp	r0, r8
  404e48:	d1f8      	bne.n	404e3c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404e4a:	6861      	ldr	r1, [r4, #4]
  404e4c:	4229      	tst	r1, r5
  404e4e:	d0f5      	beq.n	404e3c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404e50:	68e3      	ldr	r3, [r4, #12]
  404e52:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  404e54:	6863      	ldr	r3, [r4, #4]
  404e56:	ea25 0503 	bic.w	r5, r5, r3
  404e5a:	e7ef      	b.n	404e3c <pio_handler_process+0x20>
  404e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e60:	00404ce5 	.word	0x00404ce5
  404e64:	00404ce9 	.word	0x00404ce9
  404e68:	2040c364 	.word	0x2040c364

00404e6c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404e6e:	4c18      	ldr	r4, [pc, #96]	; (404ed0 <pio_handler_set+0x64>)
  404e70:	6826      	ldr	r6, [r4, #0]
  404e72:	2e06      	cmp	r6, #6
  404e74:	d82a      	bhi.n	404ecc <pio_handler_set+0x60>
  404e76:	f04f 0c00 	mov.w	ip, #0
  404e7a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404e7c:	4f15      	ldr	r7, [pc, #84]	; (404ed4 <pio_handler_set+0x68>)
  404e7e:	e004      	b.n	404e8a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404e80:	3401      	adds	r4, #1
  404e82:	b2e4      	uxtb	r4, r4
  404e84:	46a4      	mov	ip, r4
  404e86:	42a6      	cmp	r6, r4
  404e88:	d309      	bcc.n	404e9e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  404e8a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404e8c:	0125      	lsls	r5, r4, #4
  404e8e:	597d      	ldr	r5, [r7, r5]
  404e90:	428d      	cmp	r5, r1
  404e92:	d1f5      	bne.n	404e80 <pio_handler_set+0x14>
  404e94:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  404e98:	686d      	ldr	r5, [r5, #4]
  404e9a:	4295      	cmp	r5, r2
  404e9c:	d1f0      	bne.n	404e80 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404e9e:	4d0d      	ldr	r5, [pc, #52]	; (404ed4 <pio_handler_set+0x68>)
  404ea0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  404ea4:	eb05 040e 	add.w	r4, r5, lr
  404ea8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  404eac:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  404eae:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  404eb0:	9906      	ldr	r1, [sp, #24]
  404eb2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  404eb4:	3601      	adds	r6, #1
  404eb6:	4566      	cmp	r6, ip
  404eb8:	d005      	beq.n	404ec6 <pio_handler_set+0x5a>
  404eba:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404ebc:	461a      	mov	r2, r3
  404ebe:	4b06      	ldr	r3, [pc, #24]	; (404ed8 <pio_handler_set+0x6c>)
  404ec0:	4798      	blx	r3

	return 0;
  404ec2:	2000      	movs	r0, #0
  404ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  404ec6:	4902      	ldr	r1, [pc, #8]	; (404ed0 <pio_handler_set+0x64>)
  404ec8:	600e      	str	r6, [r1, #0]
  404eca:	e7f6      	b.n	404eba <pio_handler_set+0x4e>
		return 1;
  404ecc:	2001      	movs	r0, #1
}
  404ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ed0:	2040c3d4 	.word	0x2040c3d4
  404ed4:	2040c364 	.word	0x2040c364
  404ed8:	00404cab 	.word	0x00404cab

00404edc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404edc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  404ede:	210a      	movs	r1, #10
  404ee0:	4801      	ldr	r0, [pc, #4]	; (404ee8 <PIOA_Handler+0xc>)
  404ee2:	4b02      	ldr	r3, [pc, #8]	; (404eec <PIOA_Handler+0x10>)
  404ee4:	4798      	blx	r3
  404ee6:	bd08      	pop	{r3, pc}
  404ee8:	400e0e00 	.word	0x400e0e00
  404eec:	00404e1d 	.word	0x00404e1d

00404ef0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404ef0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  404ef2:	210b      	movs	r1, #11
  404ef4:	4801      	ldr	r0, [pc, #4]	; (404efc <PIOB_Handler+0xc>)
  404ef6:	4b02      	ldr	r3, [pc, #8]	; (404f00 <PIOB_Handler+0x10>)
  404ef8:	4798      	blx	r3
  404efa:	bd08      	pop	{r3, pc}
  404efc:	400e1000 	.word	0x400e1000
  404f00:	00404e1d 	.word	0x00404e1d

00404f04 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404f04:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  404f06:	210c      	movs	r1, #12
  404f08:	4801      	ldr	r0, [pc, #4]	; (404f10 <PIOC_Handler+0xc>)
  404f0a:	4b02      	ldr	r3, [pc, #8]	; (404f14 <PIOC_Handler+0x10>)
  404f0c:	4798      	blx	r3
  404f0e:	bd08      	pop	{r3, pc}
  404f10:	400e1200 	.word	0x400e1200
  404f14:	00404e1d 	.word	0x00404e1d

00404f18 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404f18:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  404f1a:	2110      	movs	r1, #16
  404f1c:	4801      	ldr	r0, [pc, #4]	; (404f24 <PIOD_Handler+0xc>)
  404f1e:	4b02      	ldr	r3, [pc, #8]	; (404f28 <PIOD_Handler+0x10>)
  404f20:	4798      	blx	r3
  404f22:	bd08      	pop	{r3, pc}
  404f24:	400e1400 	.word	0x400e1400
  404f28:	00404e1d 	.word	0x00404e1d

00404f2c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  404f2c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  404f2e:	2111      	movs	r1, #17
  404f30:	4801      	ldr	r0, [pc, #4]	; (404f38 <PIOE_Handler+0xc>)
  404f32:	4b02      	ldr	r3, [pc, #8]	; (404f3c <PIOE_Handler+0x10>)
  404f34:	4798      	blx	r3
  404f36:	bd08      	pop	{r3, pc}
  404f38:	400e1600 	.word	0x400e1600
  404f3c:	00404e1d 	.word	0x00404e1d

00404f40 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f42:	4606      	mov	r6, r0
  404f44:	460d      	mov	r5, r1
  404f46:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  404f48:	4b17      	ldr	r3, [pc, #92]	; (404fa8 <pio_handler_set_priority+0x68>)
  404f4a:	4798      	blx	r3
  404f4c:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404f4e:	f04f 31ff 	mov.w	r1, #4294967295
  404f52:	4630      	mov	r0, r6
  404f54:	4b15      	ldr	r3, [pc, #84]	; (404fac <pio_handler_set_priority+0x6c>)
  404f56:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404f58:	4630      	mov	r0, r6
  404f5a:	4b15      	ldr	r3, [pc, #84]	; (404fb0 <pio_handler_set_priority+0x70>)
  404f5c:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404f5e:	fa5f fe85 	uxtb.w	lr, r5
  404f62:	f00e 031f 	and.w	r3, lr, #31
  404f66:	2201      	movs	r2, #1
  404f68:	fa02 f303 	lsl.w	r3, r2, r3
  404f6c:	0968      	lsrs	r0, r5, #5
  404f6e:	4911      	ldr	r1, [pc, #68]	; (404fb4 <pio_handler_set_priority+0x74>)
  404f70:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  404f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404f78:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  404f7c:	2d00      	cmp	r5, #0
  404f7e:	db0a      	blt.n	404f96 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404f80:	0164      	lsls	r4, r4, #5
  404f82:	b2e4      	uxtb	r4, r4
  404f84:	4a0c      	ldr	r2, [pc, #48]	; (404fb8 <pio_handler_set_priority+0x78>)
  404f86:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404f88:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404f8c:	4639      	mov	r1, r7
  404f8e:	4630      	mov	r0, r6
  404f90:	4b0a      	ldr	r3, [pc, #40]	; (404fbc <pio_handler_set_priority+0x7c>)
  404f92:	4798      	blx	r3
  404f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404f96:	f00e 0e0f 	and.w	lr, lr, #15
  404f9a:	0164      	lsls	r4, r4, #5
  404f9c:	b2e4      	uxtb	r4, r4
  404f9e:	4a08      	ldr	r2, [pc, #32]	; (404fc0 <pio_handler_set_priority+0x80>)
  404fa0:	f802 400e 	strb.w	r4, [r2, lr]
  404fa4:	e7f0      	b.n	404f88 <pio_handler_set_priority+0x48>
  404fa6:	bf00      	nop
  404fa8:	00404ce9 	.word	0x00404ce9
  404fac:	00404ce1 	.word	0x00404ce1
  404fb0:	00404ce5 	.word	0x00404ce5
  404fb4:	e000e100 	.word	0xe000e100
  404fb8:	e000e400 	.word	0xe000e400
  404fbc:	00404cdd 	.word	0x00404cdd
  404fc0:	e000ed14 	.word	0xe000ed14

00404fc4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  404fc4:	2803      	cmp	r0, #3
  404fc6:	d011      	beq.n	404fec <pmc_mck_set_division+0x28>
  404fc8:	2804      	cmp	r0, #4
  404fca:	d012      	beq.n	404ff2 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404fcc:	2802      	cmp	r0, #2
  404fce:	bf0c      	ite	eq
  404fd0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  404fd4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  404fd6:	4a08      	ldr	r2, [pc, #32]	; (404ff8 <pmc_mck_set_division+0x34>)
  404fd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  404fde:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  404fe0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  404fe2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404fe4:	f013 0f08 	tst.w	r3, #8
  404fe8:	d0fb      	beq.n	404fe2 <pmc_mck_set_division+0x1e>
}
  404fea:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  404fec:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  404ff0:	e7f1      	b.n	404fd6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  404ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  404ff6:	e7ee      	b.n	404fd6 <pmc_mck_set_division+0x12>
  404ff8:	400e0600 	.word	0x400e0600

00404ffc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404ffc:	4a17      	ldr	r2, [pc, #92]	; (40505c <pmc_switch_mck_to_pllack+0x60>)
  404ffe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  405004:	4318      	orrs	r0, r3
  405006:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405008:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40500a:	f013 0f08 	tst.w	r3, #8
  40500e:	d10a      	bne.n	405026 <pmc_switch_mck_to_pllack+0x2a>
  405010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405014:	4911      	ldr	r1, [pc, #68]	; (40505c <pmc_switch_mck_to_pllack+0x60>)
  405016:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405018:	f012 0f08 	tst.w	r2, #8
  40501c:	d103      	bne.n	405026 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40501e:	3b01      	subs	r3, #1
  405020:	d1f9      	bne.n	405016 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  405022:	2001      	movs	r0, #1
  405024:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405026:	4a0d      	ldr	r2, [pc, #52]	; (40505c <pmc_switch_mck_to_pllack+0x60>)
  405028:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40502a:	f023 0303 	bic.w	r3, r3, #3
  40502e:	f043 0302 	orr.w	r3, r3, #2
  405032:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405034:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405036:	f013 0f08 	tst.w	r3, #8
  40503a:	d10a      	bne.n	405052 <pmc_switch_mck_to_pllack+0x56>
  40503c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405040:	4906      	ldr	r1, [pc, #24]	; (40505c <pmc_switch_mck_to_pllack+0x60>)
  405042:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405044:	f012 0f08 	tst.w	r2, #8
  405048:	d105      	bne.n	405056 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40504a:	3b01      	subs	r3, #1
  40504c:	d1f9      	bne.n	405042 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40504e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  405050:	4770      	bx	lr
	return 0;
  405052:	2000      	movs	r0, #0
  405054:	4770      	bx	lr
  405056:	2000      	movs	r0, #0
  405058:	4770      	bx	lr
  40505a:	bf00      	nop
  40505c:	400e0600 	.word	0x400e0600

00405060 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  405060:	b9a0      	cbnz	r0, 40508c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405062:	480e      	ldr	r0, [pc, #56]	; (40509c <pmc_switch_mainck_to_xtal+0x3c>)
  405064:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405066:	0209      	lsls	r1, r1, #8
  405068:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40506a:	4a0d      	ldr	r2, [pc, #52]	; (4050a0 <pmc_switch_mainck_to_xtal+0x40>)
  40506c:	401a      	ands	r2, r3
  40506e:	4b0d      	ldr	r3, [pc, #52]	; (4050a4 <pmc_switch_mainck_to_xtal+0x44>)
  405070:	4313      	orrs	r3, r2
  405072:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405074:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405076:	4602      	mov	r2, r0
  405078:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40507a:	f013 0f01 	tst.w	r3, #1
  40507e:	d0fb      	beq.n	405078 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  405080:	4a06      	ldr	r2, [pc, #24]	; (40509c <pmc_switch_mainck_to_xtal+0x3c>)
  405082:	6a11      	ldr	r1, [r2, #32]
  405084:	4b08      	ldr	r3, [pc, #32]	; (4050a8 <pmc_switch_mainck_to_xtal+0x48>)
  405086:	430b      	orrs	r3, r1
  405088:	6213      	str	r3, [r2, #32]
  40508a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40508c:	4903      	ldr	r1, [pc, #12]	; (40509c <pmc_switch_mainck_to_xtal+0x3c>)
  40508e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  405090:	4a06      	ldr	r2, [pc, #24]	; (4050ac <pmc_switch_mainck_to_xtal+0x4c>)
  405092:	401a      	ands	r2, r3
  405094:	4b06      	ldr	r3, [pc, #24]	; (4050b0 <pmc_switch_mainck_to_xtal+0x50>)
  405096:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405098:	620b      	str	r3, [r1, #32]
  40509a:	4770      	bx	lr
  40509c:	400e0600 	.word	0x400e0600
  4050a0:	ffc8fffc 	.word	0xffc8fffc
  4050a4:	00370001 	.word	0x00370001
  4050a8:	01370000 	.word	0x01370000
  4050ac:	fec8fffc 	.word	0xfec8fffc
  4050b0:	01370002 	.word	0x01370002

004050b4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4050b4:	4b02      	ldr	r3, [pc, #8]	; (4050c0 <pmc_osc_is_ready_mainck+0xc>)
  4050b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4050b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4050bc:	4770      	bx	lr
  4050be:	bf00      	nop
  4050c0:	400e0600 	.word	0x400e0600

004050c4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4050c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4050c8:	4b01      	ldr	r3, [pc, #4]	; (4050d0 <pmc_disable_pllack+0xc>)
  4050ca:	629a      	str	r2, [r3, #40]	; 0x28
  4050cc:	4770      	bx	lr
  4050ce:	bf00      	nop
  4050d0:	400e0600 	.word	0x400e0600

004050d4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4050d4:	4b02      	ldr	r3, [pc, #8]	; (4050e0 <pmc_is_locked_pllack+0xc>)
  4050d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4050d8:	f000 0002 	and.w	r0, r0, #2
  4050dc:	4770      	bx	lr
  4050de:	bf00      	nop
  4050e0:	400e0600 	.word	0x400e0600

004050e4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4050e4:	283f      	cmp	r0, #63	; 0x3f
  4050e6:	d81e      	bhi.n	405126 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4050e8:	281f      	cmp	r0, #31
  4050ea:	d80c      	bhi.n	405106 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4050ec:	4b11      	ldr	r3, [pc, #68]	; (405134 <pmc_enable_periph_clk+0x50>)
  4050ee:	699a      	ldr	r2, [r3, #24]
  4050f0:	2301      	movs	r3, #1
  4050f2:	4083      	lsls	r3, r0
  4050f4:	4393      	bics	r3, r2
  4050f6:	d018      	beq.n	40512a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4050f8:	2301      	movs	r3, #1
  4050fa:	fa03 f000 	lsl.w	r0, r3, r0
  4050fe:	4b0d      	ldr	r3, [pc, #52]	; (405134 <pmc_enable_periph_clk+0x50>)
  405100:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  405102:	2000      	movs	r0, #0
  405104:	4770      	bx	lr
		ul_id -= 32;
  405106:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  405108:	4b0a      	ldr	r3, [pc, #40]	; (405134 <pmc_enable_periph_clk+0x50>)
  40510a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40510e:	2301      	movs	r3, #1
  405110:	4083      	lsls	r3, r0
  405112:	4393      	bics	r3, r2
  405114:	d00b      	beq.n	40512e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  405116:	2301      	movs	r3, #1
  405118:	fa03 f000 	lsl.w	r0, r3, r0
  40511c:	4b05      	ldr	r3, [pc, #20]	; (405134 <pmc_enable_periph_clk+0x50>)
  40511e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  405122:	2000      	movs	r0, #0
  405124:	4770      	bx	lr
		return 1;
  405126:	2001      	movs	r0, #1
  405128:	4770      	bx	lr
	return 0;
  40512a:	2000      	movs	r0, #0
  40512c:	4770      	bx	lr
  40512e:	2000      	movs	r0, #0
}
  405130:	4770      	bx	lr
  405132:	bf00      	nop
  405134:	400e0600 	.word	0x400e0600

00405138 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  405138:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40513a:	4b07      	ldr	r3, [pc, #28]	; (405158 <spi_enable_clock+0x20>)
  40513c:	4298      	cmp	r0, r3
  40513e:	d003      	beq.n	405148 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  405140:	4b06      	ldr	r3, [pc, #24]	; (40515c <spi_enable_clock+0x24>)
  405142:	4298      	cmp	r0, r3
  405144:	d004      	beq.n	405150 <spi_enable_clock+0x18>
  405146:	bd08      	pop	{r3, pc}
  405148:	2015      	movs	r0, #21
  40514a:	4b05      	ldr	r3, [pc, #20]	; (405160 <spi_enable_clock+0x28>)
  40514c:	4798      	blx	r3
  40514e:	bd08      	pop	{r3, pc}
  405150:	202a      	movs	r0, #42	; 0x2a
  405152:	4b03      	ldr	r3, [pc, #12]	; (405160 <spi_enable_clock+0x28>)
  405154:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405156:	e7f6      	b.n	405146 <spi_enable_clock+0xe>
  405158:	40008000 	.word	0x40008000
  40515c:	40058000 	.word	0x40058000
  405160:	004050e5 	.word	0x004050e5

00405164 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405164:	6843      	ldr	r3, [r0, #4]
  405166:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40516a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40516c:	6843      	ldr	r3, [r0, #4]
  40516e:	0409      	lsls	r1, r1, #16
  405170:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  405174:	4319      	orrs	r1, r3
  405176:	6041      	str	r1, [r0, #4]
  405178:	4770      	bx	lr

0040517a <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  40517a:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  40517c:	f643 2399 	movw	r3, #15001	; 0x3a99
  405180:	6904      	ldr	r4, [r0, #16]
  405182:	f014 0f01 	tst.w	r4, #1
  405186:	d103      	bne.n	405190 <spi_read+0x16>
		if (!timeout--) {
  405188:	3b01      	subs	r3, #1
  40518a:	d1f9      	bne.n	405180 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  40518c:	2001      	movs	r0, #1
  40518e:	e009      	b.n	4051a4 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  405190:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  405192:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  405194:	f010 0f02 	tst.w	r0, #2
  405198:	d002      	beq.n	4051a0 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40519a:	f3c3 4003 	ubfx	r0, r3, #16, #4
  40519e:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4051a0:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4051a2:	2000      	movs	r0, #0
}
  4051a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4051a8:	4770      	bx	lr

004051aa <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4051aa:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4051ac:	f643 2499 	movw	r4, #15001	; 0x3a99
  4051b0:	6905      	ldr	r5, [r0, #16]
  4051b2:	f015 0f02 	tst.w	r5, #2
  4051b6:	d103      	bne.n	4051c0 <spi_write+0x16>
		if (!timeout--) {
  4051b8:	3c01      	subs	r4, #1
  4051ba:	d1f9      	bne.n	4051b0 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4051bc:	2001      	movs	r0, #1
  4051be:	e00c      	b.n	4051da <spi_write+0x30>
  4051c0:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4051c2:	f014 0f02 	tst.w	r4, #2
  4051c6:	d006      	beq.n	4051d6 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4051c8:	0412      	lsls	r2, r2, #16
  4051ca:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4051ce:	4311      	orrs	r1, r2
		if (uc_last) {
  4051d0:	b10b      	cbz	r3, 4051d6 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4051d2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4051d6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4051d8:	2000      	movs	r0, #0
}
  4051da:	bc30      	pop	{r4, r5}
  4051dc:	4770      	bx	lr

004051de <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4051de:	b932      	cbnz	r2, 4051ee <spi_set_clock_polarity+0x10>
  4051e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4051e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4051e6:	f023 0301 	bic.w	r3, r3, #1
  4051ea:	6303      	str	r3, [r0, #48]	; 0x30
  4051ec:	4770      	bx	lr
  4051ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4051f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4051f4:	f043 0301 	orr.w	r3, r3, #1
  4051f8:	6303      	str	r3, [r0, #48]	; 0x30
  4051fa:	4770      	bx	lr

004051fc <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4051fc:	b932      	cbnz	r2, 40520c <spi_set_clock_phase+0x10>
  4051fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  405202:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405204:	f023 0302 	bic.w	r3, r3, #2
  405208:	6303      	str	r3, [r0, #48]	; 0x30
  40520a:	4770      	bx	lr
  40520c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  405210:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405212:	f043 0302 	orr.w	r3, r3, #2
  405216:	6303      	str	r3, [r0, #48]	; 0x30
  405218:	4770      	bx	lr

0040521a <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40521a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40521e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  405224:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  405226:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405228:	431a      	orrs	r2, r3
  40522a:	630a      	str	r2, [r1, #48]	; 0x30
  40522c:	4770      	bx	lr

0040522e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40522e:	1e43      	subs	r3, r0, #1
  405230:	4419      	add	r1, r3
  405232:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405236:	1e43      	subs	r3, r0, #1
  405238:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40523a:	bf94      	ite	ls
  40523c:	b200      	sxthls	r0, r0
		return -1;
  40523e:	f04f 30ff 	movhi.w	r0, #4294967295
}
  405242:	4770      	bx	lr

00405244 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405244:	b17a      	cbz	r2, 405266 <spi_set_baudrate_div+0x22>
{
  405246:	b410      	push	{r4}
  405248:	4614      	mov	r4, r2
  40524a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40524e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405250:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405254:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405256:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405258:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40525c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40525e:	2000      	movs	r0, #0
}
  405260:	f85d 4b04 	ldr.w	r4, [sp], #4
  405264:	4770      	bx	lr
        return -1;
  405266:	f04f 30ff 	mov.w	r0, #4294967295
  40526a:	4770      	bx	lr

0040526c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40526c:	b410      	push	{r4}
  40526e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  405272:	6b08      	ldr	r0, [r1, #48]	; 0x30
  405274:	b280      	uxth	r0, r0
  405276:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405278:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40527a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40527e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405282:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  405284:	f85d 4b04 	ldr.w	r4, [sp], #4
  405288:	4770      	bx	lr

0040528a <uart_write>:
  40528a:	6943      	ldr	r3, [r0, #20]
  40528c:	f013 0f02 	tst.w	r3, #2
  405290:	d002      	beq.n	405298 <uart_write+0xe>
  405292:	61c1      	str	r1, [r0, #28]
  405294:	2000      	movs	r0, #0
  405296:	4770      	bx	lr
  405298:	2001      	movs	r0, #1
  40529a:	4770      	bx	lr

0040529c <uart_read>:
  40529c:	6943      	ldr	r3, [r0, #20]
  40529e:	f013 0f01 	tst.w	r3, #1
  4052a2:	d003      	beq.n	4052ac <uart_read+0x10>
  4052a4:	6983      	ldr	r3, [r0, #24]
  4052a6:	700b      	strb	r3, [r1, #0]
  4052a8:	2000      	movs	r0, #0
  4052aa:	4770      	bx	lr
  4052ac:	2001      	movs	r0, #1
  4052ae:	4770      	bx	lr

004052b0 <usart_set_async_baudrate>:
  4052b0:	b410      	push	{r4}
  4052b2:	010b      	lsls	r3, r1, #4
  4052b4:	4293      	cmp	r3, r2
  4052b6:	d914      	bls.n	4052e2 <usart_set_async_baudrate+0x32>
  4052b8:	00c9      	lsls	r1, r1, #3
  4052ba:	084b      	lsrs	r3, r1, #1
  4052bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4052c0:	fbb2 f2f1 	udiv	r2, r2, r1
  4052c4:	08d3      	lsrs	r3, r2, #3
  4052c6:	1e5c      	subs	r4, r3, #1
  4052c8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4052cc:	428c      	cmp	r4, r1
  4052ce:	d901      	bls.n	4052d4 <usart_set_async_baudrate+0x24>
  4052d0:	2001      	movs	r0, #1
  4052d2:	e017      	b.n	405304 <usart_set_async_baudrate+0x54>
  4052d4:	6841      	ldr	r1, [r0, #4]
  4052d6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4052da:	6041      	str	r1, [r0, #4]
  4052dc:	e00c      	b.n	4052f8 <usart_set_async_baudrate+0x48>
  4052de:	2001      	movs	r0, #1
  4052e0:	e010      	b.n	405304 <usart_set_async_baudrate+0x54>
  4052e2:	0859      	lsrs	r1, r3, #1
  4052e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4052e8:	fbb2 f2f3 	udiv	r2, r2, r3
  4052ec:	08d3      	lsrs	r3, r2, #3
  4052ee:	1e5c      	subs	r4, r3, #1
  4052f0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4052f4:	428c      	cmp	r4, r1
  4052f6:	d8f2      	bhi.n	4052de <usart_set_async_baudrate+0x2e>
  4052f8:	0412      	lsls	r2, r2, #16
  4052fa:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4052fe:	431a      	orrs	r2, r3
  405300:	6202      	str	r2, [r0, #32]
  405302:	2000      	movs	r0, #0
  405304:	f85d 4b04 	ldr.w	r4, [sp], #4
  405308:	4770      	bx	lr
	...

0040530c <usart_reset>:
  40530c:	4b08      	ldr	r3, [pc, #32]	; (405330 <usart_reset+0x24>)
  40530e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  405312:	2300      	movs	r3, #0
  405314:	6043      	str	r3, [r0, #4]
  405316:	6243      	str	r3, [r0, #36]	; 0x24
  405318:	6283      	str	r3, [r0, #40]	; 0x28
  40531a:	2388      	movs	r3, #136	; 0x88
  40531c:	6003      	str	r3, [r0, #0]
  40531e:	2324      	movs	r3, #36	; 0x24
  405320:	6003      	str	r3, [r0, #0]
  405322:	f44f 7380 	mov.w	r3, #256	; 0x100
  405326:	6003      	str	r3, [r0, #0]
  405328:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40532c:	6003      	str	r3, [r0, #0]
  40532e:	4770      	bx	lr
  405330:	55534100 	.word	0x55534100

00405334 <usart_init_rs232>:
  405334:	b570      	push	{r4, r5, r6, lr}
  405336:	4605      	mov	r5, r0
  405338:	460c      	mov	r4, r1
  40533a:	4616      	mov	r6, r2
  40533c:	4b0f      	ldr	r3, [pc, #60]	; (40537c <usart_init_rs232+0x48>)
  40533e:	4798      	blx	r3
  405340:	2200      	movs	r2, #0
  405342:	4b0f      	ldr	r3, [pc, #60]	; (405380 <usart_init_rs232+0x4c>)
  405344:	601a      	str	r2, [r3, #0]
  405346:	b1a4      	cbz	r4, 405372 <usart_init_rs232+0x3e>
  405348:	4632      	mov	r2, r6
  40534a:	6821      	ldr	r1, [r4, #0]
  40534c:	4628      	mov	r0, r5
  40534e:	4b0d      	ldr	r3, [pc, #52]	; (405384 <usart_init_rs232+0x50>)
  405350:	4798      	blx	r3
  405352:	4602      	mov	r2, r0
  405354:	b978      	cbnz	r0, 405376 <usart_init_rs232+0x42>
  405356:	6863      	ldr	r3, [r4, #4]
  405358:	68a1      	ldr	r1, [r4, #8]
  40535a:	430b      	orrs	r3, r1
  40535c:	6921      	ldr	r1, [r4, #16]
  40535e:	430b      	orrs	r3, r1
  405360:	68e1      	ldr	r1, [r4, #12]
  405362:	430b      	orrs	r3, r1
  405364:	4906      	ldr	r1, [pc, #24]	; (405380 <usart_init_rs232+0x4c>)
  405366:	600b      	str	r3, [r1, #0]
  405368:	6869      	ldr	r1, [r5, #4]
  40536a:	430b      	orrs	r3, r1
  40536c:	606b      	str	r3, [r5, #4]
  40536e:	4610      	mov	r0, r2
  405370:	bd70      	pop	{r4, r5, r6, pc}
  405372:	2201      	movs	r2, #1
  405374:	e7fb      	b.n	40536e <usart_init_rs232+0x3a>
  405376:	2201      	movs	r2, #1
  405378:	e7f9      	b.n	40536e <usart_init_rs232+0x3a>
  40537a:	bf00      	nop
  40537c:	0040530d 	.word	0x0040530d
  405380:	2040c3d8 	.word	0x2040c3d8
  405384:	004052b1 	.word	0x004052b1

00405388 <usart_enable_tx>:
  405388:	2340      	movs	r3, #64	; 0x40
  40538a:	6003      	str	r3, [r0, #0]
  40538c:	4770      	bx	lr

0040538e <usart_enable_rx>:
  40538e:	2310      	movs	r3, #16
  405390:	6003      	str	r3, [r0, #0]
  405392:	4770      	bx	lr

00405394 <usart_write>:
  405394:	6943      	ldr	r3, [r0, #20]
  405396:	f013 0f02 	tst.w	r3, #2
  40539a:	d004      	beq.n	4053a6 <usart_write+0x12>
  40539c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4053a0:	61c1      	str	r1, [r0, #28]
  4053a2:	2000      	movs	r0, #0
  4053a4:	4770      	bx	lr
  4053a6:	2001      	movs	r0, #1
  4053a8:	4770      	bx	lr

004053aa <usart_read>:
  4053aa:	6943      	ldr	r3, [r0, #20]
  4053ac:	f013 0f01 	tst.w	r3, #1
  4053b0:	d005      	beq.n	4053be <usart_read+0x14>
  4053b2:	6983      	ldr	r3, [r0, #24]
  4053b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4053b8:	600b      	str	r3, [r1, #0]
  4053ba:	2000      	movs	r0, #0
  4053bc:	4770      	bx	lr
  4053be:	2001      	movs	r0, #1
  4053c0:	4770      	bx	lr

004053c2 <Dummy_Handler>:
  4053c2:	e7fe      	b.n	4053c2 <Dummy_Handler>

004053c4 <Reset_Handler>:
  4053c4:	b500      	push	{lr}
  4053c6:	b083      	sub	sp, #12
  4053c8:	4b25      	ldr	r3, [pc, #148]	; (405460 <Reset_Handler+0x9c>)
  4053ca:	4a26      	ldr	r2, [pc, #152]	; (405464 <Reset_Handler+0xa0>)
  4053cc:	429a      	cmp	r2, r3
  4053ce:	d010      	beq.n	4053f2 <Reset_Handler+0x2e>
  4053d0:	4b25      	ldr	r3, [pc, #148]	; (405468 <Reset_Handler+0xa4>)
  4053d2:	4a23      	ldr	r2, [pc, #140]	; (405460 <Reset_Handler+0x9c>)
  4053d4:	429a      	cmp	r2, r3
  4053d6:	d20c      	bcs.n	4053f2 <Reset_Handler+0x2e>
  4053d8:	3b01      	subs	r3, #1
  4053da:	1a9b      	subs	r3, r3, r2
  4053dc:	f023 0303 	bic.w	r3, r3, #3
  4053e0:	3304      	adds	r3, #4
  4053e2:	4413      	add	r3, r2
  4053e4:	491f      	ldr	r1, [pc, #124]	; (405464 <Reset_Handler+0xa0>)
  4053e6:	f851 0b04 	ldr.w	r0, [r1], #4
  4053ea:	f842 0b04 	str.w	r0, [r2], #4
  4053ee:	429a      	cmp	r2, r3
  4053f0:	d1f9      	bne.n	4053e6 <Reset_Handler+0x22>
  4053f2:	4b1e      	ldr	r3, [pc, #120]	; (40546c <Reset_Handler+0xa8>)
  4053f4:	4a1e      	ldr	r2, [pc, #120]	; (405470 <Reset_Handler+0xac>)
  4053f6:	429a      	cmp	r2, r3
  4053f8:	d20a      	bcs.n	405410 <Reset_Handler+0x4c>
  4053fa:	3b01      	subs	r3, #1
  4053fc:	1a9b      	subs	r3, r3, r2
  4053fe:	f023 0303 	bic.w	r3, r3, #3
  405402:	3304      	adds	r3, #4
  405404:	4413      	add	r3, r2
  405406:	2100      	movs	r1, #0
  405408:	f842 1b04 	str.w	r1, [r2], #4
  40540c:	4293      	cmp	r3, r2
  40540e:	d1fb      	bne.n	405408 <Reset_Handler+0x44>
  405410:	4a18      	ldr	r2, [pc, #96]	; (405474 <Reset_Handler+0xb0>)
  405412:	4b19      	ldr	r3, [pc, #100]	; (405478 <Reset_Handler+0xb4>)
  405414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405418:	6093      	str	r3, [r2, #8]
  40541a:	f3ef 8310 	mrs	r3, PRIMASK
  40541e:	fab3 f383 	clz	r3, r3
  405422:	095b      	lsrs	r3, r3, #5
  405424:	9301      	str	r3, [sp, #4]
  405426:	b672      	cpsid	i
  405428:	f3bf 8f5f 	dmb	sy
  40542c:	2200      	movs	r2, #0
  40542e:	4b13      	ldr	r3, [pc, #76]	; (40547c <Reset_Handler+0xb8>)
  405430:	701a      	strb	r2, [r3, #0]
  405432:	9901      	ldr	r1, [sp, #4]
  405434:	4a12      	ldr	r2, [pc, #72]	; (405480 <Reset_Handler+0xbc>)
  405436:	6813      	ldr	r3, [r2, #0]
  405438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40543c:	6013      	str	r3, [r2, #0]
  40543e:	f3bf 8f4f 	dsb	sy
  405442:	f3bf 8f6f 	isb	sy
  405446:	b129      	cbz	r1, 405454 <Reset_Handler+0x90>
  405448:	2201      	movs	r2, #1
  40544a:	4b0c      	ldr	r3, [pc, #48]	; (40547c <Reset_Handler+0xb8>)
  40544c:	701a      	strb	r2, [r3, #0]
  40544e:	f3bf 8f5f 	dmb	sy
  405452:	b662      	cpsie	i
  405454:	4b0b      	ldr	r3, [pc, #44]	; (405484 <Reset_Handler+0xc0>)
  405456:	4798      	blx	r3
  405458:	4b0b      	ldr	r3, [pc, #44]	; (405488 <Reset_Handler+0xc4>)
  40545a:	4798      	blx	r3
  40545c:	e7fe      	b.n	40545c <Reset_Handler+0x98>
  40545e:	bf00      	nop
  405460:	20400000 	.word	0x20400000
  405464:	00409cb8 	.word	0x00409cb8
  405468:	204009d0 	.word	0x204009d0
  40546c:	2040cacc 	.word	0x2040cacc
  405470:	204009d0 	.word	0x204009d0
  405474:	e000ed00 	.word	0xe000ed00
  405478:	00400000 	.word	0x00400000
  40547c:	20400018 	.word	0x20400018
  405480:	e000ed88 	.word	0xe000ed88
  405484:	00405c9d 	.word	0x00405c9d
  405488:	00405bb1 	.word	0x00405bb1

0040548c <SystemCoreClockUpdate>:
  40548c:	4b3b      	ldr	r3, [pc, #236]	; (40557c <SystemCoreClockUpdate+0xf0>)
  40548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405490:	f003 0303 	and.w	r3, r3, #3
  405494:	2b01      	cmp	r3, #1
  405496:	d01d      	beq.n	4054d4 <SystemCoreClockUpdate+0x48>
  405498:	b183      	cbz	r3, 4054bc <SystemCoreClockUpdate+0x30>
  40549a:	2b02      	cmp	r3, #2
  40549c:	d036      	beq.n	40550c <SystemCoreClockUpdate+0x80>
  40549e:	4b37      	ldr	r3, [pc, #220]	; (40557c <SystemCoreClockUpdate+0xf0>)
  4054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4054a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4054a6:	2b70      	cmp	r3, #112	; 0x70
  4054a8:	d05f      	beq.n	40556a <SystemCoreClockUpdate+0xde>
  4054aa:	4b34      	ldr	r3, [pc, #208]	; (40557c <SystemCoreClockUpdate+0xf0>)
  4054ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4054ae:	4934      	ldr	r1, [pc, #208]	; (405580 <SystemCoreClockUpdate+0xf4>)
  4054b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4054b4:	680b      	ldr	r3, [r1, #0]
  4054b6:	40d3      	lsrs	r3, r2
  4054b8:	600b      	str	r3, [r1, #0]
  4054ba:	4770      	bx	lr
  4054bc:	4b31      	ldr	r3, [pc, #196]	; (405584 <SystemCoreClockUpdate+0xf8>)
  4054be:	695b      	ldr	r3, [r3, #20]
  4054c0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4054c4:	bf14      	ite	ne
  4054c6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  4054ca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4054ce:	4b2c      	ldr	r3, [pc, #176]	; (405580 <SystemCoreClockUpdate+0xf4>)
  4054d0:	601a      	str	r2, [r3, #0]
  4054d2:	e7e4      	b.n	40549e <SystemCoreClockUpdate+0x12>
  4054d4:	4b29      	ldr	r3, [pc, #164]	; (40557c <SystemCoreClockUpdate+0xf0>)
  4054d6:	6a1b      	ldr	r3, [r3, #32]
  4054d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4054dc:	d003      	beq.n	4054e6 <SystemCoreClockUpdate+0x5a>
  4054de:	4a2a      	ldr	r2, [pc, #168]	; (405588 <SystemCoreClockUpdate+0xfc>)
  4054e0:	4b27      	ldr	r3, [pc, #156]	; (405580 <SystemCoreClockUpdate+0xf4>)
  4054e2:	601a      	str	r2, [r3, #0]
  4054e4:	e7db      	b.n	40549e <SystemCoreClockUpdate+0x12>
  4054e6:	4a29      	ldr	r2, [pc, #164]	; (40558c <SystemCoreClockUpdate+0x100>)
  4054e8:	4b25      	ldr	r3, [pc, #148]	; (405580 <SystemCoreClockUpdate+0xf4>)
  4054ea:	601a      	str	r2, [r3, #0]
  4054ec:	4b23      	ldr	r3, [pc, #140]	; (40557c <SystemCoreClockUpdate+0xf0>)
  4054ee:	6a1b      	ldr	r3, [r3, #32]
  4054f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4054f4:	2b10      	cmp	r3, #16
  4054f6:	d005      	beq.n	405504 <SystemCoreClockUpdate+0x78>
  4054f8:	2b20      	cmp	r3, #32
  4054fa:	d1d0      	bne.n	40549e <SystemCoreClockUpdate+0x12>
  4054fc:	4a22      	ldr	r2, [pc, #136]	; (405588 <SystemCoreClockUpdate+0xfc>)
  4054fe:	4b20      	ldr	r3, [pc, #128]	; (405580 <SystemCoreClockUpdate+0xf4>)
  405500:	601a      	str	r2, [r3, #0]
  405502:	e7cc      	b.n	40549e <SystemCoreClockUpdate+0x12>
  405504:	4a22      	ldr	r2, [pc, #136]	; (405590 <SystemCoreClockUpdate+0x104>)
  405506:	4b1e      	ldr	r3, [pc, #120]	; (405580 <SystemCoreClockUpdate+0xf4>)
  405508:	601a      	str	r2, [r3, #0]
  40550a:	e7c8      	b.n	40549e <SystemCoreClockUpdate+0x12>
  40550c:	4b1b      	ldr	r3, [pc, #108]	; (40557c <SystemCoreClockUpdate+0xf0>)
  40550e:	6a1b      	ldr	r3, [r3, #32]
  405510:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405514:	d016      	beq.n	405544 <SystemCoreClockUpdate+0xb8>
  405516:	4a1c      	ldr	r2, [pc, #112]	; (405588 <SystemCoreClockUpdate+0xfc>)
  405518:	4b19      	ldr	r3, [pc, #100]	; (405580 <SystemCoreClockUpdate+0xf4>)
  40551a:	601a      	str	r2, [r3, #0]
  40551c:	4b17      	ldr	r3, [pc, #92]	; (40557c <SystemCoreClockUpdate+0xf0>)
  40551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405520:	f003 0303 	and.w	r3, r3, #3
  405524:	2b02      	cmp	r3, #2
  405526:	d1ba      	bne.n	40549e <SystemCoreClockUpdate+0x12>
  405528:	4a14      	ldr	r2, [pc, #80]	; (40557c <SystemCoreClockUpdate+0xf0>)
  40552a:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40552c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40552e:	4814      	ldr	r0, [pc, #80]	; (405580 <SystemCoreClockUpdate+0xf4>)
  405530:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405534:	6803      	ldr	r3, [r0, #0]
  405536:	fb01 3303 	mla	r3, r1, r3, r3
  40553a:	b2d2      	uxtb	r2, r2
  40553c:	fbb3 f3f2 	udiv	r3, r3, r2
  405540:	6003      	str	r3, [r0, #0]
  405542:	e7ac      	b.n	40549e <SystemCoreClockUpdate+0x12>
  405544:	4a11      	ldr	r2, [pc, #68]	; (40558c <SystemCoreClockUpdate+0x100>)
  405546:	4b0e      	ldr	r3, [pc, #56]	; (405580 <SystemCoreClockUpdate+0xf4>)
  405548:	601a      	str	r2, [r3, #0]
  40554a:	4b0c      	ldr	r3, [pc, #48]	; (40557c <SystemCoreClockUpdate+0xf0>)
  40554c:	6a1b      	ldr	r3, [r3, #32]
  40554e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405552:	2b10      	cmp	r3, #16
  405554:	d005      	beq.n	405562 <SystemCoreClockUpdate+0xd6>
  405556:	2b20      	cmp	r3, #32
  405558:	d1e0      	bne.n	40551c <SystemCoreClockUpdate+0x90>
  40555a:	4a0b      	ldr	r2, [pc, #44]	; (405588 <SystemCoreClockUpdate+0xfc>)
  40555c:	4b08      	ldr	r3, [pc, #32]	; (405580 <SystemCoreClockUpdate+0xf4>)
  40555e:	601a      	str	r2, [r3, #0]
  405560:	e7dc      	b.n	40551c <SystemCoreClockUpdate+0x90>
  405562:	4a0b      	ldr	r2, [pc, #44]	; (405590 <SystemCoreClockUpdate+0x104>)
  405564:	4b06      	ldr	r3, [pc, #24]	; (405580 <SystemCoreClockUpdate+0xf4>)
  405566:	601a      	str	r2, [r3, #0]
  405568:	e7d8      	b.n	40551c <SystemCoreClockUpdate+0x90>
  40556a:	4a05      	ldr	r2, [pc, #20]	; (405580 <SystemCoreClockUpdate+0xf4>)
  40556c:	6813      	ldr	r3, [r2, #0]
  40556e:	4909      	ldr	r1, [pc, #36]	; (405594 <SystemCoreClockUpdate+0x108>)
  405570:	fba1 1303 	umull	r1, r3, r1, r3
  405574:	085b      	lsrs	r3, r3, #1
  405576:	6013      	str	r3, [r2, #0]
  405578:	4770      	bx	lr
  40557a:	bf00      	nop
  40557c:	400e0600 	.word	0x400e0600
  405580:	2040001c 	.word	0x2040001c
  405584:	400e1810 	.word	0x400e1810
  405588:	00b71b00 	.word	0x00b71b00
  40558c:	003d0900 	.word	0x003d0900
  405590:	007a1200 	.word	0x007a1200
  405594:	aaaaaaab 	.word	0xaaaaaaab

00405598 <system_init_flash>:
  405598:	4b12      	ldr	r3, [pc, #72]	; (4055e4 <system_init_flash+0x4c>)
  40559a:	4298      	cmp	r0, r3
  40559c:	d911      	bls.n	4055c2 <system_init_flash+0x2a>
  40559e:	4b12      	ldr	r3, [pc, #72]	; (4055e8 <system_init_flash+0x50>)
  4055a0:	4298      	cmp	r0, r3
  4055a2:	d913      	bls.n	4055cc <system_init_flash+0x34>
  4055a4:	4b11      	ldr	r3, [pc, #68]	; (4055ec <system_init_flash+0x54>)
  4055a6:	4298      	cmp	r0, r3
  4055a8:	d914      	bls.n	4055d4 <system_init_flash+0x3c>
  4055aa:	4b11      	ldr	r3, [pc, #68]	; (4055f0 <system_init_flash+0x58>)
  4055ac:	4298      	cmp	r0, r3
  4055ae:	d915      	bls.n	4055dc <system_init_flash+0x44>
  4055b0:	4b10      	ldr	r3, [pc, #64]	; (4055f4 <system_init_flash+0x5c>)
  4055b2:	4298      	cmp	r0, r3
  4055b4:	bf94      	ite	ls
  4055b6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
  4055ba:	4a0f      	ldrhi	r2, [pc, #60]	; (4055f8 <system_init_flash+0x60>)
  4055bc:	4b0f      	ldr	r3, [pc, #60]	; (4055fc <system_init_flash+0x64>)
  4055be:	601a      	str	r2, [r3, #0]
  4055c0:	4770      	bx	lr
  4055c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4055c6:	4b0d      	ldr	r3, [pc, #52]	; (4055fc <system_init_flash+0x64>)
  4055c8:	601a      	str	r2, [r3, #0]
  4055ca:	4770      	bx	lr
  4055cc:	4a0c      	ldr	r2, [pc, #48]	; (405600 <system_init_flash+0x68>)
  4055ce:	4b0b      	ldr	r3, [pc, #44]	; (4055fc <system_init_flash+0x64>)
  4055d0:	601a      	str	r2, [r3, #0]
  4055d2:	4770      	bx	lr
  4055d4:	4a0b      	ldr	r2, [pc, #44]	; (405604 <system_init_flash+0x6c>)
  4055d6:	4b09      	ldr	r3, [pc, #36]	; (4055fc <system_init_flash+0x64>)
  4055d8:	601a      	str	r2, [r3, #0]
  4055da:	4770      	bx	lr
  4055dc:	4a0a      	ldr	r2, [pc, #40]	; (405608 <system_init_flash+0x70>)
  4055de:	4b07      	ldr	r3, [pc, #28]	; (4055fc <system_init_flash+0x64>)
  4055e0:	601a      	str	r2, [r3, #0]
  4055e2:	4770      	bx	lr
  4055e4:	01312cff 	.word	0x01312cff
  4055e8:	026259ff 	.word	0x026259ff
  4055ec:	039386ff 	.word	0x039386ff
  4055f0:	04c4b3ff 	.word	0x04c4b3ff
  4055f4:	05f5e0ff 	.word	0x05f5e0ff
  4055f8:	04000500 	.word	0x04000500
  4055fc:	400e0c00 	.word	0x400e0c00
  405600:	04000100 	.word	0x04000100
  405604:	04000200 	.word	0x04000200
  405608:	04000300 	.word	0x04000300

0040560c <_sbrk>:
  40560c:	4b0a      	ldr	r3, [pc, #40]	; (405638 <_sbrk+0x2c>)
  40560e:	681b      	ldr	r3, [r3, #0]
  405610:	b153      	cbz	r3, 405628 <_sbrk+0x1c>
  405612:	4b09      	ldr	r3, [pc, #36]	; (405638 <_sbrk+0x2c>)
  405614:	681b      	ldr	r3, [r3, #0]
  405616:	181a      	adds	r2, r3, r0
  405618:	4908      	ldr	r1, [pc, #32]	; (40563c <_sbrk+0x30>)
  40561a:	4291      	cmp	r1, r2
  40561c:	db08      	blt.n	405630 <_sbrk+0x24>
  40561e:	4610      	mov	r0, r2
  405620:	4a05      	ldr	r2, [pc, #20]	; (405638 <_sbrk+0x2c>)
  405622:	6010      	str	r0, [r2, #0]
  405624:	4618      	mov	r0, r3
  405626:	4770      	bx	lr
  405628:	4a05      	ldr	r2, [pc, #20]	; (405640 <_sbrk+0x34>)
  40562a:	4b03      	ldr	r3, [pc, #12]	; (405638 <_sbrk+0x2c>)
  40562c:	601a      	str	r2, [r3, #0]
  40562e:	e7f0      	b.n	405612 <_sbrk+0x6>
  405630:	f04f 30ff 	mov.w	r0, #4294967295
  405634:	4770      	bx	lr
  405636:	bf00      	nop
  405638:	2040c3dc 	.word	0x2040c3dc
  40563c:	2045fffc 	.word	0x2045fffc
  405640:	2040ecd0 	.word	0x2040ecd0

00405644 <_close>:
  405644:	f04f 30ff 	mov.w	r0, #4294967295
  405648:	4770      	bx	lr

0040564a <_fstat>:
  40564a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40564e:	604b      	str	r3, [r1, #4]
  405650:	2000      	movs	r0, #0
  405652:	4770      	bx	lr

00405654 <_isatty>:
  405654:	2001      	movs	r0, #1
  405656:	4770      	bx	lr

00405658 <_lseek>:
  405658:	2000      	movs	r0, #0
  40565a:	4770      	bx	lr

0040565c <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  40565c:	b510      	push	{r4, lr}
  40565e:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  405660:	4b07      	ldr	r3, [pc, #28]	; (405680 <resolve_cb+0x24>)
  405662:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405664:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405666:	9301      	str	r3, [sp, #4]
  405668:	f3c1 4307 	ubfx	r3, r1, #16, #8
  40566c:	9300      	str	r3, [sp, #0]
  40566e:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405672:	b2ca      	uxtb	r2, r1
  405674:	4601      	mov	r1, r0
  405676:	4803      	ldr	r0, [pc, #12]	; (405684 <resolve_cb+0x28>)
  405678:	4c03      	ldr	r4, [pc, #12]	; (405688 <resolve_cb+0x2c>)
  40567a:	47a0      	blx	r4
}
  40567c:	b002      	add	sp, #8
  40567e:	bd10      	pop	{r4, pc}
  405680:	2040c95c 	.word	0x2040c95c
  405684:	00409918 	.word	0x00409918
  405688:	00405ced 	.word	0x00405ced

0040568c <socket_cb>:
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  40568c:	4b38      	ldr	r3, [pc, #224]	; (405770 <socket_cb+0xe4>)
  40568e:	f993 3000 	ldrsb.w	r3, [r3]
  405692:	4283      	cmp	r3, r0
  405694:	d000      	beq.n	405698 <socket_cb+0xc>
  405696:	4770      	bx	lr
{
  405698:	b570      	push	{r4, r5, r6, lr}
  40569a:	4614      	mov	r4, r2
    
		switch (u8Msg) {
  40569c:	2905      	cmp	r1, #5
  40569e:	d002      	beq.n	4056a6 <socket_cb+0x1a>
  4056a0:	2906      	cmp	r1, #6
  4056a2:	d041      	beq.n	405728 <socket_cb+0x9c>
  4056a4:	bd70      	pop	{r4, r5, r6, pc}
		case SOCKET_MSG_CONNECT:
		{
      printf("socket_msg_connect\n"); 
  4056a6:	4833      	ldr	r0, [pc, #204]	; (405774 <socket_cb+0xe8>)
  4056a8:	4b33      	ldr	r3, [pc, #204]	; (405778 <socket_cb+0xec>)
  4056aa:	4798      	blx	r3
			if (gbTcpConnection) {
  4056ac:	4b33      	ldr	r3, [pc, #204]	; (40577c <socket_cb+0xf0>)
  4056ae:	781b      	ldrb	r3, [r3, #0]
  4056b0:	2b00      	cmp	r3, #0
  4056b2:	d048      	beq.n	405746 <socket_cb+0xba>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  4056b4:	4d32      	ldr	r5, [pc, #200]	; (405780 <socket_cb+0xf4>)
  4056b6:	f44f 62af 	mov.w	r2, #1400	; 0x578
  4056ba:	2100      	movs	r1, #0
  4056bc:	4628      	mov	r0, r5
  4056be:	4b31      	ldr	r3, [pc, #196]	; (405784 <socket_cb+0xf8>)
  4056c0:	4798      	blx	r3
				sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  4056c2:	4e31      	ldr	r6, [pc, #196]	; (405788 <socket_cb+0xfc>)
  4056c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4056c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4056c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4056ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4056cc:	6833      	ldr	r3, [r6, #0]
  4056ce:	802b      	strh	r3, [r5, #0]

				tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  4056d0:	b1e4      	cbz	r4, 40570c <socket_cb+0x80>
  4056d2:	f994 3001 	ldrsb.w	r3, [r4, #1]
  4056d6:	2b00      	cmp	r3, #0
  4056d8:	db18      	blt.n	40570c <socket_cb+0x80>
					printf("send \n");
  4056da:	482c      	ldr	r0, [pc, #176]	; (40578c <socket_cb+0x100>)
  4056dc:	4b26      	ldr	r3, [pc, #152]	; (405778 <socket_cb+0xec>)
  4056de:	4798      	blx	r3
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  4056e0:	f1a5 0420 	sub.w	r4, r5, #32
  4056e4:	4620      	mov	r0, r4
  4056e6:	4b2a      	ldr	r3, [pc, #168]	; (405790 <socket_cb+0x104>)
  4056e8:	4798      	blx	r3
  4056ea:	4d21      	ldr	r5, [pc, #132]	; (405770 <socket_cb+0xe4>)
  4056ec:	2300      	movs	r3, #0
  4056ee:	b282      	uxth	r2, r0
  4056f0:	4621      	mov	r1, r4
  4056f2:	f995 0000 	ldrsb.w	r0, [r5]
  4056f6:	4e27      	ldr	r6, [pc, #156]	; (405794 <socket_cb+0x108>)
  4056f8:	47b0      	blx	r6
					// sprintf((char *)gau8ReceivedBuffer, "oieeeee");
					// 
					//sprintf((char *)gau8SendBuffer, "%s lalal", MAIN_PREFIX_BUFFER);
					//send(tcp_client_socket,gau8SendBuffer,sizeof(gau8SendBuffer),0);
					recvfrom(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  4056fa:	2300      	movs	r3, #0
  4056fc:	f44f 62af 	mov.w	r2, #1400	; 0x578
  405700:	4621      	mov	r1, r4
  405702:	f995 0000 	ldrsb.w	r0, [r5]
  405706:	4c24      	ldr	r4, [pc, #144]	; (405798 <socket_cb+0x10c>)
  405708:	47a0      	blx	r4
  40570a:	bd70      	pop	{r4, r5, r6, pc}
				} else {
					printf("socket_cb: connect error!\r\n");
  40570c:	4823      	ldr	r0, [pc, #140]	; (40579c <socket_cb+0x110>)
  40570e:	4b1a      	ldr	r3, [pc, #104]	; (405778 <socket_cb+0xec>)
  405710:	4798      	blx	r3
					gbTcpConnection = false;
  405712:	2200      	movs	r2, #0
  405714:	4b19      	ldr	r3, [pc, #100]	; (40577c <socket_cb+0xf0>)
  405716:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  405718:	4c15      	ldr	r4, [pc, #84]	; (405770 <socket_cb+0xe4>)
  40571a:	f994 0000 	ldrsb.w	r0, [r4]
  40571e:	4b20      	ldr	r3, [pc, #128]	; (4057a0 <socket_cb+0x114>)
  405720:	4798      	blx	r3
					tcp_client_socket = -1;
  405722:	23ff      	movs	r3, #255	; 0xff
  405724:	7023      	strb	r3, [r4, #0]
  405726:	bd70      	pop	{r4, r5, r6, pc}
		{
			char *pcIndxPtr;
			char *pcEndPtr;

			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405728:	b11a      	cbz	r2, 405732 <socket_cb+0xa6>
  40572a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  40572e:	2b00      	cmp	r3, #0
  405730:	dc0a      	bgt.n	405748 <socket_cb+0xbc>
				printf(pstrRecv->pu8Buffer);
				
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
			} else {
				printf("socket_cb: recv error!\r\n");
  405732:	481c      	ldr	r0, [pc, #112]	; (4057a4 <socket_cb+0x118>)
  405734:	4b10      	ldr	r3, [pc, #64]	; (405778 <socket_cb+0xec>)
  405736:	4798      	blx	r3
				close(tcp_client_socket);
  405738:	4c0d      	ldr	r4, [pc, #52]	; (405770 <socket_cb+0xe4>)
  40573a:	f994 0000 	ldrsb.w	r0, [r4]
  40573e:	4b18      	ldr	r3, [pc, #96]	; (4057a0 <socket_cb+0x114>)
  405740:	4798      	blx	r3
				tcp_client_socket = -1;
  405742:	23ff      	movs	r3, #255	; 0xff
  405744:	7023      	strb	r3, [r4, #0]
  405746:	bd70      	pop	{r4, r5, r6, pc}
				printf(pstrRecv->pu8Buffer);
  405748:	6810      	ldr	r0, [r2, #0]
  40574a:	4b0b      	ldr	r3, [pc, #44]	; (405778 <socket_cb+0xec>)
  40574c:	4798      	blx	r3
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  40574e:	4c0c      	ldr	r4, [pc, #48]	; (405780 <socket_cb+0xf4>)
  405750:	f44f 65af 	mov.w	r5, #1400	; 0x578
  405754:	462a      	mov	r2, r5
  405756:	2100      	movs	r1, #0
  405758:	4620      	mov	r0, r4
  40575a:	4b0a      	ldr	r3, [pc, #40]	; (405784 <socket_cb+0xf8>)
  40575c:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40575e:	2300      	movs	r3, #0
  405760:	462a      	mov	r2, r5
  405762:	4621      	mov	r1, r4
  405764:	4802      	ldr	r0, [pc, #8]	; (405770 <socket_cb+0xe4>)
  405766:	f990 0000 	ldrsb.w	r0, [r0]
  40576a:	4c0f      	ldr	r4, [pc, #60]	; (4057a8 <socket_cb+0x11c>)
  40576c:	47a0      	blx	r4
  40576e:	bd70      	pop	{r4, r5, r6, pc}
  405770:	20400020 	.word	0x20400020
  405774:	00409948 	.word	0x00409948
  405778:	00405ced 	.word	0x00405ced
  40577c:	2040c958 	.word	0x2040c958
  405780:	2040c3e0 	.word	0x2040c3e0
  405784:	00405e49 	.word	0x00405e49
  405788:	0040995c 	.word	0x0040995c
  40578c:	00409980 	.word	0x00409980
  405790:	004060c1 	.word	0x004060c1
  405794:	004045d9 	.word	0x004045d9
  405798:	00404795 	.word	0x00404795
  40579c:	00409988 	.word	0x00409988
  4057a0:	00404715 	.word	0x00404715
  4057a4:	004099a4 	.word	0x004099a4
  4057a8:	00404675 	.word	0x00404675

004057ac <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  4057ac:	b510      	push	{r4, lr}
  4057ae:	b082      	sub	sp, #8
	switch (u8MsgType) {
  4057b0:	282c      	cmp	r0, #44	; 0x2c
  4057b2:	d003      	beq.n	4057bc <wifi_cb+0x10>
  4057b4:	2832      	cmp	r0, #50	; 0x32
  4057b6:	d013      	beq.n	4057e0 <wifi_cb+0x34>
	default:
	{
		break;
	}
	}
}
  4057b8:	b002      	add	sp, #8
  4057ba:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  4057bc:	780b      	ldrb	r3, [r1, #0]
  4057be:	2b01      	cmp	r3, #1
  4057c0:	d008      	beq.n	4057d4 <wifi_cb+0x28>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4057c2:	2b00      	cmp	r3, #0
  4057c4:	d1f8      	bne.n	4057b8 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  4057c6:	480d      	ldr	r0, [pc, #52]	; (4057fc <wifi_cb+0x50>)
  4057c8:	4b0d      	ldr	r3, [pc, #52]	; (405800 <wifi_cb+0x54>)
  4057ca:	4798      	blx	r3
 			wifi_connected = 0;
  4057cc:	2200      	movs	r2, #0
  4057ce:	4b0d      	ldr	r3, [pc, #52]	; (405804 <wifi_cb+0x58>)
  4057d0:	701a      	strb	r2, [r3, #0]
  4057d2:	e7f1      	b.n	4057b8 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  4057d4:	480c      	ldr	r0, [pc, #48]	; (405808 <wifi_cb+0x5c>)
  4057d6:	4b0a      	ldr	r3, [pc, #40]	; (405800 <wifi_cb+0x54>)
  4057d8:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  4057da:	4b0c      	ldr	r3, [pc, #48]	; (40580c <wifi_cb+0x60>)
  4057dc:	4798      	blx	r3
  4057de:	e7eb      	b.n	4057b8 <wifi_cb+0xc>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4057e0:	788b      	ldrb	r3, [r1, #2]
  4057e2:	784a      	ldrb	r2, [r1, #1]
  4057e4:	7808      	ldrb	r0, [r1, #0]
  4057e6:	78c9      	ldrb	r1, [r1, #3]
  4057e8:	9100      	str	r1, [sp, #0]
  4057ea:	4601      	mov	r1, r0
  4057ec:	4808      	ldr	r0, [pc, #32]	; (405810 <wifi_cb+0x64>)
  4057ee:	4c04      	ldr	r4, [pc, #16]	; (405800 <wifi_cb+0x54>)
  4057f0:	47a0      	blx	r4
		wifi_connected = M2M_WIFI_CONNECTED;
  4057f2:	2201      	movs	r2, #1
  4057f4:	4b03      	ldr	r3, [pc, #12]	; (405804 <wifi_cb+0x58>)
  4057f6:	701a      	strb	r2, [r3, #0]
}
  4057f8:	e7de      	b.n	4057b8 <wifi_cb+0xc>
  4057fa:	bf00      	nop
  4057fc:	00409ad8 	.word	0x00409ad8
  405800:	00405ced 	.word	0x00405ced
  405804:	2040c960 	.word	0x2040c960
  405808:	00409ab8 	.word	0x00409ab8
  40580c:	00402fd5 	.word	0x00402fd5
  405810:	00409afc 	.word	0x00409afc

00405814 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405814:	b5f0      	push	{r4, r5, r6, r7, lr}
  405816:	b083      	sub	sp, #12
  405818:	4605      	mov	r5, r0
  40581a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40581c:	2300      	movs	r3, #0
  40581e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405820:	4b2a      	ldr	r3, [pc, #168]	; (4058cc <usart_serial_getchar+0xb8>)
  405822:	4298      	cmp	r0, r3
  405824:	d013      	beq.n	40584e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405826:	4b2a      	ldr	r3, [pc, #168]	; (4058d0 <usart_serial_getchar+0xbc>)
  405828:	4298      	cmp	r0, r3
  40582a:	d018      	beq.n	40585e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40582c:	4b29      	ldr	r3, [pc, #164]	; (4058d4 <usart_serial_getchar+0xc0>)
  40582e:	4298      	cmp	r0, r3
  405830:	d01d      	beq.n	40586e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  405832:	4b29      	ldr	r3, [pc, #164]	; (4058d8 <usart_serial_getchar+0xc4>)
  405834:	429d      	cmp	r5, r3
  405836:	d022      	beq.n	40587e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405838:	4b28      	ldr	r3, [pc, #160]	; (4058dc <usart_serial_getchar+0xc8>)
  40583a:	429d      	cmp	r5, r3
  40583c:	d027      	beq.n	40588e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40583e:	4b28      	ldr	r3, [pc, #160]	; (4058e0 <usart_serial_getchar+0xcc>)
  405840:	429d      	cmp	r5, r3
  405842:	d02e      	beq.n	4058a2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  405844:	4b27      	ldr	r3, [pc, #156]	; (4058e4 <usart_serial_getchar+0xd0>)
  405846:	429d      	cmp	r5, r3
  405848:	d035      	beq.n	4058b6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40584a:	b003      	add	sp, #12
  40584c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40584e:	461f      	mov	r7, r3
  405850:	4e25      	ldr	r6, [pc, #148]	; (4058e8 <usart_serial_getchar+0xd4>)
  405852:	4621      	mov	r1, r4
  405854:	4638      	mov	r0, r7
  405856:	47b0      	blx	r6
  405858:	2800      	cmp	r0, #0
  40585a:	d1fa      	bne.n	405852 <usart_serial_getchar+0x3e>
  40585c:	e7e9      	b.n	405832 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40585e:	461f      	mov	r7, r3
  405860:	4e21      	ldr	r6, [pc, #132]	; (4058e8 <usart_serial_getchar+0xd4>)
  405862:	4621      	mov	r1, r4
  405864:	4638      	mov	r0, r7
  405866:	47b0      	blx	r6
  405868:	2800      	cmp	r0, #0
  40586a:	d1fa      	bne.n	405862 <usart_serial_getchar+0x4e>
  40586c:	e7e4      	b.n	405838 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40586e:	461f      	mov	r7, r3
  405870:	4e1d      	ldr	r6, [pc, #116]	; (4058e8 <usart_serial_getchar+0xd4>)
  405872:	4621      	mov	r1, r4
  405874:	4638      	mov	r0, r7
  405876:	47b0      	blx	r6
  405878:	2800      	cmp	r0, #0
  40587a:	d1fa      	bne.n	405872 <usart_serial_getchar+0x5e>
  40587c:	e7df      	b.n	40583e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40587e:	461f      	mov	r7, r3
  405880:	4e19      	ldr	r6, [pc, #100]	; (4058e8 <usart_serial_getchar+0xd4>)
  405882:	4621      	mov	r1, r4
  405884:	4638      	mov	r0, r7
  405886:	47b0      	blx	r6
  405888:	2800      	cmp	r0, #0
  40588a:	d1fa      	bne.n	405882 <usart_serial_getchar+0x6e>
  40588c:	e7da      	b.n	405844 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40588e:	461e      	mov	r6, r3
  405890:	4d16      	ldr	r5, [pc, #88]	; (4058ec <usart_serial_getchar+0xd8>)
  405892:	a901      	add	r1, sp, #4
  405894:	4630      	mov	r0, r6
  405896:	47a8      	blx	r5
  405898:	2800      	cmp	r0, #0
  40589a:	d1fa      	bne.n	405892 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40589c:	9b01      	ldr	r3, [sp, #4]
  40589e:	7023      	strb	r3, [r4, #0]
  4058a0:	e7d3      	b.n	40584a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4058a2:	461e      	mov	r6, r3
  4058a4:	4d11      	ldr	r5, [pc, #68]	; (4058ec <usart_serial_getchar+0xd8>)
  4058a6:	a901      	add	r1, sp, #4
  4058a8:	4630      	mov	r0, r6
  4058aa:	47a8      	blx	r5
  4058ac:	2800      	cmp	r0, #0
  4058ae:	d1fa      	bne.n	4058a6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4058b0:	9b01      	ldr	r3, [sp, #4]
  4058b2:	7023      	strb	r3, [r4, #0]
  4058b4:	e7c9      	b.n	40584a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4058b6:	461e      	mov	r6, r3
  4058b8:	4d0c      	ldr	r5, [pc, #48]	; (4058ec <usart_serial_getchar+0xd8>)
  4058ba:	a901      	add	r1, sp, #4
  4058bc:	4630      	mov	r0, r6
  4058be:	47a8      	blx	r5
  4058c0:	2800      	cmp	r0, #0
  4058c2:	d1fa      	bne.n	4058ba <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4058c4:	9b01      	ldr	r3, [sp, #4]
  4058c6:	7023      	strb	r3, [r4, #0]
}
  4058c8:	e7bf      	b.n	40584a <usart_serial_getchar+0x36>
  4058ca:	bf00      	nop
  4058cc:	400e0800 	.word	0x400e0800
  4058d0:	400e0a00 	.word	0x400e0a00
  4058d4:	400e1a00 	.word	0x400e1a00
  4058d8:	400e1c00 	.word	0x400e1c00
  4058dc:	40024000 	.word	0x40024000
  4058e0:	40028000 	.word	0x40028000
  4058e4:	4002c000 	.word	0x4002c000
  4058e8:	0040529d 	.word	0x0040529d
  4058ec:	004053ab 	.word	0x004053ab

004058f0 <usart_serial_putchar>:
{
  4058f0:	b570      	push	{r4, r5, r6, lr}
  4058f2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4058f4:	4b2a      	ldr	r3, [pc, #168]	; (4059a0 <usart_serial_putchar+0xb0>)
  4058f6:	4298      	cmp	r0, r3
  4058f8:	d013      	beq.n	405922 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4058fa:	4b2a      	ldr	r3, [pc, #168]	; (4059a4 <usart_serial_putchar+0xb4>)
  4058fc:	4298      	cmp	r0, r3
  4058fe:	d019      	beq.n	405934 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  405900:	4b29      	ldr	r3, [pc, #164]	; (4059a8 <usart_serial_putchar+0xb8>)
  405902:	4298      	cmp	r0, r3
  405904:	d01f      	beq.n	405946 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  405906:	4b29      	ldr	r3, [pc, #164]	; (4059ac <usart_serial_putchar+0xbc>)
  405908:	4298      	cmp	r0, r3
  40590a:	d025      	beq.n	405958 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40590c:	4b28      	ldr	r3, [pc, #160]	; (4059b0 <usart_serial_putchar+0xc0>)
  40590e:	4298      	cmp	r0, r3
  405910:	d02b      	beq.n	40596a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  405912:	4b28      	ldr	r3, [pc, #160]	; (4059b4 <usart_serial_putchar+0xc4>)
  405914:	4298      	cmp	r0, r3
  405916:	d031      	beq.n	40597c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  405918:	4b27      	ldr	r3, [pc, #156]	; (4059b8 <usart_serial_putchar+0xc8>)
  40591a:	4298      	cmp	r0, r3
  40591c:	d037      	beq.n	40598e <usart_serial_putchar+0x9e>
	return 0;
  40591e:	2000      	movs	r0, #0
}
  405920:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405922:	461e      	mov	r6, r3
  405924:	4d25      	ldr	r5, [pc, #148]	; (4059bc <usart_serial_putchar+0xcc>)
  405926:	4621      	mov	r1, r4
  405928:	4630      	mov	r0, r6
  40592a:	47a8      	blx	r5
  40592c:	2800      	cmp	r0, #0
  40592e:	d1fa      	bne.n	405926 <usart_serial_putchar+0x36>
		return 1;
  405930:	2001      	movs	r0, #1
  405932:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405934:	461e      	mov	r6, r3
  405936:	4d21      	ldr	r5, [pc, #132]	; (4059bc <usart_serial_putchar+0xcc>)
  405938:	4621      	mov	r1, r4
  40593a:	4630      	mov	r0, r6
  40593c:	47a8      	blx	r5
  40593e:	2800      	cmp	r0, #0
  405940:	d1fa      	bne.n	405938 <usart_serial_putchar+0x48>
		return 1;
  405942:	2001      	movs	r0, #1
  405944:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405946:	461e      	mov	r6, r3
  405948:	4d1c      	ldr	r5, [pc, #112]	; (4059bc <usart_serial_putchar+0xcc>)
  40594a:	4621      	mov	r1, r4
  40594c:	4630      	mov	r0, r6
  40594e:	47a8      	blx	r5
  405950:	2800      	cmp	r0, #0
  405952:	d1fa      	bne.n	40594a <usart_serial_putchar+0x5a>
		return 1;
  405954:	2001      	movs	r0, #1
  405956:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405958:	461e      	mov	r6, r3
  40595a:	4d18      	ldr	r5, [pc, #96]	; (4059bc <usart_serial_putchar+0xcc>)
  40595c:	4621      	mov	r1, r4
  40595e:	4630      	mov	r0, r6
  405960:	47a8      	blx	r5
  405962:	2800      	cmp	r0, #0
  405964:	d1fa      	bne.n	40595c <usart_serial_putchar+0x6c>
		return 1;
  405966:	2001      	movs	r0, #1
  405968:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40596a:	461e      	mov	r6, r3
  40596c:	4d14      	ldr	r5, [pc, #80]	; (4059c0 <usart_serial_putchar+0xd0>)
  40596e:	4621      	mov	r1, r4
  405970:	4630      	mov	r0, r6
  405972:	47a8      	blx	r5
  405974:	2800      	cmp	r0, #0
  405976:	d1fa      	bne.n	40596e <usart_serial_putchar+0x7e>
		return 1;
  405978:	2001      	movs	r0, #1
  40597a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40597c:	461e      	mov	r6, r3
  40597e:	4d10      	ldr	r5, [pc, #64]	; (4059c0 <usart_serial_putchar+0xd0>)
  405980:	4621      	mov	r1, r4
  405982:	4630      	mov	r0, r6
  405984:	47a8      	blx	r5
  405986:	2800      	cmp	r0, #0
  405988:	d1fa      	bne.n	405980 <usart_serial_putchar+0x90>
		return 1;
  40598a:	2001      	movs	r0, #1
  40598c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40598e:	461e      	mov	r6, r3
  405990:	4d0b      	ldr	r5, [pc, #44]	; (4059c0 <usart_serial_putchar+0xd0>)
  405992:	4621      	mov	r1, r4
  405994:	4630      	mov	r0, r6
  405996:	47a8      	blx	r5
  405998:	2800      	cmp	r0, #0
  40599a:	d1fa      	bne.n	405992 <usart_serial_putchar+0xa2>
		return 1;
  40599c:	2001      	movs	r0, #1
  40599e:	bd70      	pop	{r4, r5, r6, pc}
  4059a0:	400e0800 	.word	0x400e0800
  4059a4:	400e0a00 	.word	0x400e0a00
  4059a8:	400e1a00 	.word	0x400e1a00
  4059ac:	400e1c00 	.word	0x400e1c00
  4059b0:	40024000 	.word	0x40024000
  4059b4:	40028000 	.word	0x40028000
  4059b8:	4002c000 	.word	0x4002c000
  4059bc:	0040528b 	.word	0x0040528b
  4059c0:	00405395 	.word	0x00405395

004059c4 <vApplicationStackOverflowHook>:
{
  4059c4:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4059c6:	460a      	mov	r2, r1
  4059c8:	4601      	mov	r1, r0
  4059ca:	4802      	ldr	r0, [pc, #8]	; (4059d4 <vApplicationStackOverflowHook+0x10>)
  4059cc:	4b02      	ldr	r3, [pc, #8]	; (4059d8 <vApplicationStackOverflowHook+0x14>)
  4059ce:	4798      	blx	r3
  4059d0:	e7fe      	b.n	4059d0 <vApplicationStackOverflowHook+0xc>
  4059d2:	bf00      	nop
  4059d4:	00409aa0 	.word	0x00409aa0
  4059d8:	00405ced 	.word	0x00405ced

004059dc <vApplicationTickHook>:
{
  4059dc:	4770      	bx	lr

004059de <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4059de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4059e2:	b672      	cpsid	i
  4059e4:	f383 8811 	msr	BASEPRI, r3
  4059e8:	f3bf 8f6f 	isb	sy
  4059ec:	f3bf 8f4f 	dsb	sy
  4059f0:	b662      	cpsie	i
  4059f2:	e7fe      	b.n	4059f2 <vApplicationMallocFailedHook+0x14>

004059f4 <inet_aton>:
{
  4059f4:	b4f0      	push	{r4, r5, r6, r7}
  4059f6:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  4059f8:	2400      	movs	r4, #0
  4059fa:	4622      	mov	r2, r4
  int dots = 0;
  4059fc:	4625      	mov	r5, r4
	        acc = 0;
  4059fe:	4626      	mov	r6, r4
  405a00:	e011      	b.n	405a26 <inet_aton+0x32>
	  switch (cc) {
  405a02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  405a06:	2f09      	cmp	r7, #9
  405a08:	d814      	bhi.n	405a34 <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  405a0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  405a0e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  405a12:	e007      	b.n	405a24 <inet_aton+0x30>
	        if (++dots > 3) {
  405a14:	3501      	adds	r5, #1
  405a16:	2d03      	cmp	r5, #3
  405a18:	dc24      	bgt.n	405a64 <inet_aton+0x70>
	        if (acc > 255) {
  405a1a:	2aff      	cmp	r2, #255	; 0xff
  405a1c:	d824      	bhi.n	405a68 <inet_aton+0x74>
	        addr = addr << 8 | acc;
  405a1e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  405a22:	4632      	mov	r2, r6
  } while (*cp++) ;
  405a24:	b14b      	cbz	r3, 405a3a <inet_aton+0x46>
	  register char cc = *cp;
  405a26:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  405a2a:	2b2e      	cmp	r3, #46	; 0x2e
  405a2c:	d0f2      	beq.n	405a14 <inet_aton+0x20>
  405a2e:	d8e8      	bhi.n	405a02 <inet_aton+0xe>
  405a30:	2b00      	cmp	r3, #0
  405a32:	d0f2      	beq.n	405a1a <inet_aton+0x26>
	        return 0;
  405a34:	2000      	movs	r0, #0
}
  405a36:	bcf0      	pop	{r4, r5, r6, r7}
  405a38:	4770      	bx	lr
  if (dots < 3) {
  405a3a:	2d02      	cmp	r5, #2
  405a3c:	dc03      	bgt.n	405a46 <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  405a3e:	f1c5 0303 	rsb	r3, r5, #3
  405a42:	00db      	lsls	r3, r3, #3
  405a44:	409c      	lsls	r4, r3
  if (ap) {
  405a46:	b189      	cbz	r1, 405a6c <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  405a48:	0e23      	lsrs	r3, r4, #24
  405a4a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  405a4e:	0222      	lsls	r2, r4, #8
  405a50:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  405a54:	431a      	orrs	r2, r3
  405a56:	0a23      	lsrs	r3, r4, #8
  405a58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  405a5c:	4313      	orrs	r3, r2
  405a5e:	600b      	str	r3, [r1, #0]
  return 1;    
  405a60:	2001      	movs	r0, #1
  405a62:	e7e8      	b.n	405a36 <inet_aton+0x42>
		    return 0;
  405a64:	2000      	movs	r0, #0
  405a66:	e7e6      	b.n	405a36 <inet_aton+0x42>
		    return 0;
  405a68:	2000      	movs	r0, #0
  405a6a:	e7e4      	b.n	405a36 <inet_aton+0x42>
  return 1;    
  405a6c:	2001      	movs	r0, #1
  405a6e:	e7e2      	b.n	405a36 <inet_aton+0x42>

00405a70 <task_wifi>:
	}
}



static void task_wifi(void *pvParameters) {
  405a70:	b570      	push	{r4, r5, r6, lr}
  405a72:	b08c      	sub	sp, #48	; 0x30
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;
	
	/* Initialize the BSP. */
	nm_bsp_init();
  405a74:	4b33      	ldr	r3, [pc, #204]	; (405b44 <task_wifi+0xd4>)
  405a76:	4798      	blx	r3
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  405a78:	2300      	movs	r3, #0
  405a7a:	9307      	str	r3, [sp, #28]
  405a7c:	9308      	str	r3, [sp, #32]
  405a7e:	9309      	str	r3, [sp, #36]	; 0x24
  405a80:	930a      	str	r3, [sp, #40]	; 0x28
  405a82:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  405a84:	4b30      	ldr	r3, [pc, #192]	; (405b48 <task_wifi+0xd8>)
  405a86:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  405a88:	a806      	add	r0, sp, #24
  405a8a:	4b30      	ldr	r3, [pc, #192]	; (405b4c <task_wifi+0xdc>)
  405a8c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  405a8e:	b120      	cbz	r0, 405a9a <task_wifi+0x2a>
  405a90:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  405a92:	482f      	ldr	r0, [pc, #188]	; (405b50 <task_wifi+0xe0>)
  405a94:	4b2f      	ldr	r3, [pc, #188]	; (405b54 <task_wifi+0xe4>)
  405a96:	4798      	blx	r3
  405a98:	e7fe      	b.n	405a98 <task_wifi+0x28>
		while (1) {
		}
	}
	
	/* Initialize socket module. */
	socketInit();
  405a9a:	4b2f      	ldr	r3, [pc, #188]	; (405b58 <task_wifi+0xe8>)
  405a9c:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  405a9e:	492f      	ldr	r1, [pc, #188]	; (405b5c <task_wifi+0xec>)
  405aa0:	482f      	ldr	r0, [pc, #188]	; (405b60 <task_wifi+0xf0>)
  405aa2:	4b30      	ldr	r3, [pc, #192]	; (405b64 <task_wifi+0xf4>)
  405aa4:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  405aa6:	4d30      	ldr	r5, [pc, #192]	; (405b68 <task_wifi+0xf8>)
  405aa8:	4629      	mov	r1, r5
  405aaa:	4830      	ldr	r0, [pc, #192]	; (405b6c <task_wifi+0xfc>)
  405aac:	4c29      	ldr	r4, [pc, #164]	; (405b54 <task_wifi+0xe4>)
  405aae:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  405ab0:	23ff      	movs	r3, #255	; 0xff
  405ab2:	9300      	str	r3, [sp, #0]
  405ab4:	4b2e      	ldr	r3, [pc, #184]	; (405b70 <task_wifi+0x100>)
  405ab6:	2202      	movs	r2, #2
  405ab8:	2107      	movs	r1, #7
  405aba:	4628      	mov	r0, r5
  405abc:	4d2d      	ldr	r5, [pc, #180]	; (405b74 <task_wifi+0x104>)
  405abe:	47a8      	blx	r5

	addr_in.sin_family = AF_INET;
  405ac0:	2302      	movs	r3, #2
  405ac2:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  405ac6:	f648 0313 	movw	r3, #34835	; 0x8813
  405aca:	f8ad 300a 	strh.w	r3, [sp, #10]
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  405ace:	a903      	add	r1, sp, #12
  405ad0:	4829      	ldr	r0, [pc, #164]	; (405b78 <task_wifi+0x108>)
  405ad2:	4b2a      	ldr	r3, [pc, #168]	; (405b7c <task_wifi+0x10c>)
  405ad4:	4798      	blx	r3
	printf("Inet aton : %d", addr_in.sin_addr);
  405ad6:	9903      	ldr	r1, [sp, #12]
  405ad8:	4829      	ldr	r0, [pc, #164]	; (405b80 <task_wifi+0x110>)
  405ada:	47a0      	blx	r4
	
  while(1){
	  m2m_wifi_handle_events(NULL);
  405adc:	4d29      	ldr	r5, [pc, #164]	; (405b84 <task_wifi+0x114>)

	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  405ade:	4c2a      	ldr	r4, [pc, #168]	; (405b88 <task_wifi+0x118>)
		  /* Open client socket. */
		  if (tcp_client_socket < 0) {
  405ae0:	4e2a      	ldr	r6, [pc, #168]	; (405b8c <task_wifi+0x11c>)
  405ae2:	e002      	b.n	405aea <task_wifi+0x7a>
			  printf("socket init \n");
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
				  printf("main: failed to create TCP client socket error!\r\n");
  405ae4:	482a      	ldr	r0, [pc, #168]	; (405b90 <task_wifi+0x120>)
  405ae6:	4b1b      	ldr	r3, [pc, #108]	; (405b54 <task_wifi+0xe4>)
  405ae8:	4798      	blx	r3
	  m2m_wifi_handle_events(NULL);
  405aea:	2000      	movs	r0, #0
  405aec:	47a8      	blx	r5
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  405aee:	7823      	ldrb	r3, [r4, #0]
  405af0:	2b01      	cmp	r3, #1
  405af2:	d1fa      	bne.n	405aea <task_wifi+0x7a>
		  if (tcp_client_socket < 0) {
  405af4:	f996 3000 	ldrsb.w	r3, [r6]
  405af8:	2b00      	cmp	r3, #0
  405afa:	daf6      	bge.n	405aea <task_wifi+0x7a>
			  printf("socket init \n");
  405afc:	4825      	ldr	r0, [pc, #148]	; (405b94 <task_wifi+0x124>)
  405afe:	4b15      	ldr	r3, [pc, #84]	; (405b54 <task_wifi+0xe4>)
  405b00:	4798      	blx	r3
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405b02:	2200      	movs	r2, #0
  405b04:	2101      	movs	r1, #1
  405b06:	2002      	movs	r0, #2
  405b08:	4b23      	ldr	r3, [pc, #140]	; (405b98 <task_wifi+0x128>)
  405b0a:	4798      	blx	r3
  405b0c:	7030      	strb	r0, [r6, #0]
  405b0e:	2800      	cmp	r0, #0
  405b10:	dbe8      	blt.n	405ae4 <task_wifi+0x74>
				  continue;
			  }

			  /* Connect server */
			  printf("socket connecting\n");
  405b12:	4822      	ldr	r0, [pc, #136]	; (405b9c <task_wifi+0x12c>)
  405b14:	4b0f      	ldr	r3, [pc, #60]	; (405b54 <task_wifi+0xe4>)
  405b16:	4798      	blx	r3
			  
			  if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  405b18:	2210      	movs	r2, #16
  405b1a:	a902      	add	r1, sp, #8
  405b1c:	f996 0000 	ldrsb.w	r0, [r6]
  405b20:	4b1f      	ldr	r3, [pc, #124]	; (405ba0 <task_wifi+0x130>)
  405b22:	4798      	blx	r3
  405b24:	b918      	cbnz	r0, 405b2e <task_wifi+0xbe>
				  close(tcp_client_socket);
				  tcp_client_socket = -1;
				  printf("error\n");
				}else{
				  gbTcpConnection = true;
  405b26:	2201      	movs	r2, #1
  405b28:	4b1e      	ldr	r3, [pc, #120]	; (405ba4 <task_wifi+0x134>)
  405b2a:	701a      	strb	r2, [r3, #0]
  405b2c:	e7dd      	b.n	405aea <task_wifi+0x7a>
				  close(tcp_client_socket);
  405b2e:	f996 0000 	ldrsb.w	r0, [r6]
  405b32:	4b1d      	ldr	r3, [pc, #116]	; (405ba8 <task_wifi+0x138>)
  405b34:	4798      	blx	r3
				  tcp_client_socket = -1;
  405b36:	23ff      	movs	r3, #255	; 0xff
  405b38:	7033      	strb	r3, [r6, #0]
				  printf("error\n");
  405b3a:	481c      	ldr	r0, [pc, #112]	; (405bac <task_wifi+0x13c>)
  405b3c:	4b05      	ldr	r3, [pc, #20]	; (405b54 <task_wifi+0xe4>)
  405b3e:	4798      	blx	r3
  405b40:	e7d3      	b.n	405aea <task_wifi+0x7a>
  405b42:	bf00      	nop
  405b44:	00401e21 	.word	0x00401e21
  405b48:	004057ad 	.word	0x004057ad
  405b4c:	00402c61 	.word	0x00402c61
  405b50:	004099c0 	.word	0x004099c0
  405b54:	00405ced 	.word	0x00405ced
  405b58:	00404411 	.word	0x00404411
  405b5c:	0040565d 	.word	0x0040565d
  405b60:	0040568d 	.word	0x0040568d
  405b64:	00404455 	.word	0x00404455
  405b68:	004099e8 	.word	0x004099e8
  405b6c:	004099f0 	.word	0x004099f0
  405b70:	00409a14 	.word	0x00409a14
  405b74:	00402fb9 	.word	0x00402fb9
  405b78:	00409a20 	.word	0x00409a20
  405b7c:	004059f5 	.word	0x004059f5
  405b80:	00409a30 	.word	0x00409a30
  405b84:	00402d5d 	.word	0x00402d5d
  405b88:	2040c960 	.word	0x2040c960
  405b8c:	20400020 	.word	0x20400020
  405b90:	00409a50 	.word	0x00409a50
  405b94:	00409a40 	.word	0x00409a40
  405b98:	00404469 	.word	0x00404469
  405b9c:	00409a84 	.word	0x00409a84
  405ba0:	00404549 	.word	0x00404549
  405ba4:	2040c958 	.word	0x2040c958
  405ba8:	00404715 	.word	0x00404715
  405bac:	00409a98 	.word	0x00409a98

00405bb0 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  405bb0:	b500      	push	{lr}
  405bb2:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  405bb4:	4b23      	ldr	r3, [pc, #140]	; (405c44 <main+0x94>)
  405bb6:	4798      	blx	r3
	board_init();
  405bb8:	4b23      	ldr	r3, [pc, #140]	; (405c48 <main+0x98>)
  405bba:	4798      	blx	r3
  405bbc:	200e      	movs	r0, #14
  405bbe:	4e23      	ldr	r6, [pc, #140]	; (405c4c <main+0x9c>)
  405bc0:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405bc2:	4d23      	ldr	r5, [pc, #140]	; (405c50 <main+0xa0>)
  405bc4:	4b23      	ldr	r3, [pc, #140]	; (405c54 <main+0xa4>)
  405bc6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  405bc8:	4a23      	ldr	r2, [pc, #140]	; (405c58 <main+0xa8>)
  405bca:	4b24      	ldr	r3, [pc, #144]	; (405c5c <main+0xac>)
  405bcc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405bce:	4a24      	ldr	r2, [pc, #144]	; (405c60 <main+0xb0>)
  405bd0:	4b24      	ldr	r3, [pc, #144]	; (405c64 <main+0xb4>)
  405bd2:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  405bd4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  405bd8:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  405bda:	23c0      	movs	r3, #192	; 0xc0
  405bdc:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  405bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405be2:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  405be4:	2400      	movs	r4, #0
  405be6:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  405be8:	9408      	str	r4, [sp, #32]
  405bea:	200e      	movs	r0, #14
  405bec:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  405bee:	4a1e      	ldr	r2, [pc, #120]	; (405c68 <main+0xb8>)
  405bf0:	a904      	add	r1, sp, #16
  405bf2:	4628      	mov	r0, r5
  405bf4:	4b1d      	ldr	r3, [pc, #116]	; (405c6c <main+0xbc>)
  405bf6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  405bf8:	4628      	mov	r0, r5
  405bfa:	4b1d      	ldr	r3, [pc, #116]	; (405c70 <main+0xc0>)
  405bfc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  405bfe:	4628      	mov	r0, r5
  405c00:	4b1c      	ldr	r3, [pc, #112]	; (405c74 <main+0xc4>)
  405c02:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  405c04:	4e1c      	ldr	r6, [pc, #112]	; (405c78 <main+0xc8>)
  405c06:	6833      	ldr	r3, [r6, #0]
  405c08:	4621      	mov	r1, r4
  405c0a:	6898      	ldr	r0, [r3, #8]
  405c0c:	4d1b      	ldr	r5, [pc, #108]	; (405c7c <main+0xcc>)
  405c0e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  405c10:	6833      	ldr	r3, [r6, #0]
  405c12:	4621      	mov	r1, r4
  405c14:	6858      	ldr	r0, [r3, #4]
  405c16:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  405c18:	4819      	ldr	r0, [pc, #100]	; (405c80 <main+0xd0>)
  405c1a:	4b1a      	ldr	r3, [pc, #104]	; (405c84 <main+0xd4>)
  405c1c:	4798      	blx	r3
	
	
	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,
  405c1e:	9403      	str	r4, [sp, #12]
  405c20:	9402      	str	r4, [sp, #8]
  405c22:	9401      	str	r4, [sp, #4]
  405c24:	9400      	str	r4, [sp, #0]
  405c26:	4623      	mov	r3, r4
  405c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405c2c:	4916      	ldr	r1, [pc, #88]	; (405c88 <main+0xd8>)
  405c2e:	4817      	ldr	r0, [pc, #92]	; (405c8c <main+0xdc>)
  405c30:	4c17      	ldr	r4, [pc, #92]	; (405c90 <main+0xe0>)
  405c32:	47a0      	blx	r4
  405c34:	2801      	cmp	r0, #1
  405c36:	d002      	beq.n	405c3e <main+0x8e>
	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Wifi task\r\n");
  405c38:	4816      	ldr	r0, [pc, #88]	; (405c94 <main+0xe4>)
  405c3a:	4b12      	ldr	r3, [pc, #72]	; (405c84 <main+0xd4>)
  405c3c:	4798      	blx	r3
	}

	vTaskStartScheduler();
  405c3e:	4b16      	ldr	r3, [pc, #88]	; (405c98 <main+0xe8>)
  405c40:	4798      	blx	r3
  405c42:	e7fe      	b.n	405c42 <main+0x92>
  405c44:	0040491d 	.word	0x0040491d
  405c48:	00404a19 	.word	0x00404a19
  405c4c:	004050e5 	.word	0x004050e5
  405c50:	40028000 	.word	0x40028000
  405c54:	2040caa0 	.word	0x2040caa0
  405c58:	004058f1 	.word	0x004058f1
  405c5c:	2040ca9c 	.word	0x2040ca9c
  405c60:	00405815 	.word	0x00405815
  405c64:	2040ca98 	.word	0x2040ca98
  405c68:	08f0d180 	.word	0x08f0d180
  405c6c:	00405335 	.word	0x00405335
  405c70:	00405389 	.word	0x00405389
  405c74:	0040538f 	.word	0x0040538f
  405c78:	20400024 	.word	0x20400024
  405c7c:	00405ee5 	.word	0x00405ee5
  405c80:	0040988c 	.word	0x0040988c
  405c84:	00405ced 	.word	0x00405ced
  405c88:	004098f0 	.word	0x004098f0
  405c8c:	00405a71 	.word	0x00405a71
  405c90:	00400e91 	.word	0x00400e91
  405c94:	004098f8 	.word	0x004098f8
  405c98:	004010c5 	.word	0x004010c5

00405c9c <__libc_init_array>:
  405c9c:	b570      	push	{r4, r5, r6, lr}
  405c9e:	4e0f      	ldr	r6, [pc, #60]	; (405cdc <__libc_init_array+0x40>)
  405ca0:	4d0f      	ldr	r5, [pc, #60]	; (405ce0 <__libc_init_array+0x44>)
  405ca2:	1b76      	subs	r6, r6, r5
  405ca4:	10b6      	asrs	r6, r6, #2
  405ca6:	bf18      	it	ne
  405ca8:	2400      	movne	r4, #0
  405caa:	d005      	beq.n	405cb8 <__libc_init_array+0x1c>
  405cac:	3401      	adds	r4, #1
  405cae:	f855 3b04 	ldr.w	r3, [r5], #4
  405cb2:	4798      	blx	r3
  405cb4:	42a6      	cmp	r6, r4
  405cb6:	d1f9      	bne.n	405cac <__libc_init_array+0x10>
  405cb8:	4e0a      	ldr	r6, [pc, #40]	; (405ce4 <__libc_init_array+0x48>)
  405cba:	4d0b      	ldr	r5, [pc, #44]	; (405ce8 <__libc_init_array+0x4c>)
  405cbc:	1b76      	subs	r6, r6, r5
  405cbe:	f003 ffe5 	bl	409c8c <_init>
  405cc2:	10b6      	asrs	r6, r6, #2
  405cc4:	bf18      	it	ne
  405cc6:	2400      	movne	r4, #0
  405cc8:	d006      	beq.n	405cd8 <__libc_init_array+0x3c>
  405cca:	3401      	adds	r4, #1
  405ccc:	f855 3b04 	ldr.w	r3, [r5], #4
  405cd0:	4798      	blx	r3
  405cd2:	42a6      	cmp	r6, r4
  405cd4:	d1f9      	bne.n	405cca <__libc_init_array+0x2e>
  405cd6:	bd70      	pop	{r4, r5, r6, pc}
  405cd8:	bd70      	pop	{r4, r5, r6, pc}
  405cda:	bf00      	nop
  405cdc:	00409c98 	.word	0x00409c98
  405ce0:	00409c98 	.word	0x00409c98
  405ce4:	00409ca0 	.word	0x00409ca0
  405ce8:	00409c98 	.word	0x00409c98

00405cec <iprintf>:
  405cec:	b40f      	push	{r0, r1, r2, r3}
  405cee:	b500      	push	{lr}
  405cf0:	4907      	ldr	r1, [pc, #28]	; (405d10 <iprintf+0x24>)
  405cf2:	b083      	sub	sp, #12
  405cf4:	ab04      	add	r3, sp, #16
  405cf6:	6808      	ldr	r0, [r1, #0]
  405cf8:	f853 2b04 	ldr.w	r2, [r3], #4
  405cfc:	6881      	ldr	r1, [r0, #8]
  405cfe:	9301      	str	r3, [sp, #4]
  405d00:	f000 fa8c 	bl	40621c <_vfiprintf_r>
  405d04:	b003      	add	sp, #12
  405d06:	f85d eb04 	ldr.w	lr, [sp], #4
  405d0a:	b004      	add	sp, #16
  405d0c:	4770      	bx	lr
  405d0e:	bf00      	nop
  405d10:	20400024 	.word	0x20400024

00405d14 <memcpy>:
  405d14:	4684      	mov	ip, r0
  405d16:	ea41 0300 	orr.w	r3, r1, r0
  405d1a:	f013 0303 	ands.w	r3, r3, #3
  405d1e:	d16d      	bne.n	405dfc <memcpy+0xe8>
  405d20:	3a40      	subs	r2, #64	; 0x40
  405d22:	d341      	bcc.n	405da8 <memcpy+0x94>
  405d24:	f851 3b04 	ldr.w	r3, [r1], #4
  405d28:	f840 3b04 	str.w	r3, [r0], #4
  405d2c:	f851 3b04 	ldr.w	r3, [r1], #4
  405d30:	f840 3b04 	str.w	r3, [r0], #4
  405d34:	f851 3b04 	ldr.w	r3, [r1], #4
  405d38:	f840 3b04 	str.w	r3, [r0], #4
  405d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  405d40:	f840 3b04 	str.w	r3, [r0], #4
  405d44:	f851 3b04 	ldr.w	r3, [r1], #4
  405d48:	f840 3b04 	str.w	r3, [r0], #4
  405d4c:	f851 3b04 	ldr.w	r3, [r1], #4
  405d50:	f840 3b04 	str.w	r3, [r0], #4
  405d54:	f851 3b04 	ldr.w	r3, [r1], #4
  405d58:	f840 3b04 	str.w	r3, [r0], #4
  405d5c:	f851 3b04 	ldr.w	r3, [r1], #4
  405d60:	f840 3b04 	str.w	r3, [r0], #4
  405d64:	f851 3b04 	ldr.w	r3, [r1], #4
  405d68:	f840 3b04 	str.w	r3, [r0], #4
  405d6c:	f851 3b04 	ldr.w	r3, [r1], #4
  405d70:	f840 3b04 	str.w	r3, [r0], #4
  405d74:	f851 3b04 	ldr.w	r3, [r1], #4
  405d78:	f840 3b04 	str.w	r3, [r0], #4
  405d7c:	f851 3b04 	ldr.w	r3, [r1], #4
  405d80:	f840 3b04 	str.w	r3, [r0], #4
  405d84:	f851 3b04 	ldr.w	r3, [r1], #4
  405d88:	f840 3b04 	str.w	r3, [r0], #4
  405d8c:	f851 3b04 	ldr.w	r3, [r1], #4
  405d90:	f840 3b04 	str.w	r3, [r0], #4
  405d94:	f851 3b04 	ldr.w	r3, [r1], #4
  405d98:	f840 3b04 	str.w	r3, [r0], #4
  405d9c:	f851 3b04 	ldr.w	r3, [r1], #4
  405da0:	f840 3b04 	str.w	r3, [r0], #4
  405da4:	3a40      	subs	r2, #64	; 0x40
  405da6:	d2bd      	bcs.n	405d24 <memcpy+0x10>
  405da8:	3230      	adds	r2, #48	; 0x30
  405daa:	d311      	bcc.n	405dd0 <memcpy+0xbc>
  405dac:	f851 3b04 	ldr.w	r3, [r1], #4
  405db0:	f840 3b04 	str.w	r3, [r0], #4
  405db4:	f851 3b04 	ldr.w	r3, [r1], #4
  405db8:	f840 3b04 	str.w	r3, [r0], #4
  405dbc:	f851 3b04 	ldr.w	r3, [r1], #4
  405dc0:	f840 3b04 	str.w	r3, [r0], #4
  405dc4:	f851 3b04 	ldr.w	r3, [r1], #4
  405dc8:	f840 3b04 	str.w	r3, [r0], #4
  405dcc:	3a10      	subs	r2, #16
  405dce:	d2ed      	bcs.n	405dac <memcpy+0x98>
  405dd0:	320c      	adds	r2, #12
  405dd2:	d305      	bcc.n	405de0 <memcpy+0xcc>
  405dd4:	f851 3b04 	ldr.w	r3, [r1], #4
  405dd8:	f840 3b04 	str.w	r3, [r0], #4
  405ddc:	3a04      	subs	r2, #4
  405dde:	d2f9      	bcs.n	405dd4 <memcpy+0xc0>
  405de0:	3204      	adds	r2, #4
  405de2:	d008      	beq.n	405df6 <memcpy+0xe2>
  405de4:	07d2      	lsls	r2, r2, #31
  405de6:	bf1c      	itt	ne
  405de8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405dec:	f800 3b01 	strbne.w	r3, [r0], #1
  405df0:	d301      	bcc.n	405df6 <memcpy+0xe2>
  405df2:	880b      	ldrh	r3, [r1, #0]
  405df4:	8003      	strh	r3, [r0, #0]
  405df6:	4660      	mov	r0, ip
  405df8:	4770      	bx	lr
  405dfa:	bf00      	nop
  405dfc:	2a08      	cmp	r2, #8
  405dfe:	d313      	bcc.n	405e28 <memcpy+0x114>
  405e00:	078b      	lsls	r3, r1, #30
  405e02:	d08d      	beq.n	405d20 <memcpy+0xc>
  405e04:	f010 0303 	ands.w	r3, r0, #3
  405e08:	d08a      	beq.n	405d20 <memcpy+0xc>
  405e0a:	f1c3 0304 	rsb	r3, r3, #4
  405e0e:	1ad2      	subs	r2, r2, r3
  405e10:	07db      	lsls	r3, r3, #31
  405e12:	bf1c      	itt	ne
  405e14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405e18:	f800 3b01 	strbne.w	r3, [r0], #1
  405e1c:	d380      	bcc.n	405d20 <memcpy+0xc>
  405e1e:	f831 3b02 	ldrh.w	r3, [r1], #2
  405e22:	f820 3b02 	strh.w	r3, [r0], #2
  405e26:	e77b      	b.n	405d20 <memcpy+0xc>
  405e28:	3a04      	subs	r2, #4
  405e2a:	d3d9      	bcc.n	405de0 <memcpy+0xcc>
  405e2c:	3a01      	subs	r2, #1
  405e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
  405e32:	f800 3b01 	strb.w	r3, [r0], #1
  405e36:	d2f9      	bcs.n	405e2c <memcpy+0x118>
  405e38:	780b      	ldrb	r3, [r1, #0]
  405e3a:	7003      	strb	r3, [r0, #0]
  405e3c:	784b      	ldrb	r3, [r1, #1]
  405e3e:	7043      	strb	r3, [r0, #1]
  405e40:	788b      	ldrb	r3, [r1, #2]
  405e42:	7083      	strb	r3, [r0, #2]
  405e44:	4660      	mov	r0, ip
  405e46:	4770      	bx	lr

00405e48 <memset>:
  405e48:	b470      	push	{r4, r5, r6}
  405e4a:	0786      	lsls	r6, r0, #30
  405e4c:	d046      	beq.n	405edc <memset+0x94>
  405e4e:	1e54      	subs	r4, r2, #1
  405e50:	2a00      	cmp	r2, #0
  405e52:	d041      	beq.n	405ed8 <memset+0x90>
  405e54:	b2ca      	uxtb	r2, r1
  405e56:	4603      	mov	r3, r0
  405e58:	e002      	b.n	405e60 <memset+0x18>
  405e5a:	f114 34ff 	adds.w	r4, r4, #4294967295
  405e5e:	d33b      	bcc.n	405ed8 <memset+0x90>
  405e60:	f803 2b01 	strb.w	r2, [r3], #1
  405e64:	079d      	lsls	r5, r3, #30
  405e66:	d1f8      	bne.n	405e5a <memset+0x12>
  405e68:	2c03      	cmp	r4, #3
  405e6a:	d92e      	bls.n	405eca <memset+0x82>
  405e6c:	b2cd      	uxtb	r5, r1
  405e6e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405e72:	2c0f      	cmp	r4, #15
  405e74:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405e78:	d919      	bls.n	405eae <memset+0x66>
  405e7a:	f103 0210 	add.w	r2, r3, #16
  405e7e:	4626      	mov	r6, r4
  405e80:	3e10      	subs	r6, #16
  405e82:	2e0f      	cmp	r6, #15
  405e84:	f842 5c10 	str.w	r5, [r2, #-16]
  405e88:	f842 5c0c 	str.w	r5, [r2, #-12]
  405e8c:	f842 5c08 	str.w	r5, [r2, #-8]
  405e90:	f842 5c04 	str.w	r5, [r2, #-4]
  405e94:	f102 0210 	add.w	r2, r2, #16
  405e98:	d8f2      	bhi.n	405e80 <memset+0x38>
  405e9a:	f1a4 0210 	sub.w	r2, r4, #16
  405e9e:	f022 020f 	bic.w	r2, r2, #15
  405ea2:	f004 040f 	and.w	r4, r4, #15
  405ea6:	3210      	adds	r2, #16
  405ea8:	2c03      	cmp	r4, #3
  405eaa:	4413      	add	r3, r2
  405eac:	d90d      	bls.n	405eca <memset+0x82>
  405eae:	461e      	mov	r6, r3
  405eb0:	4622      	mov	r2, r4
  405eb2:	3a04      	subs	r2, #4
  405eb4:	2a03      	cmp	r2, #3
  405eb6:	f846 5b04 	str.w	r5, [r6], #4
  405eba:	d8fa      	bhi.n	405eb2 <memset+0x6a>
  405ebc:	1f22      	subs	r2, r4, #4
  405ebe:	f022 0203 	bic.w	r2, r2, #3
  405ec2:	3204      	adds	r2, #4
  405ec4:	4413      	add	r3, r2
  405ec6:	f004 0403 	and.w	r4, r4, #3
  405eca:	b12c      	cbz	r4, 405ed8 <memset+0x90>
  405ecc:	b2c9      	uxtb	r1, r1
  405ece:	441c      	add	r4, r3
  405ed0:	f803 1b01 	strb.w	r1, [r3], #1
  405ed4:	429c      	cmp	r4, r3
  405ed6:	d1fb      	bne.n	405ed0 <memset+0x88>
  405ed8:	bc70      	pop	{r4, r5, r6}
  405eda:	4770      	bx	lr
  405edc:	4614      	mov	r4, r2
  405ede:	4603      	mov	r3, r0
  405ee0:	e7c2      	b.n	405e68 <memset+0x20>
  405ee2:	bf00      	nop

00405ee4 <setbuf>:
  405ee4:	2900      	cmp	r1, #0
  405ee6:	bf0c      	ite	eq
  405ee8:	2202      	moveq	r2, #2
  405eea:	2200      	movne	r2, #0
  405eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405ef0:	f000 b800 	b.w	405ef4 <setvbuf>

00405ef4 <setvbuf>:
  405ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405ef8:	4c61      	ldr	r4, [pc, #388]	; (406080 <setvbuf+0x18c>)
  405efa:	6825      	ldr	r5, [r4, #0]
  405efc:	b083      	sub	sp, #12
  405efe:	4604      	mov	r4, r0
  405f00:	460f      	mov	r7, r1
  405f02:	4690      	mov	r8, r2
  405f04:	461e      	mov	r6, r3
  405f06:	b115      	cbz	r5, 405f0e <setvbuf+0x1a>
  405f08:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405f0a:	2b00      	cmp	r3, #0
  405f0c:	d064      	beq.n	405fd8 <setvbuf+0xe4>
  405f0e:	f1b8 0f02 	cmp.w	r8, #2
  405f12:	d006      	beq.n	405f22 <setvbuf+0x2e>
  405f14:	f1b8 0f01 	cmp.w	r8, #1
  405f18:	f200 809f 	bhi.w	40605a <setvbuf+0x166>
  405f1c:	2e00      	cmp	r6, #0
  405f1e:	f2c0 809c 	blt.w	40605a <setvbuf+0x166>
  405f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405f24:	07d8      	lsls	r0, r3, #31
  405f26:	d534      	bpl.n	405f92 <setvbuf+0x9e>
  405f28:	4621      	mov	r1, r4
  405f2a:	4628      	mov	r0, r5
  405f2c:	f001 f914 	bl	407158 <_fflush_r>
  405f30:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405f32:	b141      	cbz	r1, 405f46 <setvbuf+0x52>
  405f34:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405f38:	4299      	cmp	r1, r3
  405f3a:	d002      	beq.n	405f42 <setvbuf+0x4e>
  405f3c:	4628      	mov	r0, r5
  405f3e:	f001 fa89 	bl	407454 <_free_r>
  405f42:	2300      	movs	r3, #0
  405f44:	6323      	str	r3, [r4, #48]	; 0x30
  405f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f4a:	2200      	movs	r2, #0
  405f4c:	61a2      	str	r2, [r4, #24]
  405f4e:	6062      	str	r2, [r4, #4]
  405f50:	061a      	lsls	r2, r3, #24
  405f52:	d43a      	bmi.n	405fca <setvbuf+0xd6>
  405f54:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405f58:	f023 0303 	bic.w	r3, r3, #3
  405f5c:	f1b8 0f02 	cmp.w	r8, #2
  405f60:	81a3      	strh	r3, [r4, #12]
  405f62:	d01d      	beq.n	405fa0 <setvbuf+0xac>
  405f64:	ab01      	add	r3, sp, #4
  405f66:	466a      	mov	r2, sp
  405f68:	4621      	mov	r1, r4
  405f6a:	4628      	mov	r0, r5
  405f6c:	f001 fd10 	bl	407990 <__swhatbuf_r>
  405f70:	89a3      	ldrh	r3, [r4, #12]
  405f72:	4318      	orrs	r0, r3
  405f74:	81a0      	strh	r0, [r4, #12]
  405f76:	2e00      	cmp	r6, #0
  405f78:	d132      	bne.n	405fe0 <setvbuf+0xec>
  405f7a:	9e00      	ldr	r6, [sp, #0]
  405f7c:	4630      	mov	r0, r6
  405f7e:	f001 fd7f 	bl	407a80 <malloc>
  405f82:	4607      	mov	r7, r0
  405f84:	2800      	cmp	r0, #0
  405f86:	d06b      	beq.n	406060 <setvbuf+0x16c>
  405f88:	89a3      	ldrh	r3, [r4, #12]
  405f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405f8e:	81a3      	strh	r3, [r4, #12]
  405f90:	e028      	b.n	405fe4 <setvbuf+0xf0>
  405f92:	89a3      	ldrh	r3, [r4, #12]
  405f94:	0599      	lsls	r1, r3, #22
  405f96:	d4c7      	bmi.n	405f28 <setvbuf+0x34>
  405f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405f9a:	f001 fcf5 	bl	407988 <__retarget_lock_acquire_recursive>
  405f9e:	e7c3      	b.n	405f28 <setvbuf+0x34>
  405fa0:	2500      	movs	r5, #0
  405fa2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405fa4:	2600      	movs	r6, #0
  405fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405faa:	f043 0302 	orr.w	r3, r3, #2
  405fae:	2001      	movs	r0, #1
  405fb0:	60a6      	str	r6, [r4, #8]
  405fb2:	07ce      	lsls	r6, r1, #31
  405fb4:	81a3      	strh	r3, [r4, #12]
  405fb6:	6022      	str	r2, [r4, #0]
  405fb8:	6122      	str	r2, [r4, #16]
  405fba:	6160      	str	r0, [r4, #20]
  405fbc:	d401      	bmi.n	405fc2 <setvbuf+0xce>
  405fbe:	0598      	lsls	r0, r3, #22
  405fc0:	d53e      	bpl.n	406040 <setvbuf+0x14c>
  405fc2:	4628      	mov	r0, r5
  405fc4:	b003      	add	sp, #12
  405fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405fca:	6921      	ldr	r1, [r4, #16]
  405fcc:	4628      	mov	r0, r5
  405fce:	f001 fa41 	bl	407454 <_free_r>
  405fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405fd6:	e7bd      	b.n	405f54 <setvbuf+0x60>
  405fd8:	4628      	mov	r0, r5
  405fda:	f001 f915 	bl	407208 <__sinit>
  405fde:	e796      	b.n	405f0e <setvbuf+0x1a>
  405fe0:	2f00      	cmp	r7, #0
  405fe2:	d0cb      	beq.n	405f7c <setvbuf+0x88>
  405fe4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405fe6:	2b00      	cmp	r3, #0
  405fe8:	d033      	beq.n	406052 <setvbuf+0x15e>
  405fea:	9b00      	ldr	r3, [sp, #0]
  405fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405ff0:	6027      	str	r7, [r4, #0]
  405ff2:	429e      	cmp	r6, r3
  405ff4:	bf1c      	itt	ne
  405ff6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  405ffa:	81a2      	strhne	r2, [r4, #12]
  405ffc:	f1b8 0f01 	cmp.w	r8, #1
  406000:	bf04      	itt	eq
  406002:	f042 0201 	orreq.w	r2, r2, #1
  406006:	81a2      	strheq	r2, [r4, #12]
  406008:	b292      	uxth	r2, r2
  40600a:	f012 0308 	ands.w	r3, r2, #8
  40600e:	6127      	str	r7, [r4, #16]
  406010:	6166      	str	r6, [r4, #20]
  406012:	d00e      	beq.n	406032 <setvbuf+0x13e>
  406014:	07d1      	lsls	r1, r2, #31
  406016:	d51a      	bpl.n	40604e <setvbuf+0x15a>
  406018:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40601a:	4276      	negs	r6, r6
  40601c:	2300      	movs	r3, #0
  40601e:	f015 0501 	ands.w	r5, r5, #1
  406022:	61a6      	str	r6, [r4, #24]
  406024:	60a3      	str	r3, [r4, #8]
  406026:	d009      	beq.n	40603c <setvbuf+0x148>
  406028:	2500      	movs	r5, #0
  40602a:	4628      	mov	r0, r5
  40602c:	b003      	add	sp, #12
  40602e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406032:	60a3      	str	r3, [r4, #8]
  406034:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406036:	f015 0501 	ands.w	r5, r5, #1
  40603a:	d1f5      	bne.n	406028 <setvbuf+0x134>
  40603c:	0593      	lsls	r3, r2, #22
  40603e:	d4c0      	bmi.n	405fc2 <setvbuf+0xce>
  406040:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406042:	f001 fca3 	bl	40798c <__retarget_lock_release_recursive>
  406046:	4628      	mov	r0, r5
  406048:	b003      	add	sp, #12
  40604a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40604e:	60a6      	str	r6, [r4, #8]
  406050:	e7f0      	b.n	406034 <setvbuf+0x140>
  406052:	4628      	mov	r0, r5
  406054:	f001 f8d8 	bl	407208 <__sinit>
  406058:	e7c7      	b.n	405fea <setvbuf+0xf6>
  40605a:	f04f 35ff 	mov.w	r5, #4294967295
  40605e:	e7b0      	b.n	405fc2 <setvbuf+0xce>
  406060:	f8dd 9000 	ldr.w	r9, [sp]
  406064:	45b1      	cmp	r9, r6
  406066:	d004      	beq.n	406072 <setvbuf+0x17e>
  406068:	4648      	mov	r0, r9
  40606a:	f001 fd09 	bl	407a80 <malloc>
  40606e:	4607      	mov	r7, r0
  406070:	b920      	cbnz	r0, 40607c <setvbuf+0x188>
  406072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406076:	f04f 35ff 	mov.w	r5, #4294967295
  40607a:	e792      	b.n	405fa2 <setvbuf+0xae>
  40607c:	464e      	mov	r6, r9
  40607e:	e783      	b.n	405f88 <setvbuf+0x94>
  406080:	20400024 	.word	0x20400024
	...

004060c0 <strlen>:
  4060c0:	f890 f000 	pld	[r0]
  4060c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4060c8:	f020 0107 	bic.w	r1, r0, #7
  4060cc:	f06f 0c00 	mvn.w	ip, #0
  4060d0:	f010 0407 	ands.w	r4, r0, #7
  4060d4:	f891 f020 	pld	[r1, #32]
  4060d8:	f040 8049 	bne.w	40616e <strlen+0xae>
  4060dc:	f04f 0400 	mov.w	r4, #0
  4060e0:	f06f 0007 	mvn.w	r0, #7
  4060e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4060e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4060ec:	f100 0008 	add.w	r0, r0, #8
  4060f0:	fa82 f24c 	uadd8	r2, r2, ip
  4060f4:	faa4 f28c 	sel	r2, r4, ip
  4060f8:	fa83 f34c 	uadd8	r3, r3, ip
  4060fc:	faa2 f38c 	sel	r3, r2, ip
  406100:	bb4b      	cbnz	r3, 406156 <strlen+0x96>
  406102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406106:	fa82 f24c 	uadd8	r2, r2, ip
  40610a:	f100 0008 	add.w	r0, r0, #8
  40610e:	faa4 f28c 	sel	r2, r4, ip
  406112:	fa83 f34c 	uadd8	r3, r3, ip
  406116:	faa2 f38c 	sel	r3, r2, ip
  40611a:	b9e3      	cbnz	r3, 406156 <strlen+0x96>
  40611c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406120:	fa82 f24c 	uadd8	r2, r2, ip
  406124:	f100 0008 	add.w	r0, r0, #8
  406128:	faa4 f28c 	sel	r2, r4, ip
  40612c:	fa83 f34c 	uadd8	r3, r3, ip
  406130:	faa2 f38c 	sel	r3, r2, ip
  406134:	b97b      	cbnz	r3, 406156 <strlen+0x96>
  406136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40613a:	f101 0120 	add.w	r1, r1, #32
  40613e:	fa82 f24c 	uadd8	r2, r2, ip
  406142:	f100 0008 	add.w	r0, r0, #8
  406146:	faa4 f28c 	sel	r2, r4, ip
  40614a:	fa83 f34c 	uadd8	r3, r3, ip
  40614e:	faa2 f38c 	sel	r3, r2, ip
  406152:	2b00      	cmp	r3, #0
  406154:	d0c6      	beq.n	4060e4 <strlen+0x24>
  406156:	2a00      	cmp	r2, #0
  406158:	bf04      	itt	eq
  40615a:	3004      	addeq	r0, #4
  40615c:	461a      	moveq	r2, r3
  40615e:	ba12      	rev	r2, r2
  406160:	fab2 f282 	clz	r2, r2
  406164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40616c:	4770      	bx	lr
  40616e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406172:	f004 0503 	and.w	r5, r4, #3
  406176:	f1c4 0000 	rsb	r0, r4, #0
  40617a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40617e:	f014 0f04 	tst.w	r4, #4
  406182:	f891 f040 	pld	[r1, #64]	; 0x40
  406186:	fa0c f505 	lsl.w	r5, ip, r5
  40618a:	ea62 0205 	orn	r2, r2, r5
  40618e:	bf1c      	itt	ne
  406190:	ea63 0305 	ornne	r3, r3, r5
  406194:	4662      	movne	r2, ip
  406196:	f04f 0400 	mov.w	r4, #0
  40619a:	e7a9      	b.n	4060f0 <strlen+0x30>

0040619c <__sprint_r.part.0>:
  40619c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4061a2:	049c      	lsls	r4, r3, #18
  4061a4:	4693      	mov	fp, r2
  4061a6:	d52f      	bpl.n	406208 <__sprint_r.part.0+0x6c>
  4061a8:	6893      	ldr	r3, [r2, #8]
  4061aa:	6812      	ldr	r2, [r2, #0]
  4061ac:	b353      	cbz	r3, 406204 <__sprint_r.part.0+0x68>
  4061ae:	460e      	mov	r6, r1
  4061b0:	4607      	mov	r7, r0
  4061b2:	f102 0908 	add.w	r9, r2, #8
  4061b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4061ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4061be:	d017      	beq.n	4061f0 <__sprint_r.part.0+0x54>
  4061c0:	3d04      	subs	r5, #4
  4061c2:	2400      	movs	r4, #0
  4061c4:	e001      	b.n	4061ca <__sprint_r.part.0+0x2e>
  4061c6:	45a0      	cmp	r8, r4
  4061c8:	d010      	beq.n	4061ec <__sprint_r.part.0+0x50>
  4061ca:	4632      	mov	r2, r6
  4061cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4061d0:	4638      	mov	r0, r7
  4061d2:	f001 f8bb 	bl	40734c <_fputwc_r>
  4061d6:	1c43      	adds	r3, r0, #1
  4061d8:	f104 0401 	add.w	r4, r4, #1
  4061dc:	d1f3      	bne.n	4061c6 <__sprint_r.part.0+0x2a>
  4061de:	2300      	movs	r3, #0
  4061e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4061e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4061e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4061f0:	f02a 0a03 	bic.w	sl, sl, #3
  4061f4:	eba3 030a 	sub.w	r3, r3, sl
  4061f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4061fc:	f109 0908 	add.w	r9, r9, #8
  406200:	2b00      	cmp	r3, #0
  406202:	d1d8      	bne.n	4061b6 <__sprint_r.part.0+0x1a>
  406204:	2000      	movs	r0, #0
  406206:	e7ea      	b.n	4061de <__sprint_r.part.0+0x42>
  406208:	f001 fa0a 	bl	407620 <__sfvwrite_r>
  40620c:	2300      	movs	r3, #0
  40620e:	f8cb 3008 	str.w	r3, [fp, #8]
  406212:	f8cb 3004 	str.w	r3, [fp, #4]
  406216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40621a:	bf00      	nop

0040621c <_vfiprintf_r>:
  40621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406220:	b0ad      	sub	sp, #180	; 0xb4
  406222:	461d      	mov	r5, r3
  406224:	468b      	mov	fp, r1
  406226:	4690      	mov	r8, r2
  406228:	9307      	str	r3, [sp, #28]
  40622a:	9006      	str	r0, [sp, #24]
  40622c:	b118      	cbz	r0, 406236 <_vfiprintf_r+0x1a>
  40622e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406230:	2b00      	cmp	r3, #0
  406232:	f000 80f3 	beq.w	40641c <_vfiprintf_r+0x200>
  406236:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40623a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40623e:	07df      	lsls	r7, r3, #31
  406240:	b281      	uxth	r1, r0
  406242:	d402      	bmi.n	40624a <_vfiprintf_r+0x2e>
  406244:	058e      	lsls	r6, r1, #22
  406246:	f140 80fc 	bpl.w	406442 <_vfiprintf_r+0x226>
  40624a:	048c      	lsls	r4, r1, #18
  40624c:	d40a      	bmi.n	406264 <_vfiprintf_r+0x48>
  40624e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406252:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40625a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40625e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  406262:	b289      	uxth	r1, r1
  406264:	0708      	lsls	r0, r1, #28
  406266:	f140 80b3 	bpl.w	4063d0 <_vfiprintf_r+0x1b4>
  40626a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40626e:	2b00      	cmp	r3, #0
  406270:	f000 80ae 	beq.w	4063d0 <_vfiprintf_r+0x1b4>
  406274:	f001 031a 	and.w	r3, r1, #26
  406278:	2b0a      	cmp	r3, #10
  40627a:	f000 80b5 	beq.w	4063e8 <_vfiprintf_r+0x1cc>
  40627e:	2300      	movs	r3, #0
  406280:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406284:	930b      	str	r3, [sp, #44]	; 0x2c
  406286:	9311      	str	r3, [sp, #68]	; 0x44
  406288:	9310      	str	r3, [sp, #64]	; 0x40
  40628a:	9303      	str	r3, [sp, #12]
  40628c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406290:	46ca      	mov	sl, r9
  406292:	f8cd b010 	str.w	fp, [sp, #16]
  406296:	f898 3000 	ldrb.w	r3, [r8]
  40629a:	4644      	mov	r4, r8
  40629c:	b1fb      	cbz	r3, 4062de <_vfiprintf_r+0xc2>
  40629e:	2b25      	cmp	r3, #37	; 0x25
  4062a0:	d102      	bne.n	4062a8 <_vfiprintf_r+0x8c>
  4062a2:	e01c      	b.n	4062de <_vfiprintf_r+0xc2>
  4062a4:	2b25      	cmp	r3, #37	; 0x25
  4062a6:	d003      	beq.n	4062b0 <_vfiprintf_r+0x94>
  4062a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4062ac:	2b00      	cmp	r3, #0
  4062ae:	d1f9      	bne.n	4062a4 <_vfiprintf_r+0x88>
  4062b0:	eba4 0508 	sub.w	r5, r4, r8
  4062b4:	b19d      	cbz	r5, 4062de <_vfiprintf_r+0xc2>
  4062b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4062b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062ba:	f8ca 8000 	str.w	r8, [sl]
  4062be:	3301      	adds	r3, #1
  4062c0:	442a      	add	r2, r5
  4062c2:	2b07      	cmp	r3, #7
  4062c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4062c8:	9211      	str	r2, [sp, #68]	; 0x44
  4062ca:	9310      	str	r3, [sp, #64]	; 0x40
  4062cc:	dd7a      	ble.n	4063c4 <_vfiprintf_r+0x1a8>
  4062ce:	2a00      	cmp	r2, #0
  4062d0:	f040 84b0 	bne.w	406c34 <_vfiprintf_r+0xa18>
  4062d4:	9b03      	ldr	r3, [sp, #12]
  4062d6:	9210      	str	r2, [sp, #64]	; 0x40
  4062d8:	442b      	add	r3, r5
  4062da:	46ca      	mov	sl, r9
  4062dc:	9303      	str	r3, [sp, #12]
  4062de:	7823      	ldrb	r3, [r4, #0]
  4062e0:	2b00      	cmp	r3, #0
  4062e2:	f000 83e0 	beq.w	406aa6 <_vfiprintf_r+0x88a>
  4062e6:	2000      	movs	r0, #0
  4062e8:	f04f 0300 	mov.w	r3, #0
  4062ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4062f0:	f104 0801 	add.w	r8, r4, #1
  4062f4:	7862      	ldrb	r2, [r4, #1]
  4062f6:	4605      	mov	r5, r0
  4062f8:	4606      	mov	r6, r0
  4062fa:	4603      	mov	r3, r0
  4062fc:	f04f 34ff 	mov.w	r4, #4294967295
  406300:	f108 0801 	add.w	r8, r8, #1
  406304:	f1a2 0120 	sub.w	r1, r2, #32
  406308:	2958      	cmp	r1, #88	; 0x58
  40630a:	f200 82de 	bhi.w	4068ca <_vfiprintf_r+0x6ae>
  40630e:	e8df f011 	tbh	[pc, r1, lsl #1]
  406312:	0221      	.short	0x0221
  406314:	02dc02dc 	.word	0x02dc02dc
  406318:	02dc0229 	.word	0x02dc0229
  40631c:	02dc02dc 	.word	0x02dc02dc
  406320:	02dc02dc 	.word	0x02dc02dc
  406324:	028902dc 	.word	0x028902dc
  406328:	02dc0295 	.word	0x02dc0295
  40632c:	02bd00a2 	.word	0x02bd00a2
  406330:	019f02dc 	.word	0x019f02dc
  406334:	01a401a4 	.word	0x01a401a4
  406338:	01a401a4 	.word	0x01a401a4
  40633c:	01a401a4 	.word	0x01a401a4
  406340:	01a401a4 	.word	0x01a401a4
  406344:	02dc01a4 	.word	0x02dc01a4
  406348:	02dc02dc 	.word	0x02dc02dc
  40634c:	02dc02dc 	.word	0x02dc02dc
  406350:	02dc02dc 	.word	0x02dc02dc
  406354:	02dc02dc 	.word	0x02dc02dc
  406358:	01b202dc 	.word	0x01b202dc
  40635c:	02dc02dc 	.word	0x02dc02dc
  406360:	02dc02dc 	.word	0x02dc02dc
  406364:	02dc02dc 	.word	0x02dc02dc
  406368:	02dc02dc 	.word	0x02dc02dc
  40636c:	02dc02dc 	.word	0x02dc02dc
  406370:	02dc0197 	.word	0x02dc0197
  406374:	02dc02dc 	.word	0x02dc02dc
  406378:	02dc02dc 	.word	0x02dc02dc
  40637c:	02dc019b 	.word	0x02dc019b
  406380:	025302dc 	.word	0x025302dc
  406384:	02dc02dc 	.word	0x02dc02dc
  406388:	02dc02dc 	.word	0x02dc02dc
  40638c:	02dc02dc 	.word	0x02dc02dc
  406390:	02dc02dc 	.word	0x02dc02dc
  406394:	02dc02dc 	.word	0x02dc02dc
  406398:	021b025a 	.word	0x021b025a
  40639c:	02dc02dc 	.word	0x02dc02dc
  4063a0:	026e02dc 	.word	0x026e02dc
  4063a4:	02dc021b 	.word	0x02dc021b
  4063a8:	027302dc 	.word	0x027302dc
  4063ac:	01f502dc 	.word	0x01f502dc
  4063b0:	02090182 	.word	0x02090182
  4063b4:	02dc02d7 	.word	0x02dc02d7
  4063b8:	02dc029a 	.word	0x02dc029a
  4063bc:	02dc00a7 	.word	0x02dc00a7
  4063c0:	022e02dc 	.word	0x022e02dc
  4063c4:	f10a 0a08 	add.w	sl, sl, #8
  4063c8:	9b03      	ldr	r3, [sp, #12]
  4063ca:	442b      	add	r3, r5
  4063cc:	9303      	str	r3, [sp, #12]
  4063ce:	e786      	b.n	4062de <_vfiprintf_r+0xc2>
  4063d0:	4659      	mov	r1, fp
  4063d2:	9806      	ldr	r0, [sp, #24]
  4063d4:	f000 fdac 	bl	406f30 <__swsetup_r>
  4063d8:	bb18      	cbnz	r0, 406422 <_vfiprintf_r+0x206>
  4063da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4063de:	f001 031a 	and.w	r3, r1, #26
  4063e2:	2b0a      	cmp	r3, #10
  4063e4:	f47f af4b 	bne.w	40627e <_vfiprintf_r+0x62>
  4063e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4063ec:	2b00      	cmp	r3, #0
  4063ee:	f6ff af46 	blt.w	40627e <_vfiprintf_r+0x62>
  4063f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4063f6:	07db      	lsls	r3, r3, #31
  4063f8:	d405      	bmi.n	406406 <_vfiprintf_r+0x1ea>
  4063fa:	058f      	lsls	r7, r1, #22
  4063fc:	d403      	bmi.n	406406 <_vfiprintf_r+0x1ea>
  4063fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406402:	f001 fac3 	bl	40798c <__retarget_lock_release_recursive>
  406406:	462b      	mov	r3, r5
  406408:	4642      	mov	r2, r8
  40640a:	4659      	mov	r1, fp
  40640c:	9806      	ldr	r0, [sp, #24]
  40640e:	f000 fd4d 	bl	406eac <__sbprintf>
  406412:	9003      	str	r0, [sp, #12]
  406414:	9803      	ldr	r0, [sp, #12]
  406416:	b02d      	add	sp, #180	; 0xb4
  406418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40641c:	f000 fef4 	bl	407208 <__sinit>
  406420:	e709      	b.n	406236 <_vfiprintf_r+0x1a>
  406422:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406426:	07d9      	lsls	r1, r3, #31
  406428:	d404      	bmi.n	406434 <_vfiprintf_r+0x218>
  40642a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40642e:	059a      	lsls	r2, r3, #22
  406430:	f140 84aa 	bpl.w	406d88 <_vfiprintf_r+0xb6c>
  406434:	f04f 33ff 	mov.w	r3, #4294967295
  406438:	9303      	str	r3, [sp, #12]
  40643a:	9803      	ldr	r0, [sp, #12]
  40643c:	b02d      	add	sp, #180	; 0xb4
  40643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406442:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406446:	f001 fa9f 	bl	407988 <__retarget_lock_acquire_recursive>
  40644a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40644e:	b281      	uxth	r1, r0
  406450:	e6fb      	b.n	40624a <_vfiprintf_r+0x2e>
  406452:	4276      	negs	r6, r6
  406454:	9207      	str	r2, [sp, #28]
  406456:	f043 0304 	orr.w	r3, r3, #4
  40645a:	f898 2000 	ldrb.w	r2, [r8]
  40645e:	e74f      	b.n	406300 <_vfiprintf_r+0xe4>
  406460:	9608      	str	r6, [sp, #32]
  406462:	069e      	lsls	r6, r3, #26
  406464:	f100 8450 	bmi.w	406d08 <_vfiprintf_r+0xaec>
  406468:	9907      	ldr	r1, [sp, #28]
  40646a:	06dd      	lsls	r5, r3, #27
  40646c:	460a      	mov	r2, r1
  40646e:	f100 83ef 	bmi.w	406c50 <_vfiprintf_r+0xa34>
  406472:	0658      	lsls	r0, r3, #25
  406474:	f140 83ec 	bpl.w	406c50 <_vfiprintf_r+0xa34>
  406478:	880e      	ldrh	r6, [r1, #0]
  40647a:	3104      	adds	r1, #4
  40647c:	2700      	movs	r7, #0
  40647e:	2201      	movs	r2, #1
  406480:	9107      	str	r1, [sp, #28]
  406482:	f04f 0100 	mov.w	r1, #0
  406486:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40648a:	2500      	movs	r5, #0
  40648c:	1c61      	adds	r1, r4, #1
  40648e:	f000 8116 	beq.w	4066be <_vfiprintf_r+0x4a2>
  406492:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406496:	9102      	str	r1, [sp, #8]
  406498:	ea56 0107 	orrs.w	r1, r6, r7
  40649c:	f040 8114 	bne.w	4066c8 <_vfiprintf_r+0x4ac>
  4064a0:	2c00      	cmp	r4, #0
  4064a2:	f040 835c 	bne.w	406b5e <_vfiprintf_r+0x942>
  4064a6:	2a00      	cmp	r2, #0
  4064a8:	f040 83b7 	bne.w	406c1a <_vfiprintf_r+0x9fe>
  4064ac:	f013 0301 	ands.w	r3, r3, #1
  4064b0:	9305      	str	r3, [sp, #20]
  4064b2:	f000 8457 	beq.w	406d64 <_vfiprintf_r+0xb48>
  4064b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4064ba:	2330      	movs	r3, #48	; 0x30
  4064bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4064c0:	9b05      	ldr	r3, [sp, #20]
  4064c2:	42a3      	cmp	r3, r4
  4064c4:	bfb8      	it	lt
  4064c6:	4623      	movlt	r3, r4
  4064c8:	9301      	str	r3, [sp, #4]
  4064ca:	b10d      	cbz	r5, 4064d0 <_vfiprintf_r+0x2b4>
  4064cc:	3301      	adds	r3, #1
  4064ce:	9301      	str	r3, [sp, #4]
  4064d0:	9b02      	ldr	r3, [sp, #8]
  4064d2:	f013 0302 	ands.w	r3, r3, #2
  4064d6:	9309      	str	r3, [sp, #36]	; 0x24
  4064d8:	d002      	beq.n	4064e0 <_vfiprintf_r+0x2c4>
  4064da:	9b01      	ldr	r3, [sp, #4]
  4064dc:	3302      	adds	r3, #2
  4064de:	9301      	str	r3, [sp, #4]
  4064e0:	9b02      	ldr	r3, [sp, #8]
  4064e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4064e6:	930a      	str	r3, [sp, #40]	; 0x28
  4064e8:	f040 8217 	bne.w	40691a <_vfiprintf_r+0x6fe>
  4064ec:	9b08      	ldr	r3, [sp, #32]
  4064ee:	9a01      	ldr	r2, [sp, #4]
  4064f0:	1a9d      	subs	r5, r3, r2
  4064f2:	2d00      	cmp	r5, #0
  4064f4:	f340 8211 	ble.w	40691a <_vfiprintf_r+0x6fe>
  4064f8:	2d10      	cmp	r5, #16
  4064fa:	f340 8490 	ble.w	406e1e <_vfiprintf_r+0xc02>
  4064fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406500:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406502:	4ec4      	ldr	r6, [pc, #784]	; (406814 <_vfiprintf_r+0x5f8>)
  406504:	46d6      	mov	lr, sl
  406506:	2710      	movs	r7, #16
  406508:	46a2      	mov	sl, r4
  40650a:	4619      	mov	r1, r3
  40650c:	9c06      	ldr	r4, [sp, #24]
  40650e:	e007      	b.n	406520 <_vfiprintf_r+0x304>
  406510:	f101 0c02 	add.w	ip, r1, #2
  406514:	f10e 0e08 	add.w	lr, lr, #8
  406518:	4601      	mov	r1, r0
  40651a:	3d10      	subs	r5, #16
  40651c:	2d10      	cmp	r5, #16
  40651e:	dd11      	ble.n	406544 <_vfiprintf_r+0x328>
  406520:	1c48      	adds	r0, r1, #1
  406522:	3210      	adds	r2, #16
  406524:	2807      	cmp	r0, #7
  406526:	9211      	str	r2, [sp, #68]	; 0x44
  406528:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40652c:	9010      	str	r0, [sp, #64]	; 0x40
  40652e:	ddef      	ble.n	406510 <_vfiprintf_r+0x2f4>
  406530:	2a00      	cmp	r2, #0
  406532:	f040 81e4 	bne.w	4068fe <_vfiprintf_r+0x6e2>
  406536:	3d10      	subs	r5, #16
  406538:	2d10      	cmp	r5, #16
  40653a:	4611      	mov	r1, r2
  40653c:	f04f 0c01 	mov.w	ip, #1
  406540:	46ce      	mov	lr, r9
  406542:	dced      	bgt.n	406520 <_vfiprintf_r+0x304>
  406544:	4654      	mov	r4, sl
  406546:	4661      	mov	r1, ip
  406548:	46f2      	mov	sl, lr
  40654a:	442a      	add	r2, r5
  40654c:	2907      	cmp	r1, #7
  40654e:	9211      	str	r2, [sp, #68]	; 0x44
  406550:	f8ca 6000 	str.w	r6, [sl]
  406554:	f8ca 5004 	str.w	r5, [sl, #4]
  406558:	9110      	str	r1, [sp, #64]	; 0x40
  40655a:	f300 82ec 	bgt.w	406b36 <_vfiprintf_r+0x91a>
  40655e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406562:	f10a 0a08 	add.w	sl, sl, #8
  406566:	1c48      	adds	r0, r1, #1
  406568:	2d00      	cmp	r5, #0
  40656a:	f040 81de 	bne.w	40692a <_vfiprintf_r+0x70e>
  40656e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406570:	2b00      	cmp	r3, #0
  406572:	f000 81f8 	beq.w	406966 <_vfiprintf_r+0x74a>
  406576:	3202      	adds	r2, #2
  406578:	a90e      	add	r1, sp, #56	; 0x38
  40657a:	2302      	movs	r3, #2
  40657c:	2807      	cmp	r0, #7
  40657e:	9211      	str	r2, [sp, #68]	; 0x44
  406580:	9010      	str	r0, [sp, #64]	; 0x40
  406582:	e88a 000a 	stmia.w	sl, {r1, r3}
  406586:	f340 81ea 	ble.w	40695e <_vfiprintf_r+0x742>
  40658a:	2a00      	cmp	r2, #0
  40658c:	f040 838c 	bne.w	406ca8 <_vfiprintf_r+0xa8c>
  406590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406592:	2b80      	cmp	r3, #128	; 0x80
  406594:	f04f 0001 	mov.w	r0, #1
  406598:	4611      	mov	r1, r2
  40659a:	46ca      	mov	sl, r9
  40659c:	f040 81e7 	bne.w	40696e <_vfiprintf_r+0x752>
  4065a0:	9b08      	ldr	r3, [sp, #32]
  4065a2:	9d01      	ldr	r5, [sp, #4]
  4065a4:	1b5e      	subs	r6, r3, r5
  4065a6:	2e00      	cmp	r6, #0
  4065a8:	f340 81e1 	ble.w	40696e <_vfiprintf_r+0x752>
  4065ac:	2e10      	cmp	r6, #16
  4065ae:	4d9a      	ldr	r5, [pc, #616]	; (406818 <_vfiprintf_r+0x5fc>)
  4065b0:	f340 8450 	ble.w	406e54 <_vfiprintf_r+0xc38>
  4065b4:	46d4      	mov	ip, sl
  4065b6:	2710      	movs	r7, #16
  4065b8:	46a2      	mov	sl, r4
  4065ba:	9c06      	ldr	r4, [sp, #24]
  4065bc:	e007      	b.n	4065ce <_vfiprintf_r+0x3b2>
  4065be:	f101 0e02 	add.w	lr, r1, #2
  4065c2:	f10c 0c08 	add.w	ip, ip, #8
  4065c6:	4601      	mov	r1, r0
  4065c8:	3e10      	subs	r6, #16
  4065ca:	2e10      	cmp	r6, #16
  4065cc:	dd11      	ble.n	4065f2 <_vfiprintf_r+0x3d6>
  4065ce:	1c48      	adds	r0, r1, #1
  4065d0:	3210      	adds	r2, #16
  4065d2:	2807      	cmp	r0, #7
  4065d4:	9211      	str	r2, [sp, #68]	; 0x44
  4065d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4065da:	9010      	str	r0, [sp, #64]	; 0x40
  4065dc:	ddef      	ble.n	4065be <_vfiprintf_r+0x3a2>
  4065de:	2a00      	cmp	r2, #0
  4065e0:	f040 829d 	bne.w	406b1e <_vfiprintf_r+0x902>
  4065e4:	3e10      	subs	r6, #16
  4065e6:	2e10      	cmp	r6, #16
  4065e8:	f04f 0e01 	mov.w	lr, #1
  4065ec:	4611      	mov	r1, r2
  4065ee:	46cc      	mov	ip, r9
  4065f0:	dced      	bgt.n	4065ce <_vfiprintf_r+0x3b2>
  4065f2:	4654      	mov	r4, sl
  4065f4:	46e2      	mov	sl, ip
  4065f6:	4432      	add	r2, r6
  4065f8:	f1be 0f07 	cmp.w	lr, #7
  4065fc:	9211      	str	r2, [sp, #68]	; 0x44
  4065fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  406602:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406606:	f300 8369 	bgt.w	406cdc <_vfiprintf_r+0xac0>
  40660a:	f10a 0a08 	add.w	sl, sl, #8
  40660e:	f10e 0001 	add.w	r0, lr, #1
  406612:	4671      	mov	r1, lr
  406614:	e1ab      	b.n	40696e <_vfiprintf_r+0x752>
  406616:	9608      	str	r6, [sp, #32]
  406618:	f013 0220 	ands.w	r2, r3, #32
  40661c:	f040 838c 	bne.w	406d38 <_vfiprintf_r+0xb1c>
  406620:	f013 0110 	ands.w	r1, r3, #16
  406624:	f040 831a 	bne.w	406c5c <_vfiprintf_r+0xa40>
  406628:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40662c:	f000 8316 	beq.w	406c5c <_vfiprintf_r+0xa40>
  406630:	9807      	ldr	r0, [sp, #28]
  406632:	460a      	mov	r2, r1
  406634:	4601      	mov	r1, r0
  406636:	3104      	adds	r1, #4
  406638:	8806      	ldrh	r6, [r0, #0]
  40663a:	9107      	str	r1, [sp, #28]
  40663c:	2700      	movs	r7, #0
  40663e:	e720      	b.n	406482 <_vfiprintf_r+0x266>
  406640:	9608      	str	r6, [sp, #32]
  406642:	f043 0310 	orr.w	r3, r3, #16
  406646:	e7e7      	b.n	406618 <_vfiprintf_r+0x3fc>
  406648:	9608      	str	r6, [sp, #32]
  40664a:	f043 0310 	orr.w	r3, r3, #16
  40664e:	e708      	b.n	406462 <_vfiprintf_r+0x246>
  406650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406654:	f898 2000 	ldrb.w	r2, [r8]
  406658:	e652      	b.n	406300 <_vfiprintf_r+0xe4>
  40665a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40665e:	2600      	movs	r6, #0
  406660:	f818 2b01 	ldrb.w	r2, [r8], #1
  406664:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406668:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40666c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406670:	2909      	cmp	r1, #9
  406672:	d9f5      	bls.n	406660 <_vfiprintf_r+0x444>
  406674:	e646      	b.n	406304 <_vfiprintf_r+0xe8>
  406676:	9608      	str	r6, [sp, #32]
  406678:	2800      	cmp	r0, #0
  40667a:	f040 8408 	bne.w	406e8e <_vfiprintf_r+0xc72>
  40667e:	f043 0310 	orr.w	r3, r3, #16
  406682:	069e      	lsls	r6, r3, #26
  406684:	f100 834c 	bmi.w	406d20 <_vfiprintf_r+0xb04>
  406688:	06dd      	lsls	r5, r3, #27
  40668a:	f100 82f3 	bmi.w	406c74 <_vfiprintf_r+0xa58>
  40668e:	0658      	lsls	r0, r3, #25
  406690:	f140 82f0 	bpl.w	406c74 <_vfiprintf_r+0xa58>
  406694:	9d07      	ldr	r5, [sp, #28]
  406696:	f9b5 6000 	ldrsh.w	r6, [r5]
  40669a:	462a      	mov	r2, r5
  40669c:	17f7      	asrs	r7, r6, #31
  40669e:	3204      	adds	r2, #4
  4066a0:	4630      	mov	r0, r6
  4066a2:	4639      	mov	r1, r7
  4066a4:	9207      	str	r2, [sp, #28]
  4066a6:	2800      	cmp	r0, #0
  4066a8:	f171 0200 	sbcs.w	r2, r1, #0
  4066ac:	f2c0 835d 	blt.w	406d6a <_vfiprintf_r+0xb4e>
  4066b0:	1c61      	adds	r1, r4, #1
  4066b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4066b6:	f04f 0201 	mov.w	r2, #1
  4066ba:	f47f aeea 	bne.w	406492 <_vfiprintf_r+0x276>
  4066be:	ea56 0107 	orrs.w	r1, r6, r7
  4066c2:	f000 824d 	beq.w	406b60 <_vfiprintf_r+0x944>
  4066c6:	9302      	str	r3, [sp, #8]
  4066c8:	2a01      	cmp	r2, #1
  4066ca:	f000 828c 	beq.w	406be6 <_vfiprintf_r+0x9ca>
  4066ce:	2a02      	cmp	r2, #2
  4066d0:	f040 825c 	bne.w	406b8c <_vfiprintf_r+0x970>
  4066d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4066d6:	46cb      	mov	fp, r9
  4066d8:	0933      	lsrs	r3, r6, #4
  4066da:	f006 010f 	and.w	r1, r6, #15
  4066de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4066e2:	093a      	lsrs	r2, r7, #4
  4066e4:	461e      	mov	r6, r3
  4066e6:	4617      	mov	r7, r2
  4066e8:	5c43      	ldrb	r3, [r0, r1]
  4066ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4066ee:	ea56 0307 	orrs.w	r3, r6, r7
  4066f2:	d1f1      	bne.n	4066d8 <_vfiprintf_r+0x4bc>
  4066f4:	eba9 030b 	sub.w	r3, r9, fp
  4066f8:	9305      	str	r3, [sp, #20]
  4066fa:	e6e1      	b.n	4064c0 <_vfiprintf_r+0x2a4>
  4066fc:	2800      	cmp	r0, #0
  4066fe:	f040 83c0 	bne.w	406e82 <_vfiprintf_r+0xc66>
  406702:	0699      	lsls	r1, r3, #26
  406704:	f100 8367 	bmi.w	406dd6 <_vfiprintf_r+0xbba>
  406708:	06da      	lsls	r2, r3, #27
  40670a:	f100 80f1 	bmi.w	4068f0 <_vfiprintf_r+0x6d4>
  40670e:	065b      	lsls	r3, r3, #25
  406710:	f140 80ee 	bpl.w	4068f0 <_vfiprintf_r+0x6d4>
  406714:	9a07      	ldr	r2, [sp, #28]
  406716:	6813      	ldr	r3, [r2, #0]
  406718:	3204      	adds	r2, #4
  40671a:	9207      	str	r2, [sp, #28]
  40671c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  406720:	801a      	strh	r2, [r3, #0]
  406722:	e5b8      	b.n	406296 <_vfiprintf_r+0x7a>
  406724:	9807      	ldr	r0, [sp, #28]
  406726:	4a3d      	ldr	r2, [pc, #244]	; (40681c <_vfiprintf_r+0x600>)
  406728:	9608      	str	r6, [sp, #32]
  40672a:	920b      	str	r2, [sp, #44]	; 0x2c
  40672c:	6806      	ldr	r6, [r0, #0]
  40672e:	2278      	movs	r2, #120	; 0x78
  406730:	2130      	movs	r1, #48	; 0x30
  406732:	3004      	adds	r0, #4
  406734:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406738:	f043 0302 	orr.w	r3, r3, #2
  40673c:	9007      	str	r0, [sp, #28]
  40673e:	2700      	movs	r7, #0
  406740:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406744:	2202      	movs	r2, #2
  406746:	e69c      	b.n	406482 <_vfiprintf_r+0x266>
  406748:	9608      	str	r6, [sp, #32]
  40674a:	2800      	cmp	r0, #0
  40674c:	d099      	beq.n	406682 <_vfiprintf_r+0x466>
  40674e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406752:	e796      	b.n	406682 <_vfiprintf_r+0x466>
  406754:	f898 2000 	ldrb.w	r2, [r8]
  406758:	2d00      	cmp	r5, #0
  40675a:	f47f add1 	bne.w	406300 <_vfiprintf_r+0xe4>
  40675e:	2001      	movs	r0, #1
  406760:	2520      	movs	r5, #32
  406762:	e5cd      	b.n	406300 <_vfiprintf_r+0xe4>
  406764:	f043 0301 	orr.w	r3, r3, #1
  406768:	f898 2000 	ldrb.w	r2, [r8]
  40676c:	e5c8      	b.n	406300 <_vfiprintf_r+0xe4>
  40676e:	9608      	str	r6, [sp, #32]
  406770:	2800      	cmp	r0, #0
  406772:	f040 8393 	bne.w	406e9c <_vfiprintf_r+0xc80>
  406776:	4929      	ldr	r1, [pc, #164]	; (40681c <_vfiprintf_r+0x600>)
  406778:	910b      	str	r1, [sp, #44]	; 0x2c
  40677a:	069f      	lsls	r7, r3, #26
  40677c:	f100 82e8 	bmi.w	406d50 <_vfiprintf_r+0xb34>
  406780:	9807      	ldr	r0, [sp, #28]
  406782:	06de      	lsls	r6, r3, #27
  406784:	4601      	mov	r1, r0
  406786:	f100 8270 	bmi.w	406c6a <_vfiprintf_r+0xa4e>
  40678a:	065d      	lsls	r5, r3, #25
  40678c:	f140 826d 	bpl.w	406c6a <_vfiprintf_r+0xa4e>
  406790:	3104      	adds	r1, #4
  406792:	8806      	ldrh	r6, [r0, #0]
  406794:	9107      	str	r1, [sp, #28]
  406796:	2700      	movs	r7, #0
  406798:	07d8      	lsls	r0, r3, #31
  40679a:	f140 8222 	bpl.w	406be2 <_vfiprintf_r+0x9c6>
  40679e:	ea56 0107 	orrs.w	r1, r6, r7
  4067a2:	f000 821e 	beq.w	406be2 <_vfiprintf_r+0x9c6>
  4067a6:	2130      	movs	r1, #48	; 0x30
  4067a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4067ac:	f043 0302 	orr.w	r3, r3, #2
  4067b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4067b4:	2202      	movs	r2, #2
  4067b6:	e664      	b.n	406482 <_vfiprintf_r+0x266>
  4067b8:	9608      	str	r6, [sp, #32]
  4067ba:	2800      	cmp	r0, #0
  4067bc:	f040 836b 	bne.w	406e96 <_vfiprintf_r+0xc7a>
  4067c0:	4917      	ldr	r1, [pc, #92]	; (406820 <_vfiprintf_r+0x604>)
  4067c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4067c4:	e7d9      	b.n	40677a <_vfiprintf_r+0x55e>
  4067c6:	9907      	ldr	r1, [sp, #28]
  4067c8:	9608      	str	r6, [sp, #32]
  4067ca:	680a      	ldr	r2, [r1, #0]
  4067cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4067d0:	f04f 0000 	mov.w	r0, #0
  4067d4:	460a      	mov	r2, r1
  4067d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4067da:	3204      	adds	r2, #4
  4067dc:	2001      	movs	r0, #1
  4067de:	9001      	str	r0, [sp, #4]
  4067e0:	9207      	str	r2, [sp, #28]
  4067e2:	9005      	str	r0, [sp, #20]
  4067e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4067e8:	9302      	str	r3, [sp, #8]
  4067ea:	2400      	movs	r4, #0
  4067ec:	e670      	b.n	4064d0 <_vfiprintf_r+0x2b4>
  4067ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067f2:	f898 2000 	ldrb.w	r2, [r8]
  4067f6:	e583      	b.n	406300 <_vfiprintf_r+0xe4>
  4067f8:	f898 2000 	ldrb.w	r2, [r8]
  4067fc:	2a6c      	cmp	r2, #108	; 0x6c
  4067fe:	bf03      	ittte	eq
  406800:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406804:	f043 0320 	orreq.w	r3, r3, #32
  406808:	f108 0801 	addeq.w	r8, r8, #1
  40680c:	f043 0310 	orrne.w	r3, r3, #16
  406810:	e576      	b.n	406300 <_vfiprintf_r+0xe4>
  406812:	bf00      	nop
  406814:	00409b58 	.word	0x00409b58
  406818:	00409b68 	.word	0x00409b68
  40681c:	00409b3c 	.word	0x00409b3c
  406820:	00409b28 	.word	0x00409b28
  406824:	9907      	ldr	r1, [sp, #28]
  406826:	680e      	ldr	r6, [r1, #0]
  406828:	460a      	mov	r2, r1
  40682a:	2e00      	cmp	r6, #0
  40682c:	f102 0204 	add.w	r2, r2, #4
  406830:	f6ff ae0f 	blt.w	406452 <_vfiprintf_r+0x236>
  406834:	9207      	str	r2, [sp, #28]
  406836:	f898 2000 	ldrb.w	r2, [r8]
  40683a:	e561      	b.n	406300 <_vfiprintf_r+0xe4>
  40683c:	f898 2000 	ldrb.w	r2, [r8]
  406840:	2001      	movs	r0, #1
  406842:	252b      	movs	r5, #43	; 0x2b
  406844:	e55c      	b.n	406300 <_vfiprintf_r+0xe4>
  406846:	9907      	ldr	r1, [sp, #28]
  406848:	9608      	str	r6, [sp, #32]
  40684a:	f8d1 b000 	ldr.w	fp, [r1]
  40684e:	f04f 0200 	mov.w	r2, #0
  406852:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406856:	1d0e      	adds	r6, r1, #4
  406858:	f1bb 0f00 	cmp.w	fp, #0
  40685c:	f000 82e5 	beq.w	406e2a <_vfiprintf_r+0xc0e>
  406860:	1c67      	adds	r7, r4, #1
  406862:	f000 82c4 	beq.w	406dee <_vfiprintf_r+0xbd2>
  406866:	4622      	mov	r2, r4
  406868:	2100      	movs	r1, #0
  40686a:	4658      	mov	r0, fp
  40686c:	9301      	str	r3, [sp, #4]
  40686e:	f001 fbd7 	bl	408020 <memchr>
  406872:	9b01      	ldr	r3, [sp, #4]
  406874:	2800      	cmp	r0, #0
  406876:	f000 82e5 	beq.w	406e44 <_vfiprintf_r+0xc28>
  40687a:	eba0 020b 	sub.w	r2, r0, fp
  40687e:	9205      	str	r2, [sp, #20]
  406880:	9607      	str	r6, [sp, #28]
  406882:	9302      	str	r3, [sp, #8]
  406884:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406888:	2400      	movs	r4, #0
  40688a:	e619      	b.n	4064c0 <_vfiprintf_r+0x2a4>
  40688c:	f898 2000 	ldrb.w	r2, [r8]
  406890:	2a2a      	cmp	r2, #42	; 0x2a
  406892:	f108 0701 	add.w	r7, r8, #1
  406896:	f000 82e9 	beq.w	406e6c <_vfiprintf_r+0xc50>
  40689a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40689e:	2909      	cmp	r1, #9
  4068a0:	46b8      	mov	r8, r7
  4068a2:	f04f 0400 	mov.w	r4, #0
  4068a6:	f63f ad2d 	bhi.w	406304 <_vfiprintf_r+0xe8>
  4068aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4068ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4068b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4068b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4068ba:	2909      	cmp	r1, #9
  4068bc:	d9f5      	bls.n	4068aa <_vfiprintf_r+0x68e>
  4068be:	e521      	b.n	406304 <_vfiprintf_r+0xe8>
  4068c0:	f043 0320 	orr.w	r3, r3, #32
  4068c4:	f898 2000 	ldrb.w	r2, [r8]
  4068c8:	e51a      	b.n	406300 <_vfiprintf_r+0xe4>
  4068ca:	9608      	str	r6, [sp, #32]
  4068cc:	2800      	cmp	r0, #0
  4068ce:	f040 82db 	bne.w	406e88 <_vfiprintf_r+0xc6c>
  4068d2:	2a00      	cmp	r2, #0
  4068d4:	f000 80e7 	beq.w	406aa6 <_vfiprintf_r+0x88a>
  4068d8:	2101      	movs	r1, #1
  4068da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4068de:	f04f 0200 	mov.w	r2, #0
  4068e2:	9101      	str	r1, [sp, #4]
  4068e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4068e8:	9105      	str	r1, [sp, #20]
  4068ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4068ee:	e77b      	b.n	4067e8 <_vfiprintf_r+0x5cc>
  4068f0:	9a07      	ldr	r2, [sp, #28]
  4068f2:	6813      	ldr	r3, [r2, #0]
  4068f4:	3204      	adds	r2, #4
  4068f6:	9207      	str	r2, [sp, #28]
  4068f8:	9a03      	ldr	r2, [sp, #12]
  4068fa:	601a      	str	r2, [r3, #0]
  4068fc:	e4cb      	b.n	406296 <_vfiprintf_r+0x7a>
  4068fe:	aa0f      	add	r2, sp, #60	; 0x3c
  406900:	9904      	ldr	r1, [sp, #16]
  406902:	4620      	mov	r0, r4
  406904:	f7ff fc4a 	bl	40619c <__sprint_r.part.0>
  406908:	2800      	cmp	r0, #0
  40690a:	f040 8139 	bne.w	406b80 <_vfiprintf_r+0x964>
  40690e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406910:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406912:	f101 0c01 	add.w	ip, r1, #1
  406916:	46ce      	mov	lr, r9
  406918:	e5ff      	b.n	40651a <_vfiprintf_r+0x2fe>
  40691a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40691c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40691e:	1c48      	adds	r0, r1, #1
  406920:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406924:	2d00      	cmp	r5, #0
  406926:	f43f ae22 	beq.w	40656e <_vfiprintf_r+0x352>
  40692a:	3201      	adds	r2, #1
  40692c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406930:	2101      	movs	r1, #1
  406932:	2807      	cmp	r0, #7
  406934:	9211      	str	r2, [sp, #68]	; 0x44
  406936:	9010      	str	r0, [sp, #64]	; 0x40
  406938:	f8ca 5000 	str.w	r5, [sl]
  40693c:	f8ca 1004 	str.w	r1, [sl, #4]
  406940:	f340 8108 	ble.w	406b54 <_vfiprintf_r+0x938>
  406944:	2a00      	cmp	r2, #0
  406946:	f040 81bc 	bne.w	406cc2 <_vfiprintf_r+0xaa6>
  40694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40694c:	2b00      	cmp	r3, #0
  40694e:	f43f ae1f 	beq.w	406590 <_vfiprintf_r+0x374>
  406952:	ab0e      	add	r3, sp, #56	; 0x38
  406954:	2202      	movs	r2, #2
  406956:	4608      	mov	r0, r1
  406958:	931c      	str	r3, [sp, #112]	; 0x70
  40695a:	921d      	str	r2, [sp, #116]	; 0x74
  40695c:	46ca      	mov	sl, r9
  40695e:	4601      	mov	r1, r0
  406960:	f10a 0a08 	add.w	sl, sl, #8
  406964:	3001      	adds	r0, #1
  406966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406968:	2b80      	cmp	r3, #128	; 0x80
  40696a:	f43f ae19 	beq.w	4065a0 <_vfiprintf_r+0x384>
  40696e:	9b05      	ldr	r3, [sp, #20]
  406970:	1ae4      	subs	r4, r4, r3
  406972:	2c00      	cmp	r4, #0
  406974:	dd2e      	ble.n	4069d4 <_vfiprintf_r+0x7b8>
  406976:	2c10      	cmp	r4, #16
  406978:	4db3      	ldr	r5, [pc, #716]	; (406c48 <_vfiprintf_r+0xa2c>)
  40697a:	dd1e      	ble.n	4069ba <_vfiprintf_r+0x79e>
  40697c:	46d6      	mov	lr, sl
  40697e:	2610      	movs	r6, #16
  406980:	9f06      	ldr	r7, [sp, #24]
  406982:	f8dd a010 	ldr.w	sl, [sp, #16]
  406986:	e006      	b.n	406996 <_vfiprintf_r+0x77a>
  406988:	1c88      	adds	r0, r1, #2
  40698a:	f10e 0e08 	add.w	lr, lr, #8
  40698e:	4619      	mov	r1, r3
  406990:	3c10      	subs	r4, #16
  406992:	2c10      	cmp	r4, #16
  406994:	dd10      	ble.n	4069b8 <_vfiprintf_r+0x79c>
  406996:	1c4b      	adds	r3, r1, #1
  406998:	3210      	adds	r2, #16
  40699a:	2b07      	cmp	r3, #7
  40699c:	9211      	str	r2, [sp, #68]	; 0x44
  40699e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4069a2:	9310      	str	r3, [sp, #64]	; 0x40
  4069a4:	ddf0      	ble.n	406988 <_vfiprintf_r+0x76c>
  4069a6:	2a00      	cmp	r2, #0
  4069a8:	d165      	bne.n	406a76 <_vfiprintf_r+0x85a>
  4069aa:	3c10      	subs	r4, #16
  4069ac:	2c10      	cmp	r4, #16
  4069ae:	f04f 0001 	mov.w	r0, #1
  4069b2:	4611      	mov	r1, r2
  4069b4:	46ce      	mov	lr, r9
  4069b6:	dcee      	bgt.n	406996 <_vfiprintf_r+0x77a>
  4069b8:	46f2      	mov	sl, lr
  4069ba:	4422      	add	r2, r4
  4069bc:	2807      	cmp	r0, #7
  4069be:	9211      	str	r2, [sp, #68]	; 0x44
  4069c0:	f8ca 5000 	str.w	r5, [sl]
  4069c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4069c8:	9010      	str	r0, [sp, #64]	; 0x40
  4069ca:	f300 8085 	bgt.w	406ad8 <_vfiprintf_r+0x8bc>
  4069ce:	f10a 0a08 	add.w	sl, sl, #8
  4069d2:	3001      	adds	r0, #1
  4069d4:	9905      	ldr	r1, [sp, #20]
  4069d6:	f8ca b000 	str.w	fp, [sl]
  4069da:	440a      	add	r2, r1
  4069dc:	2807      	cmp	r0, #7
  4069de:	9211      	str	r2, [sp, #68]	; 0x44
  4069e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4069e4:	9010      	str	r0, [sp, #64]	; 0x40
  4069e6:	f340 8082 	ble.w	406aee <_vfiprintf_r+0x8d2>
  4069ea:	2a00      	cmp	r2, #0
  4069ec:	f040 8118 	bne.w	406c20 <_vfiprintf_r+0xa04>
  4069f0:	9b02      	ldr	r3, [sp, #8]
  4069f2:	9210      	str	r2, [sp, #64]	; 0x40
  4069f4:	0758      	lsls	r0, r3, #29
  4069f6:	d535      	bpl.n	406a64 <_vfiprintf_r+0x848>
  4069f8:	9b08      	ldr	r3, [sp, #32]
  4069fa:	9901      	ldr	r1, [sp, #4]
  4069fc:	1a5c      	subs	r4, r3, r1
  4069fe:	2c00      	cmp	r4, #0
  406a00:	f340 80e7 	ble.w	406bd2 <_vfiprintf_r+0x9b6>
  406a04:	46ca      	mov	sl, r9
  406a06:	2c10      	cmp	r4, #16
  406a08:	f340 8218 	ble.w	406e3c <_vfiprintf_r+0xc20>
  406a0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a0e:	4e8f      	ldr	r6, [pc, #572]	; (406c4c <_vfiprintf_r+0xa30>)
  406a10:	9f06      	ldr	r7, [sp, #24]
  406a12:	f8dd b010 	ldr.w	fp, [sp, #16]
  406a16:	2510      	movs	r5, #16
  406a18:	e006      	b.n	406a28 <_vfiprintf_r+0x80c>
  406a1a:	1c88      	adds	r0, r1, #2
  406a1c:	f10a 0a08 	add.w	sl, sl, #8
  406a20:	4619      	mov	r1, r3
  406a22:	3c10      	subs	r4, #16
  406a24:	2c10      	cmp	r4, #16
  406a26:	dd11      	ble.n	406a4c <_vfiprintf_r+0x830>
  406a28:	1c4b      	adds	r3, r1, #1
  406a2a:	3210      	adds	r2, #16
  406a2c:	2b07      	cmp	r3, #7
  406a2e:	9211      	str	r2, [sp, #68]	; 0x44
  406a30:	f8ca 6000 	str.w	r6, [sl]
  406a34:	f8ca 5004 	str.w	r5, [sl, #4]
  406a38:	9310      	str	r3, [sp, #64]	; 0x40
  406a3a:	ddee      	ble.n	406a1a <_vfiprintf_r+0x7fe>
  406a3c:	bb42      	cbnz	r2, 406a90 <_vfiprintf_r+0x874>
  406a3e:	3c10      	subs	r4, #16
  406a40:	2c10      	cmp	r4, #16
  406a42:	f04f 0001 	mov.w	r0, #1
  406a46:	4611      	mov	r1, r2
  406a48:	46ca      	mov	sl, r9
  406a4a:	dced      	bgt.n	406a28 <_vfiprintf_r+0x80c>
  406a4c:	4422      	add	r2, r4
  406a4e:	2807      	cmp	r0, #7
  406a50:	9211      	str	r2, [sp, #68]	; 0x44
  406a52:	f8ca 6000 	str.w	r6, [sl]
  406a56:	f8ca 4004 	str.w	r4, [sl, #4]
  406a5a:	9010      	str	r0, [sp, #64]	; 0x40
  406a5c:	dd51      	ble.n	406b02 <_vfiprintf_r+0x8e6>
  406a5e:	2a00      	cmp	r2, #0
  406a60:	f040 819b 	bne.w	406d9a <_vfiprintf_r+0xb7e>
  406a64:	9b03      	ldr	r3, [sp, #12]
  406a66:	9a08      	ldr	r2, [sp, #32]
  406a68:	9901      	ldr	r1, [sp, #4]
  406a6a:	428a      	cmp	r2, r1
  406a6c:	bfac      	ite	ge
  406a6e:	189b      	addge	r3, r3, r2
  406a70:	185b      	addlt	r3, r3, r1
  406a72:	9303      	str	r3, [sp, #12]
  406a74:	e04e      	b.n	406b14 <_vfiprintf_r+0x8f8>
  406a76:	aa0f      	add	r2, sp, #60	; 0x3c
  406a78:	4651      	mov	r1, sl
  406a7a:	4638      	mov	r0, r7
  406a7c:	f7ff fb8e 	bl	40619c <__sprint_r.part.0>
  406a80:	2800      	cmp	r0, #0
  406a82:	f040 813f 	bne.w	406d04 <_vfiprintf_r+0xae8>
  406a86:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a8a:	1c48      	adds	r0, r1, #1
  406a8c:	46ce      	mov	lr, r9
  406a8e:	e77f      	b.n	406990 <_vfiprintf_r+0x774>
  406a90:	aa0f      	add	r2, sp, #60	; 0x3c
  406a92:	4659      	mov	r1, fp
  406a94:	4638      	mov	r0, r7
  406a96:	f7ff fb81 	bl	40619c <__sprint_r.part.0>
  406a9a:	b960      	cbnz	r0, 406ab6 <_vfiprintf_r+0x89a>
  406a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406aa0:	1c48      	adds	r0, r1, #1
  406aa2:	46ca      	mov	sl, r9
  406aa4:	e7bd      	b.n	406a22 <_vfiprintf_r+0x806>
  406aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406aa8:	f8dd b010 	ldr.w	fp, [sp, #16]
  406aac:	2b00      	cmp	r3, #0
  406aae:	f040 81d4 	bne.w	406e5a <_vfiprintf_r+0xc3e>
  406ab2:	2300      	movs	r3, #0
  406ab4:	9310      	str	r3, [sp, #64]	; 0x40
  406ab6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406aba:	f013 0f01 	tst.w	r3, #1
  406abe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406ac2:	d102      	bne.n	406aca <_vfiprintf_r+0x8ae>
  406ac4:	059a      	lsls	r2, r3, #22
  406ac6:	f140 80de 	bpl.w	406c86 <_vfiprintf_r+0xa6a>
  406aca:	065b      	lsls	r3, r3, #25
  406acc:	f53f acb2 	bmi.w	406434 <_vfiprintf_r+0x218>
  406ad0:	9803      	ldr	r0, [sp, #12]
  406ad2:	b02d      	add	sp, #180	; 0xb4
  406ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ad8:	2a00      	cmp	r2, #0
  406ada:	f040 8106 	bne.w	406cea <_vfiprintf_r+0xace>
  406ade:	9a05      	ldr	r2, [sp, #20]
  406ae0:	921d      	str	r2, [sp, #116]	; 0x74
  406ae2:	2301      	movs	r3, #1
  406ae4:	9211      	str	r2, [sp, #68]	; 0x44
  406ae6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406aea:	9310      	str	r3, [sp, #64]	; 0x40
  406aec:	46ca      	mov	sl, r9
  406aee:	f10a 0a08 	add.w	sl, sl, #8
  406af2:	9b02      	ldr	r3, [sp, #8]
  406af4:	0759      	lsls	r1, r3, #29
  406af6:	d504      	bpl.n	406b02 <_vfiprintf_r+0x8e6>
  406af8:	9b08      	ldr	r3, [sp, #32]
  406afa:	9901      	ldr	r1, [sp, #4]
  406afc:	1a5c      	subs	r4, r3, r1
  406afe:	2c00      	cmp	r4, #0
  406b00:	dc81      	bgt.n	406a06 <_vfiprintf_r+0x7ea>
  406b02:	9b03      	ldr	r3, [sp, #12]
  406b04:	9908      	ldr	r1, [sp, #32]
  406b06:	9801      	ldr	r0, [sp, #4]
  406b08:	4281      	cmp	r1, r0
  406b0a:	bfac      	ite	ge
  406b0c:	185b      	addge	r3, r3, r1
  406b0e:	181b      	addlt	r3, r3, r0
  406b10:	9303      	str	r3, [sp, #12]
  406b12:	bb72      	cbnz	r2, 406b72 <_vfiprintf_r+0x956>
  406b14:	2300      	movs	r3, #0
  406b16:	9310      	str	r3, [sp, #64]	; 0x40
  406b18:	46ca      	mov	sl, r9
  406b1a:	f7ff bbbc 	b.w	406296 <_vfiprintf_r+0x7a>
  406b1e:	aa0f      	add	r2, sp, #60	; 0x3c
  406b20:	9904      	ldr	r1, [sp, #16]
  406b22:	4620      	mov	r0, r4
  406b24:	f7ff fb3a 	bl	40619c <__sprint_r.part.0>
  406b28:	bb50      	cbnz	r0, 406b80 <_vfiprintf_r+0x964>
  406b2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406b2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b2e:	f101 0e01 	add.w	lr, r1, #1
  406b32:	46cc      	mov	ip, r9
  406b34:	e548      	b.n	4065c8 <_vfiprintf_r+0x3ac>
  406b36:	2a00      	cmp	r2, #0
  406b38:	f040 8140 	bne.w	406dbc <_vfiprintf_r+0xba0>
  406b3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406b40:	2900      	cmp	r1, #0
  406b42:	f000 811b 	beq.w	406d7c <_vfiprintf_r+0xb60>
  406b46:	2201      	movs	r2, #1
  406b48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406b4c:	4610      	mov	r0, r2
  406b4e:	921d      	str	r2, [sp, #116]	; 0x74
  406b50:	911c      	str	r1, [sp, #112]	; 0x70
  406b52:	46ca      	mov	sl, r9
  406b54:	4601      	mov	r1, r0
  406b56:	f10a 0a08 	add.w	sl, sl, #8
  406b5a:	3001      	adds	r0, #1
  406b5c:	e507      	b.n	40656e <_vfiprintf_r+0x352>
  406b5e:	9b02      	ldr	r3, [sp, #8]
  406b60:	2a01      	cmp	r2, #1
  406b62:	f000 8098 	beq.w	406c96 <_vfiprintf_r+0xa7a>
  406b66:	2a02      	cmp	r2, #2
  406b68:	d10d      	bne.n	406b86 <_vfiprintf_r+0x96a>
  406b6a:	9302      	str	r3, [sp, #8]
  406b6c:	2600      	movs	r6, #0
  406b6e:	2700      	movs	r7, #0
  406b70:	e5b0      	b.n	4066d4 <_vfiprintf_r+0x4b8>
  406b72:	aa0f      	add	r2, sp, #60	; 0x3c
  406b74:	9904      	ldr	r1, [sp, #16]
  406b76:	9806      	ldr	r0, [sp, #24]
  406b78:	f7ff fb10 	bl	40619c <__sprint_r.part.0>
  406b7c:	2800      	cmp	r0, #0
  406b7e:	d0c9      	beq.n	406b14 <_vfiprintf_r+0x8f8>
  406b80:	f8dd b010 	ldr.w	fp, [sp, #16]
  406b84:	e797      	b.n	406ab6 <_vfiprintf_r+0x89a>
  406b86:	9302      	str	r3, [sp, #8]
  406b88:	2600      	movs	r6, #0
  406b8a:	2700      	movs	r7, #0
  406b8c:	4649      	mov	r1, r9
  406b8e:	e000      	b.n	406b92 <_vfiprintf_r+0x976>
  406b90:	4659      	mov	r1, fp
  406b92:	08f2      	lsrs	r2, r6, #3
  406b94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406b98:	08f8      	lsrs	r0, r7, #3
  406b9a:	f006 0307 	and.w	r3, r6, #7
  406b9e:	4607      	mov	r7, r0
  406ba0:	4616      	mov	r6, r2
  406ba2:	3330      	adds	r3, #48	; 0x30
  406ba4:	ea56 0207 	orrs.w	r2, r6, r7
  406ba8:	f801 3c01 	strb.w	r3, [r1, #-1]
  406bac:	f101 3bff 	add.w	fp, r1, #4294967295
  406bb0:	d1ee      	bne.n	406b90 <_vfiprintf_r+0x974>
  406bb2:	9a02      	ldr	r2, [sp, #8]
  406bb4:	07d6      	lsls	r6, r2, #31
  406bb6:	f57f ad9d 	bpl.w	4066f4 <_vfiprintf_r+0x4d8>
  406bba:	2b30      	cmp	r3, #48	; 0x30
  406bbc:	f43f ad9a 	beq.w	4066f4 <_vfiprintf_r+0x4d8>
  406bc0:	3902      	subs	r1, #2
  406bc2:	2330      	movs	r3, #48	; 0x30
  406bc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406bc8:	eba9 0301 	sub.w	r3, r9, r1
  406bcc:	9305      	str	r3, [sp, #20]
  406bce:	468b      	mov	fp, r1
  406bd0:	e476      	b.n	4064c0 <_vfiprintf_r+0x2a4>
  406bd2:	9b03      	ldr	r3, [sp, #12]
  406bd4:	9a08      	ldr	r2, [sp, #32]
  406bd6:	428a      	cmp	r2, r1
  406bd8:	bfac      	ite	ge
  406bda:	189b      	addge	r3, r3, r2
  406bdc:	185b      	addlt	r3, r3, r1
  406bde:	9303      	str	r3, [sp, #12]
  406be0:	e798      	b.n	406b14 <_vfiprintf_r+0x8f8>
  406be2:	2202      	movs	r2, #2
  406be4:	e44d      	b.n	406482 <_vfiprintf_r+0x266>
  406be6:	2f00      	cmp	r7, #0
  406be8:	bf08      	it	eq
  406bea:	2e0a      	cmpeq	r6, #10
  406bec:	d352      	bcc.n	406c94 <_vfiprintf_r+0xa78>
  406bee:	46cb      	mov	fp, r9
  406bf0:	4630      	mov	r0, r6
  406bf2:	4639      	mov	r1, r7
  406bf4:	220a      	movs	r2, #10
  406bf6:	2300      	movs	r3, #0
  406bf8:	f001 fe9c 	bl	408934 <__aeabi_uldivmod>
  406bfc:	3230      	adds	r2, #48	; 0x30
  406bfe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406c02:	4630      	mov	r0, r6
  406c04:	4639      	mov	r1, r7
  406c06:	2300      	movs	r3, #0
  406c08:	220a      	movs	r2, #10
  406c0a:	f001 fe93 	bl	408934 <__aeabi_uldivmod>
  406c0e:	4606      	mov	r6, r0
  406c10:	460f      	mov	r7, r1
  406c12:	ea56 0307 	orrs.w	r3, r6, r7
  406c16:	d1eb      	bne.n	406bf0 <_vfiprintf_r+0x9d4>
  406c18:	e56c      	b.n	4066f4 <_vfiprintf_r+0x4d8>
  406c1a:	9405      	str	r4, [sp, #20]
  406c1c:	46cb      	mov	fp, r9
  406c1e:	e44f      	b.n	4064c0 <_vfiprintf_r+0x2a4>
  406c20:	aa0f      	add	r2, sp, #60	; 0x3c
  406c22:	9904      	ldr	r1, [sp, #16]
  406c24:	9806      	ldr	r0, [sp, #24]
  406c26:	f7ff fab9 	bl	40619c <__sprint_r.part.0>
  406c2a:	2800      	cmp	r0, #0
  406c2c:	d1a8      	bne.n	406b80 <_vfiprintf_r+0x964>
  406c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c30:	46ca      	mov	sl, r9
  406c32:	e75e      	b.n	406af2 <_vfiprintf_r+0x8d6>
  406c34:	aa0f      	add	r2, sp, #60	; 0x3c
  406c36:	9904      	ldr	r1, [sp, #16]
  406c38:	9806      	ldr	r0, [sp, #24]
  406c3a:	f7ff faaf 	bl	40619c <__sprint_r.part.0>
  406c3e:	2800      	cmp	r0, #0
  406c40:	d19e      	bne.n	406b80 <_vfiprintf_r+0x964>
  406c42:	46ca      	mov	sl, r9
  406c44:	f7ff bbc0 	b.w	4063c8 <_vfiprintf_r+0x1ac>
  406c48:	00409b68 	.word	0x00409b68
  406c4c:	00409b58 	.word	0x00409b58
  406c50:	3104      	adds	r1, #4
  406c52:	6816      	ldr	r6, [r2, #0]
  406c54:	9107      	str	r1, [sp, #28]
  406c56:	2201      	movs	r2, #1
  406c58:	2700      	movs	r7, #0
  406c5a:	e412      	b.n	406482 <_vfiprintf_r+0x266>
  406c5c:	9807      	ldr	r0, [sp, #28]
  406c5e:	4601      	mov	r1, r0
  406c60:	3104      	adds	r1, #4
  406c62:	6806      	ldr	r6, [r0, #0]
  406c64:	9107      	str	r1, [sp, #28]
  406c66:	2700      	movs	r7, #0
  406c68:	e40b      	b.n	406482 <_vfiprintf_r+0x266>
  406c6a:	680e      	ldr	r6, [r1, #0]
  406c6c:	3104      	adds	r1, #4
  406c6e:	9107      	str	r1, [sp, #28]
  406c70:	2700      	movs	r7, #0
  406c72:	e591      	b.n	406798 <_vfiprintf_r+0x57c>
  406c74:	9907      	ldr	r1, [sp, #28]
  406c76:	680e      	ldr	r6, [r1, #0]
  406c78:	460a      	mov	r2, r1
  406c7a:	17f7      	asrs	r7, r6, #31
  406c7c:	3204      	adds	r2, #4
  406c7e:	9207      	str	r2, [sp, #28]
  406c80:	4630      	mov	r0, r6
  406c82:	4639      	mov	r1, r7
  406c84:	e50f      	b.n	4066a6 <_vfiprintf_r+0x48a>
  406c86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406c8a:	f000 fe7f 	bl	40798c <__retarget_lock_release_recursive>
  406c8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406c92:	e71a      	b.n	406aca <_vfiprintf_r+0x8ae>
  406c94:	9b02      	ldr	r3, [sp, #8]
  406c96:	9302      	str	r3, [sp, #8]
  406c98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406c9c:	3630      	adds	r6, #48	; 0x30
  406c9e:	2301      	movs	r3, #1
  406ca0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406ca4:	9305      	str	r3, [sp, #20]
  406ca6:	e40b      	b.n	4064c0 <_vfiprintf_r+0x2a4>
  406ca8:	aa0f      	add	r2, sp, #60	; 0x3c
  406caa:	9904      	ldr	r1, [sp, #16]
  406cac:	9806      	ldr	r0, [sp, #24]
  406cae:	f7ff fa75 	bl	40619c <__sprint_r.part.0>
  406cb2:	2800      	cmp	r0, #0
  406cb4:	f47f af64 	bne.w	406b80 <_vfiprintf_r+0x964>
  406cb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  406cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406cbc:	1c48      	adds	r0, r1, #1
  406cbe:	46ca      	mov	sl, r9
  406cc0:	e651      	b.n	406966 <_vfiprintf_r+0x74a>
  406cc2:	aa0f      	add	r2, sp, #60	; 0x3c
  406cc4:	9904      	ldr	r1, [sp, #16]
  406cc6:	9806      	ldr	r0, [sp, #24]
  406cc8:	f7ff fa68 	bl	40619c <__sprint_r.part.0>
  406ccc:	2800      	cmp	r0, #0
  406cce:	f47f af57 	bne.w	406b80 <_vfiprintf_r+0x964>
  406cd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  406cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406cd6:	1c48      	adds	r0, r1, #1
  406cd8:	46ca      	mov	sl, r9
  406cda:	e448      	b.n	40656e <_vfiprintf_r+0x352>
  406cdc:	2a00      	cmp	r2, #0
  406cde:	f040 8091 	bne.w	406e04 <_vfiprintf_r+0xbe8>
  406ce2:	2001      	movs	r0, #1
  406ce4:	4611      	mov	r1, r2
  406ce6:	46ca      	mov	sl, r9
  406ce8:	e641      	b.n	40696e <_vfiprintf_r+0x752>
  406cea:	aa0f      	add	r2, sp, #60	; 0x3c
  406cec:	9904      	ldr	r1, [sp, #16]
  406cee:	9806      	ldr	r0, [sp, #24]
  406cf0:	f7ff fa54 	bl	40619c <__sprint_r.part.0>
  406cf4:	2800      	cmp	r0, #0
  406cf6:	f47f af43 	bne.w	406b80 <_vfiprintf_r+0x964>
  406cfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  406cfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406cfe:	3001      	adds	r0, #1
  406d00:	46ca      	mov	sl, r9
  406d02:	e667      	b.n	4069d4 <_vfiprintf_r+0x7b8>
  406d04:	46d3      	mov	fp, sl
  406d06:	e6d6      	b.n	406ab6 <_vfiprintf_r+0x89a>
  406d08:	9e07      	ldr	r6, [sp, #28]
  406d0a:	3607      	adds	r6, #7
  406d0c:	f026 0207 	bic.w	r2, r6, #7
  406d10:	f102 0108 	add.w	r1, r2, #8
  406d14:	e9d2 6700 	ldrd	r6, r7, [r2]
  406d18:	9107      	str	r1, [sp, #28]
  406d1a:	2201      	movs	r2, #1
  406d1c:	f7ff bbb1 	b.w	406482 <_vfiprintf_r+0x266>
  406d20:	9e07      	ldr	r6, [sp, #28]
  406d22:	3607      	adds	r6, #7
  406d24:	f026 0607 	bic.w	r6, r6, #7
  406d28:	e9d6 0100 	ldrd	r0, r1, [r6]
  406d2c:	f106 0208 	add.w	r2, r6, #8
  406d30:	9207      	str	r2, [sp, #28]
  406d32:	4606      	mov	r6, r0
  406d34:	460f      	mov	r7, r1
  406d36:	e4b6      	b.n	4066a6 <_vfiprintf_r+0x48a>
  406d38:	9e07      	ldr	r6, [sp, #28]
  406d3a:	3607      	adds	r6, #7
  406d3c:	f026 0207 	bic.w	r2, r6, #7
  406d40:	f102 0108 	add.w	r1, r2, #8
  406d44:	e9d2 6700 	ldrd	r6, r7, [r2]
  406d48:	9107      	str	r1, [sp, #28]
  406d4a:	2200      	movs	r2, #0
  406d4c:	f7ff bb99 	b.w	406482 <_vfiprintf_r+0x266>
  406d50:	9e07      	ldr	r6, [sp, #28]
  406d52:	3607      	adds	r6, #7
  406d54:	f026 0107 	bic.w	r1, r6, #7
  406d58:	f101 0008 	add.w	r0, r1, #8
  406d5c:	9007      	str	r0, [sp, #28]
  406d5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  406d62:	e519      	b.n	406798 <_vfiprintf_r+0x57c>
  406d64:	46cb      	mov	fp, r9
  406d66:	f7ff bbab 	b.w	4064c0 <_vfiprintf_r+0x2a4>
  406d6a:	252d      	movs	r5, #45	; 0x2d
  406d6c:	4276      	negs	r6, r6
  406d6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406d72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406d76:	2201      	movs	r2, #1
  406d78:	f7ff bb88 	b.w	40648c <_vfiprintf_r+0x270>
  406d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d7e:	b9b3      	cbnz	r3, 406dae <_vfiprintf_r+0xb92>
  406d80:	4611      	mov	r1, r2
  406d82:	2001      	movs	r0, #1
  406d84:	46ca      	mov	sl, r9
  406d86:	e5f2      	b.n	40696e <_vfiprintf_r+0x752>
  406d88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406d8c:	f000 fdfe 	bl	40798c <__retarget_lock_release_recursive>
  406d90:	f04f 33ff 	mov.w	r3, #4294967295
  406d94:	9303      	str	r3, [sp, #12]
  406d96:	f7ff bb50 	b.w	40643a <_vfiprintf_r+0x21e>
  406d9a:	aa0f      	add	r2, sp, #60	; 0x3c
  406d9c:	9904      	ldr	r1, [sp, #16]
  406d9e:	9806      	ldr	r0, [sp, #24]
  406da0:	f7ff f9fc 	bl	40619c <__sprint_r.part.0>
  406da4:	2800      	cmp	r0, #0
  406da6:	f47f aeeb 	bne.w	406b80 <_vfiprintf_r+0x964>
  406daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406dac:	e6a9      	b.n	406b02 <_vfiprintf_r+0x8e6>
  406dae:	ab0e      	add	r3, sp, #56	; 0x38
  406db0:	2202      	movs	r2, #2
  406db2:	931c      	str	r3, [sp, #112]	; 0x70
  406db4:	921d      	str	r2, [sp, #116]	; 0x74
  406db6:	2001      	movs	r0, #1
  406db8:	46ca      	mov	sl, r9
  406dba:	e5d0      	b.n	40695e <_vfiprintf_r+0x742>
  406dbc:	aa0f      	add	r2, sp, #60	; 0x3c
  406dbe:	9904      	ldr	r1, [sp, #16]
  406dc0:	9806      	ldr	r0, [sp, #24]
  406dc2:	f7ff f9eb 	bl	40619c <__sprint_r.part.0>
  406dc6:	2800      	cmp	r0, #0
  406dc8:	f47f aeda 	bne.w	406b80 <_vfiprintf_r+0x964>
  406dcc:	9910      	ldr	r1, [sp, #64]	; 0x40
  406dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406dd0:	1c48      	adds	r0, r1, #1
  406dd2:	46ca      	mov	sl, r9
  406dd4:	e5a4      	b.n	406920 <_vfiprintf_r+0x704>
  406dd6:	9a07      	ldr	r2, [sp, #28]
  406dd8:	9903      	ldr	r1, [sp, #12]
  406dda:	6813      	ldr	r3, [r2, #0]
  406ddc:	17cd      	asrs	r5, r1, #31
  406dde:	4608      	mov	r0, r1
  406de0:	3204      	adds	r2, #4
  406de2:	4629      	mov	r1, r5
  406de4:	9207      	str	r2, [sp, #28]
  406de6:	e9c3 0100 	strd	r0, r1, [r3]
  406dea:	f7ff ba54 	b.w	406296 <_vfiprintf_r+0x7a>
  406dee:	4658      	mov	r0, fp
  406df0:	9607      	str	r6, [sp, #28]
  406df2:	9302      	str	r3, [sp, #8]
  406df4:	f7ff f964 	bl	4060c0 <strlen>
  406df8:	2400      	movs	r4, #0
  406dfa:	9005      	str	r0, [sp, #20]
  406dfc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406e00:	f7ff bb5e 	b.w	4064c0 <_vfiprintf_r+0x2a4>
  406e04:	aa0f      	add	r2, sp, #60	; 0x3c
  406e06:	9904      	ldr	r1, [sp, #16]
  406e08:	9806      	ldr	r0, [sp, #24]
  406e0a:	f7ff f9c7 	bl	40619c <__sprint_r.part.0>
  406e0e:	2800      	cmp	r0, #0
  406e10:	f47f aeb6 	bne.w	406b80 <_vfiprintf_r+0x964>
  406e14:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e18:	1c48      	adds	r0, r1, #1
  406e1a:	46ca      	mov	sl, r9
  406e1c:	e5a7      	b.n	40696e <_vfiprintf_r+0x752>
  406e1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e22:	4e20      	ldr	r6, [pc, #128]	; (406ea4 <_vfiprintf_r+0xc88>)
  406e24:	3101      	adds	r1, #1
  406e26:	f7ff bb90 	b.w	40654a <_vfiprintf_r+0x32e>
  406e2a:	2c06      	cmp	r4, #6
  406e2c:	bf28      	it	cs
  406e2e:	2406      	movcs	r4, #6
  406e30:	9405      	str	r4, [sp, #20]
  406e32:	9607      	str	r6, [sp, #28]
  406e34:	9401      	str	r4, [sp, #4]
  406e36:	f8df b070 	ldr.w	fp, [pc, #112]	; 406ea8 <_vfiprintf_r+0xc8c>
  406e3a:	e4d5      	b.n	4067e8 <_vfiprintf_r+0x5cc>
  406e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  406e3e:	4e19      	ldr	r6, [pc, #100]	; (406ea4 <_vfiprintf_r+0xc88>)
  406e40:	3001      	adds	r0, #1
  406e42:	e603      	b.n	406a4c <_vfiprintf_r+0x830>
  406e44:	9405      	str	r4, [sp, #20]
  406e46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406e4a:	9607      	str	r6, [sp, #28]
  406e4c:	9302      	str	r3, [sp, #8]
  406e4e:	4604      	mov	r4, r0
  406e50:	f7ff bb36 	b.w	4064c0 <_vfiprintf_r+0x2a4>
  406e54:	4686      	mov	lr, r0
  406e56:	f7ff bbce 	b.w	4065f6 <_vfiprintf_r+0x3da>
  406e5a:	9806      	ldr	r0, [sp, #24]
  406e5c:	aa0f      	add	r2, sp, #60	; 0x3c
  406e5e:	4659      	mov	r1, fp
  406e60:	f7ff f99c 	bl	40619c <__sprint_r.part.0>
  406e64:	2800      	cmp	r0, #0
  406e66:	f43f ae24 	beq.w	406ab2 <_vfiprintf_r+0x896>
  406e6a:	e624      	b.n	406ab6 <_vfiprintf_r+0x89a>
  406e6c:	9907      	ldr	r1, [sp, #28]
  406e6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  406e72:	680c      	ldr	r4, [r1, #0]
  406e74:	3104      	adds	r1, #4
  406e76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406e7a:	46b8      	mov	r8, r7
  406e7c:	9107      	str	r1, [sp, #28]
  406e7e:	f7ff ba3f 	b.w	406300 <_vfiprintf_r+0xe4>
  406e82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e86:	e43c      	b.n	406702 <_vfiprintf_r+0x4e6>
  406e88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e8c:	e521      	b.n	4068d2 <_vfiprintf_r+0x6b6>
  406e8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e92:	f7ff bbf4 	b.w	40667e <_vfiprintf_r+0x462>
  406e96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e9a:	e491      	b.n	4067c0 <_vfiprintf_r+0x5a4>
  406e9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406ea0:	e469      	b.n	406776 <_vfiprintf_r+0x55a>
  406ea2:	bf00      	nop
  406ea4:	00409b58 	.word	0x00409b58
  406ea8:	00409b50 	.word	0x00409b50

00406eac <__sbprintf>:
  406eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406eb0:	460c      	mov	r4, r1
  406eb2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406eb6:	8989      	ldrh	r1, [r1, #12]
  406eb8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406eba:	89e5      	ldrh	r5, [r4, #14]
  406ebc:	9619      	str	r6, [sp, #100]	; 0x64
  406ebe:	f021 0102 	bic.w	r1, r1, #2
  406ec2:	4606      	mov	r6, r0
  406ec4:	69e0      	ldr	r0, [r4, #28]
  406ec6:	f8ad 100c 	strh.w	r1, [sp, #12]
  406eca:	4617      	mov	r7, r2
  406ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406ed0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406ed2:	f8ad 500e 	strh.w	r5, [sp, #14]
  406ed6:	4698      	mov	r8, r3
  406ed8:	ad1a      	add	r5, sp, #104	; 0x68
  406eda:	2300      	movs	r3, #0
  406edc:	9007      	str	r0, [sp, #28]
  406ede:	a816      	add	r0, sp, #88	; 0x58
  406ee0:	9209      	str	r2, [sp, #36]	; 0x24
  406ee2:	9306      	str	r3, [sp, #24]
  406ee4:	9500      	str	r5, [sp, #0]
  406ee6:	9504      	str	r5, [sp, #16]
  406ee8:	9102      	str	r1, [sp, #8]
  406eea:	9105      	str	r1, [sp, #20]
  406eec:	f000 fd48 	bl	407980 <__retarget_lock_init_recursive>
  406ef0:	4643      	mov	r3, r8
  406ef2:	463a      	mov	r2, r7
  406ef4:	4669      	mov	r1, sp
  406ef6:	4630      	mov	r0, r6
  406ef8:	f7ff f990 	bl	40621c <_vfiprintf_r>
  406efc:	1e05      	subs	r5, r0, #0
  406efe:	db07      	blt.n	406f10 <__sbprintf+0x64>
  406f00:	4630      	mov	r0, r6
  406f02:	4669      	mov	r1, sp
  406f04:	f000 f928 	bl	407158 <_fflush_r>
  406f08:	2800      	cmp	r0, #0
  406f0a:	bf18      	it	ne
  406f0c:	f04f 35ff 	movne.w	r5, #4294967295
  406f10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406f14:	065b      	lsls	r3, r3, #25
  406f16:	d503      	bpl.n	406f20 <__sbprintf+0x74>
  406f18:	89a3      	ldrh	r3, [r4, #12]
  406f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f1e:	81a3      	strh	r3, [r4, #12]
  406f20:	9816      	ldr	r0, [sp, #88]	; 0x58
  406f22:	f000 fd2f 	bl	407984 <__retarget_lock_close_recursive>
  406f26:	4628      	mov	r0, r5
  406f28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406f30 <__swsetup_r>:
  406f30:	b538      	push	{r3, r4, r5, lr}
  406f32:	4b30      	ldr	r3, [pc, #192]	; (406ff4 <__swsetup_r+0xc4>)
  406f34:	681b      	ldr	r3, [r3, #0]
  406f36:	4605      	mov	r5, r0
  406f38:	460c      	mov	r4, r1
  406f3a:	b113      	cbz	r3, 406f42 <__swsetup_r+0x12>
  406f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406f3e:	2a00      	cmp	r2, #0
  406f40:	d038      	beq.n	406fb4 <__swsetup_r+0x84>
  406f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f46:	b293      	uxth	r3, r2
  406f48:	0718      	lsls	r0, r3, #28
  406f4a:	d50c      	bpl.n	406f66 <__swsetup_r+0x36>
  406f4c:	6920      	ldr	r0, [r4, #16]
  406f4e:	b1a8      	cbz	r0, 406f7c <__swsetup_r+0x4c>
  406f50:	f013 0201 	ands.w	r2, r3, #1
  406f54:	d01e      	beq.n	406f94 <__swsetup_r+0x64>
  406f56:	6963      	ldr	r3, [r4, #20]
  406f58:	2200      	movs	r2, #0
  406f5a:	425b      	negs	r3, r3
  406f5c:	61a3      	str	r3, [r4, #24]
  406f5e:	60a2      	str	r2, [r4, #8]
  406f60:	b1f0      	cbz	r0, 406fa0 <__swsetup_r+0x70>
  406f62:	2000      	movs	r0, #0
  406f64:	bd38      	pop	{r3, r4, r5, pc}
  406f66:	06d9      	lsls	r1, r3, #27
  406f68:	d53c      	bpl.n	406fe4 <__swsetup_r+0xb4>
  406f6a:	0758      	lsls	r0, r3, #29
  406f6c:	d426      	bmi.n	406fbc <__swsetup_r+0x8c>
  406f6e:	6920      	ldr	r0, [r4, #16]
  406f70:	f042 0308 	orr.w	r3, r2, #8
  406f74:	81a3      	strh	r3, [r4, #12]
  406f76:	b29b      	uxth	r3, r3
  406f78:	2800      	cmp	r0, #0
  406f7a:	d1e9      	bne.n	406f50 <__swsetup_r+0x20>
  406f7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406f80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406f84:	d0e4      	beq.n	406f50 <__swsetup_r+0x20>
  406f86:	4628      	mov	r0, r5
  406f88:	4621      	mov	r1, r4
  406f8a:	f000 fd2f 	bl	4079ec <__smakebuf_r>
  406f8e:	89a3      	ldrh	r3, [r4, #12]
  406f90:	6920      	ldr	r0, [r4, #16]
  406f92:	e7dd      	b.n	406f50 <__swsetup_r+0x20>
  406f94:	0799      	lsls	r1, r3, #30
  406f96:	bf58      	it	pl
  406f98:	6962      	ldrpl	r2, [r4, #20]
  406f9a:	60a2      	str	r2, [r4, #8]
  406f9c:	2800      	cmp	r0, #0
  406f9e:	d1e0      	bne.n	406f62 <__swsetup_r+0x32>
  406fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406fa4:	061a      	lsls	r2, r3, #24
  406fa6:	d5dd      	bpl.n	406f64 <__swsetup_r+0x34>
  406fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406fac:	81a3      	strh	r3, [r4, #12]
  406fae:	f04f 30ff 	mov.w	r0, #4294967295
  406fb2:	bd38      	pop	{r3, r4, r5, pc}
  406fb4:	4618      	mov	r0, r3
  406fb6:	f000 f927 	bl	407208 <__sinit>
  406fba:	e7c2      	b.n	406f42 <__swsetup_r+0x12>
  406fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406fbe:	b151      	cbz	r1, 406fd6 <__swsetup_r+0xa6>
  406fc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406fc4:	4299      	cmp	r1, r3
  406fc6:	d004      	beq.n	406fd2 <__swsetup_r+0xa2>
  406fc8:	4628      	mov	r0, r5
  406fca:	f000 fa43 	bl	407454 <_free_r>
  406fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406fd2:	2300      	movs	r3, #0
  406fd4:	6323      	str	r3, [r4, #48]	; 0x30
  406fd6:	2300      	movs	r3, #0
  406fd8:	6920      	ldr	r0, [r4, #16]
  406fda:	6063      	str	r3, [r4, #4]
  406fdc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406fe0:	6020      	str	r0, [r4, #0]
  406fe2:	e7c5      	b.n	406f70 <__swsetup_r+0x40>
  406fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406fe8:	2309      	movs	r3, #9
  406fea:	602b      	str	r3, [r5, #0]
  406fec:	f04f 30ff 	mov.w	r0, #4294967295
  406ff0:	81a2      	strh	r2, [r4, #12]
  406ff2:	bd38      	pop	{r3, r4, r5, pc}
  406ff4:	20400024 	.word	0x20400024

00406ff8 <register_fini>:
  406ff8:	4b02      	ldr	r3, [pc, #8]	; (407004 <register_fini+0xc>)
  406ffa:	b113      	cbz	r3, 407002 <register_fini+0xa>
  406ffc:	4802      	ldr	r0, [pc, #8]	; (407008 <register_fini+0x10>)
  406ffe:	f000 b805 	b.w	40700c <atexit>
  407002:	4770      	bx	lr
  407004:	00000000 	.word	0x00000000
  407008:	00407279 	.word	0x00407279

0040700c <atexit>:
  40700c:	2300      	movs	r3, #0
  40700e:	4601      	mov	r1, r0
  407010:	461a      	mov	r2, r3
  407012:	4618      	mov	r0, r3
  407014:	f001 bb66 	b.w	4086e4 <__register_exitproc>

00407018 <__sflush_r>:
  407018:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40701c:	b29a      	uxth	r2, r3
  40701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407022:	460d      	mov	r5, r1
  407024:	0711      	lsls	r1, r2, #28
  407026:	4680      	mov	r8, r0
  407028:	d43a      	bmi.n	4070a0 <__sflush_r+0x88>
  40702a:	686a      	ldr	r2, [r5, #4]
  40702c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407030:	2a00      	cmp	r2, #0
  407032:	81ab      	strh	r3, [r5, #12]
  407034:	dd6f      	ble.n	407116 <__sflush_r+0xfe>
  407036:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407038:	2c00      	cmp	r4, #0
  40703a:	d049      	beq.n	4070d0 <__sflush_r+0xb8>
  40703c:	2200      	movs	r2, #0
  40703e:	b29b      	uxth	r3, r3
  407040:	f8d8 6000 	ldr.w	r6, [r8]
  407044:	f8c8 2000 	str.w	r2, [r8]
  407048:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40704c:	d067      	beq.n	40711e <__sflush_r+0x106>
  40704e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407050:	075f      	lsls	r7, r3, #29
  407052:	d505      	bpl.n	407060 <__sflush_r+0x48>
  407054:	6869      	ldr	r1, [r5, #4]
  407056:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407058:	1a52      	subs	r2, r2, r1
  40705a:	b10b      	cbz	r3, 407060 <__sflush_r+0x48>
  40705c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40705e:	1ad2      	subs	r2, r2, r3
  407060:	2300      	movs	r3, #0
  407062:	69e9      	ldr	r1, [r5, #28]
  407064:	4640      	mov	r0, r8
  407066:	47a0      	blx	r4
  407068:	1c44      	adds	r4, r0, #1
  40706a:	d03c      	beq.n	4070e6 <__sflush_r+0xce>
  40706c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407070:	692a      	ldr	r2, [r5, #16]
  407072:	602a      	str	r2, [r5, #0]
  407074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407078:	2200      	movs	r2, #0
  40707a:	81ab      	strh	r3, [r5, #12]
  40707c:	04db      	lsls	r3, r3, #19
  40707e:	606a      	str	r2, [r5, #4]
  407080:	d447      	bmi.n	407112 <__sflush_r+0xfa>
  407082:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407084:	f8c8 6000 	str.w	r6, [r8]
  407088:	b311      	cbz	r1, 4070d0 <__sflush_r+0xb8>
  40708a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40708e:	4299      	cmp	r1, r3
  407090:	d002      	beq.n	407098 <__sflush_r+0x80>
  407092:	4640      	mov	r0, r8
  407094:	f000 f9de 	bl	407454 <_free_r>
  407098:	2000      	movs	r0, #0
  40709a:	6328      	str	r0, [r5, #48]	; 0x30
  40709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070a0:	692e      	ldr	r6, [r5, #16]
  4070a2:	b1ae      	cbz	r6, 4070d0 <__sflush_r+0xb8>
  4070a4:	682c      	ldr	r4, [r5, #0]
  4070a6:	602e      	str	r6, [r5, #0]
  4070a8:	0791      	lsls	r1, r2, #30
  4070aa:	bf0c      	ite	eq
  4070ac:	696b      	ldreq	r3, [r5, #20]
  4070ae:	2300      	movne	r3, #0
  4070b0:	1ba4      	subs	r4, r4, r6
  4070b2:	60ab      	str	r3, [r5, #8]
  4070b4:	e00a      	b.n	4070cc <__sflush_r+0xb4>
  4070b6:	4623      	mov	r3, r4
  4070b8:	4632      	mov	r2, r6
  4070ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4070bc:	69e9      	ldr	r1, [r5, #28]
  4070be:	4640      	mov	r0, r8
  4070c0:	47b8      	blx	r7
  4070c2:	2800      	cmp	r0, #0
  4070c4:	eba4 0400 	sub.w	r4, r4, r0
  4070c8:	4406      	add	r6, r0
  4070ca:	dd04      	ble.n	4070d6 <__sflush_r+0xbe>
  4070cc:	2c00      	cmp	r4, #0
  4070ce:	dcf2      	bgt.n	4070b6 <__sflush_r+0x9e>
  4070d0:	2000      	movs	r0, #0
  4070d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070d6:	89ab      	ldrh	r3, [r5, #12]
  4070d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070dc:	81ab      	strh	r3, [r5, #12]
  4070de:	f04f 30ff 	mov.w	r0, #4294967295
  4070e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070e6:	f8d8 4000 	ldr.w	r4, [r8]
  4070ea:	2c1d      	cmp	r4, #29
  4070ec:	d8f3      	bhi.n	4070d6 <__sflush_r+0xbe>
  4070ee:	4b19      	ldr	r3, [pc, #100]	; (407154 <__sflush_r+0x13c>)
  4070f0:	40e3      	lsrs	r3, r4
  4070f2:	43db      	mvns	r3, r3
  4070f4:	f013 0301 	ands.w	r3, r3, #1
  4070f8:	d1ed      	bne.n	4070d6 <__sflush_r+0xbe>
  4070fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4070fe:	606b      	str	r3, [r5, #4]
  407100:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407104:	6929      	ldr	r1, [r5, #16]
  407106:	81ab      	strh	r3, [r5, #12]
  407108:	04da      	lsls	r2, r3, #19
  40710a:	6029      	str	r1, [r5, #0]
  40710c:	d5b9      	bpl.n	407082 <__sflush_r+0x6a>
  40710e:	2c00      	cmp	r4, #0
  407110:	d1b7      	bne.n	407082 <__sflush_r+0x6a>
  407112:	6528      	str	r0, [r5, #80]	; 0x50
  407114:	e7b5      	b.n	407082 <__sflush_r+0x6a>
  407116:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407118:	2a00      	cmp	r2, #0
  40711a:	dc8c      	bgt.n	407036 <__sflush_r+0x1e>
  40711c:	e7d8      	b.n	4070d0 <__sflush_r+0xb8>
  40711e:	2301      	movs	r3, #1
  407120:	69e9      	ldr	r1, [r5, #28]
  407122:	4640      	mov	r0, r8
  407124:	47a0      	blx	r4
  407126:	1c43      	adds	r3, r0, #1
  407128:	4602      	mov	r2, r0
  40712a:	d002      	beq.n	407132 <__sflush_r+0x11a>
  40712c:	89ab      	ldrh	r3, [r5, #12]
  40712e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407130:	e78e      	b.n	407050 <__sflush_r+0x38>
  407132:	f8d8 3000 	ldr.w	r3, [r8]
  407136:	2b00      	cmp	r3, #0
  407138:	d0f8      	beq.n	40712c <__sflush_r+0x114>
  40713a:	2b1d      	cmp	r3, #29
  40713c:	d001      	beq.n	407142 <__sflush_r+0x12a>
  40713e:	2b16      	cmp	r3, #22
  407140:	d102      	bne.n	407148 <__sflush_r+0x130>
  407142:	f8c8 6000 	str.w	r6, [r8]
  407146:	e7c3      	b.n	4070d0 <__sflush_r+0xb8>
  407148:	89ab      	ldrh	r3, [r5, #12]
  40714a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40714e:	81ab      	strh	r3, [r5, #12]
  407150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407154:	20400001 	.word	0x20400001

00407158 <_fflush_r>:
  407158:	b538      	push	{r3, r4, r5, lr}
  40715a:	460d      	mov	r5, r1
  40715c:	4604      	mov	r4, r0
  40715e:	b108      	cbz	r0, 407164 <_fflush_r+0xc>
  407160:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407162:	b1bb      	cbz	r3, 407194 <_fflush_r+0x3c>
  407164:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407168:	b188      	cbz	r0, 40718e <_fflush_r+0x36>
  40716a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40716c:	07db      	lsls	r3, r3, #31
  40716e:	d401      	bmi.n	407174 <_fflush_r+0x1c>
  407170:	0581      	lsls	r1, r0, #22
  407172:	d517      	bpl.n	4071a4 <_fflush_r+0x4c>
  407174:	4620      	mov	r0, r4
  407176:	4629      	mov	r1, r5
  407178:	f7ff ff4e 	bl	407018 <__sflush_r>
  40717c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40717e:	07da      	lsls	r2, r3, #31
  407180:	4604      	mov	r4, r0
  407182:	d402      	bmi.n	40718a <_fflush_r+0x32>
  407184:	89ab      	ldrh	r3, [r5, #12]
  407186:	059b      	lsls	r3, r3, #22
  407188:	d507      	bpl.n	40719a <_fflush_r+0x42>
  40718a:	4620      	mov	r0, r4
  40718c:	bd38      	pop	{r3, r4, r5, pc}
  40718e:	4604      	mov	r4, r0
  407190:	4620      	mov	r0, r4
  407192:	bd38      	pop	{r3, r4, r5, pc}
  407194:	f000 f838 	bl	407208 <__sinit>
  407198:	e7e4      	b.n	407164 <_fflush_r+0xc>
  40719a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40719c:	f000 fbf6 	bl	40798c <__retarget_lock_release_recursive>
  4071a0:	4620      	mov	r0, r4
  4071a2:	bd38      	pop	{r3, r4, r5, pc}
  4071a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4071a6:	f000 fbef 	bl	407988 <__retarget_lock_acquire_recursive>
  4071aa:	e7e3      	b.n	407174 <_fflush_r+0x1c>

004071ac <_cleanup_r>:
  4071ac:	4901      	ldr	r1, [pc, #4]	; (4071b4 <_cleanup_r+0x8>)
  4071ae:	f000 bbaf 	b.w	407910 <_fwalk_reent>
  4071b2:	bf00      	nop
  4071b4:	004087cd 	.word	0x004087cd

004071b8 <std.isra.0>:
  4071b8:	b510      	push	{r4, lr}
  4071ba:	2300      	movs	r3, #0
  4071bc:	4604      	mov	r4, r0
  4071be:	8181      	strh	r1, [r0, #12]
  4071c0:	81c2      	strh	r2, [r0, #14]
  4071c2:	6003      	str	r3, [r0, #0]
  4071c4:	6043      	str	r3, [r0, #4]
  4071c6:	6083      	str	r3, [r0, #8]
  4071c8:	6643      	str	r3, [r0, #100]	; 0x64
  4071ca:	6103      	str	r3, [r0, #16]
  4071cc:	6143      	str	r3, [r0, #20]
  4071ce:	6183      	str	r3, [r0, #24]
  4071d0:	4619      	mov	r1, r3
  4071d2:	2208      	movs	r2, #8
  4071d4:	305c      	adds	r0, #92	; 0x5c
  4071d6:	f7fe fe37 	bl	405e48 <memset>
  4071da:	4807      	ldr	r0, [pc, #28]	; (4071f8 <std.isra.0+0x40>)
  4071dc:	4907      	ldr	r1, [pc, #28]	; (4071fc <std.isra.0+0x44>)
  4071de:	4a08      	ldr	r2, [pc, #32]	; (407200 <std.isra.0+0x48>)
  4071e0:	4b08      	ldr	r3, [pc, #32]	; (407204 <std.isra.0+0x4c>)
  4071e2:	6220      	str	r0, [r4, #32]
  4071e4:	61e4      	str	r4, [r4, #28]
  4071e6:	6261      	str	r1, [r4, #36]	; 0x24
  4071e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4071ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4071ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4071f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4071f4:	f000 bbc4 	b.w	407980 <__retarget_lock_init_recursive>
  4071f8:	00408511 	.word	0x00408511
  4071fc:	00408535 	.word	0x00408535
  407200:	00408571 	.word	0x00408571
  407204:	00408591 	.word	0x00408591

00407208 <__sinit>:
  407208:	b510      	push	{r4, lr}
  40720a:	4604      	mov	r4, r0
  40720c:	4812      	ldr	r0, [pc, #72]	; (407258 <__sinit+0x50>)
  40720e:	f000 fbbb 	bl	407988 <__retarget_lock_acquire_recursive>
  407212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407214:	b9d2      	cbnz	r2, 40724c <__sinit+0x44>
  407216:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40721a:	4810      	ldr	r0, [pc, #64]	; (40725c <__sinit+0x54>)
  40721c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407220:	2103      	movs	r1, #3
  407222:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407226:	63e0      	str	r0, [r4, #60]	; 0x3c
  407228:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40722c:	6860      	ldr	r0, [r4, #4]
  40722e:	2104      	movs	r1, #4
  407230:	f7ff ffc2 	bl	4071b8 <std.isra.0>
  407234:	2201      	movs	r2, #1
  407236:	2109      	movs	r1, #9
  407238:	68a0      	ldr	r0, [r4, #8]
  40723a:	f7ff ffbd 	bl	4071b8 <std.isra.0>
  40723e:	2202      	movs	r2, #2
  407240:	2112      	movs	r1, #18
  407242:	68e0      	ldr	r0, [r4, #12]
  407244:	f7ff ffb8 	bl	4071b8 <std.isra.0>
  407248:	2301      	movs	r3, #1
  40724a:	63a3      	str	r3, [r4, #56]	; 0x38
  40724c:	4802      	ldr	r0, [pc, #8]	; (407258 <__sinit+0x50>)
  40724e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407252:	f000 bb9b 	b.w	40798c <__retarget_lock_release_recursive>
  407256:	bf00      	nop
  407258:	2040cab0 	.word	0x2040cab0
  40725c:	004071ad 	.word	0x004071ad

00407260 <__sfp_lock_acquire>:
  407260:	4801      	ldr	r0, [pc, #4]	; (407268 <__sfp_lock_acquire+0x8>)
  407262:	f000 bb91 	b.w	407988 <__retarget_lock_acquire_recursive>
  407266:	bf00      	nop
  407268:	2040cac4 	.word	0x2040cac4

0040726c <__sfp_lock_release>:
  40726c:	4801      	ldr	r0, [pc, #4]	; (407274 <__sfp_lock_release+0x8>)
  40726e:	f000 bb8d 	b.w	40798c <__retarget_lock_release_recursive>
  407272:	bf00      	nop
  407274:	2040cac4 	.word	0x2040cac4

00407278 <__libc_fini_array>:
  407278:	b538      	push	{r3, r4, r5, lr}
  40727a:	4c0a      	ldr	r4, [pc, #40]	; (4072a4 <__libc_fini_array+0x2c>)
  40727c:	4d0a      	ldr	r5, [pc, #40]	; (4072a8 <__libc_fini_array+0x30>)
  40727e:	1b64      	subs	r4, r4, r5
  407280:	10a4      	asrs	r4, r4, #2
  407282:	d00a      	beq.n	40729a <__libc_fini_array+0x22>
  407284:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407288:	3b01      	subs	r3, #1
  40728a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40728e:	3c01      	subs	r4, #1
  407290:	f855 3904 	ldr.w	r3, [r5], #-4
  407294:	4798      	blx	r3
  407296:	2c00      	cmp	r4, #0
  407298:	d1f9      	bne.n	40728e <__libc_fini_array+0x16>
  40729a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40729e:	f002 bcff 	b.w	409ca0 <_fini>
  4072a2:	bf00      	nop
  4072a4:	00409cb0 	.word	0x00409cb0
  4072a8:	00409cac 	.word	0x00409cac

004072ac <__fputwc>:
  4072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4072b0:	b082      	sub	sp, #8
  4072b2:	4680      	mov	r8, r0
  4072b4:	4689      	mov	r9, r1
  4072b6:	4614      	mov	r4, r2
  4072b8:	f000 fb54 	bl	407964 <__locale_mb_cur_max>
  4072bc:	2801      	cmp	r0, #1
  4072be:	d036      	beq.n	40732e <__fputwc+0x82>
  4072c0:	464a      	mov	r2, r9
  4072c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4072c6:	a901      	add	r1, sp, #4
  4072c8:	4640      	mov	r0, r8
  4072ca:	f001 f9bd 	bl	408648 <_wcrtomb_r>
  4072ce:	1c42      	adds	r2, r0, #1
  4072d0:	4606      	mov	r6, r0
  4072d2:	d025      	beq.n	407320 <__fputwc+0x74>
  4072d4:	b3a8      	cbz	r0, 407342 <__fputwc+0x96>
  4072d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4072da:	2500      	movs	r5, #0
  4072dc:	f10d 0a04 	add.w	sl, sp, #4
  4072e0:	e009      	b.n	4072f6 <__fputwc+0x4a>
  4072e2:	6823      	ldr	r3, [r4, #0]
  4072e4:	1c5a      	adds	r2, r3, #1
  4072e6:	6022      	str	r2, [r4, #0]
  4072e8:	f883 e000 	strb.w	lr, [r3]
  4072ec:	3501      	adds	r5, #1
  4072ee:	42b5      	cmp	r5, r6
  4072f0:	d227      	bcs.n	407342 <__fputwc+0x96>
  4072f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4072f6:	68a3      	ldr	r3, [r4, #8]
  4072f8:	3b01      	subs	r3, #1
  4072fa:	2b00      	cmp	r3, #0
  4072fc:	60a3      	str	r3, [r4, #8]
  4072fe:	daf0      	bge.n	4072e2 <__fputwc+0x36>
  407300:	69a7      	ldr	r7, [r4, #24]
  407302:	42bb      	cmp	r3, r7
  407304:	4671      	mov	r1, lr
  407306:	4622      	mov	r2, r4
  407308:	4640      	mov	r0, r8
  40730a:	db02      	blt.n	407312 <__fputwc+0x66>
  40730c:	f1be 0f0a 	cmp.w	lr, #10
  407310:	d1e7      	bne.n	4072e2 <__fputwc+0x36>
  407312:	f001 f941 	bl	408598 <__swbuf_r>
  407316:	1c43      	adds	r3, r0, #1
  407318:	d1e8      	bne.n	4072ec <__fputwc+0x40>
  40731a:	b002      	add	sp, #8
  40731c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407320:	89a3      	ldrh	r3, [r4, #12]
  407322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407326:	81a3      	strh	r3, [r4, #12]
  407328:	b002      	add	sp, #8
  40732a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40732e:	f109 33ff 	add.w	r3, r9, #4294967295
  407332:	2bfe      	cmp	r3, #254	; 0xfe
  407334:	d8c4      	bhi.n	4072c0 <__fputwc+0x14>
  407336:	fa5f fe89 	uxtb.w	lr, r9
  40733a:	4606      	mov	r6, r0
  40733c:	f88d e004 	strb.w	lr, [sp, #4]
  407340:	e7cb      	b.n	4072da <__fputwc+0x2e>
  407342:	4648      	mov	r0, r9
  407344:	b002      	add	sp, #8
  407346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40734a:	bf00      	nop

0040734c <_fputwc_r>:
  40734c:	b530      	push	{r4, r5, lr}
  40734e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407350:	f013 0f01 	tst.w	r3, #1
  407354:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407358:	4614      	mov	r4, r2
  40735a:	b083      	sub	sp, #12
  40735c:	4605      	mov	r5, r0
  40735e:	b29a      	uxth	r2, r3
  407360:	d101      	bne.n	407366 <_fputwc_r+0x1a>
  407362:	0590      	lsls	r0, r2, #22
  407364:	d51c      	bpl.n	4073a0 <_fputwc_r+0x54>
  407366:	0490      	lsls	r0, r2, #18
  407368:	d406      	bmi.n	407378 <_fputwc_r+0x2c>
  40736a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40736c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407374:	81a3      	strh	r3, [r4, #12]
  407376:	6662      	str	r2, [r4, #100]	; 0x64
  407378:	4628      	mov	r0, r5
  40737a:	4622      	mov	r2, r4
  40737c:	f7ff ff96 	bl	4072ac <__fputwc>
  407380:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407382:	07da      	lsls	r2, r3, #31
  407384:	4605      	mov	r5, r0
  407386:	d402      	bmi.n	40738e <_fputwc_r+0x42>
  407388:	89a3      	ldrh	r3, [r4, #12]
  40738a:	059b      	lsls	r3, r3, #22
  40738c:	d502      	bpl.n	407394 <_fputwc_r+0x48>
  40738e:	4628      	mov	r0, r5
  407390:	b003      	add	sp, #12
  407392:	bd30      	pop	{r4, r5, pc}
  407394:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407396:	f000 faf9 	bl	40798c <__retarget_lock_release_recursive>
  40739a:	4628      	mov	r0, r5
  40739c:	b003      	add	sp, #12
  40739e:	bd30      	pop	{r4, r5, pc}
  4073a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4073a2:	9101      	str	r1, [sp, #4]
  4073a4:	f000 faf0 	bl	407988 <__retarget_lock_acquire_recursive>
  4073a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073ac:	9901      	ldr	r1, [sp, #4]
  4073ae:	b29a      	uxth	r2, r3
  4073b0:	e7d9      	b.n	407366 <_fputwc_r+0x1a>
  4073b2:	bf00      	nop

004073b4 <_malloc_trim_r>:
  4073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073b6:	4f24      	ldr	r7, [pc, #144]	; (407448 <_malloc_trim_r+0x94>)
  4073b8:	460c      	mov	r4, r1
  4073ba:	4606      	mov	r6, r0
  4073bc:	f000 fee4 	bl	408188 <__malloc_lock>
  4073c0:	68bb      	ldr	r3, [r7, #8]
  4073c2:	685d      	ldr	r5, [r3, #4]
  4073c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4073c8:	310f      	adds	r1, #15
  4073ca:	f025 0503 	bic.w	r5, r5, #3
  4073ce:	4429      	add	r1, r5
  4073d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4073d4:	f021 010f 	bic.w	r1, r1, #15
  4073d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4073dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4073e0:	db07      	blt.n	4073f2 <_malloc_trim_r+0x3e>
  4073e2:	2100      	movs	r1, #0
  4073e4:	4630      	mov	r0, r6
  4073e6:	f001 f881 	bl	4084ec <_sbrk_r>
  4073ea:	68bb      	ldr	r3, [r7, #8]
  4073ec:	442b      	add	r3, r5
  4073ee:	4298      	cmp	r0, r3
  4073f0:	d004      	beq.n	4073fc <_malloc_trim_r+0x48>
  4073f2:	4630      	mov	r0, r6
  4073f4:	f000 fece 	bl	408194 <__malloc_unlock>
  4073f8:	2000      	movs	r0, #0
  4073fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073fc:	4261      	negs	r1, r4
  4073fe:	4630      	mov	r0, r6
  407400:	f001 f874 	bl	4084ec <_sbrk_r>
  407404:	3001      	adds	r0, #1
  407406:	d00d      	beq.n	407424 <_malloc_trim_r+0x70>
  407408:	4b10      	ldr	r3, [pc, #64]	; (40744c <_malloc_trim_r+0x98>)
  40740a:	68ba      	ldr	r2, [r7, #8]
  40740c:	6819      	ldr	r1, [r3, #0]
  40740e:	1b2d      	subs	r5, r5, r4
  407410:	f045 0501 	orr.w	r5, r5, #1
  407414:	4630      	mov	r0, r6
  407416:	1b09      	subs	r1, r1, r4
  407418:	6055      	str	r5, [r2, #4]
  40741a:	6019      	str	r1, [r3, #0]
  40741c:	f000 feba 	bl	408194 <__malloc_unlock>
  407420:	2001      	movs	r0, #1
  407422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407424:	2100      	movs	r1, #0
  407426:	4630      	mov	r0, r6
  407428:	f001 f860 	bl	4084ec <_sbrk_r>
  40742c:	68ba      	ldr	r2, [r7, #8]
  40742e:	1a83      	subs	r3, r0, r2
  407430:	2b0f      	cmp	r3, #15
  407432:	ddde      	ble.n	4073f2 <_malloc_trim_r+0x3e>
  407434:	4c06      	ldr	r4, [pc, #24]	; (407450 <_malloc_trim_r+0x9c>)
  407436:	4905      	ldr	r1, [pc, #20]	; (40744c <_malloc_trim_r+0x98>)
  407438:	6824      	ldr	r4, [r4, #0]
  40743a:	f043 0301 	orr.w	r3, r3, #1
  40743e:	1b00      	subs	r0, r0, r4
  407440:	6053      	str	r3, [r2, #4]
  407442:	6008      	str	r0, [r1, #0]
  407444:	e7d5      	b.n	4073f2 <_malloc_trim_r+0x3e>
  407446:	bf00      	nop
  407448:	204005c0 	.word	0x204005c0
  40744c:	2040c964 	.word	0x2040c964
  407450:	204009c8 	.word	0x204009c8

00407454 <_free_r>:
  407454:	2900      	cmp	r1, #0
  407456:	d044      	beq.n	4074e2 <_free_r+0x8e>
  407458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40745c:	460d      	mov	r5, r1
  40745e:	4680      	mov	r8, r0
  407460:	f000 fe92 	bl	408188 <__malloc_lock>
  407464:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407468:	4969      	ldr	r1, [pc, #420]	; (407610 <_free_r+0x1bc>)
  40746a:	f027 0301 	bic.w	r3, r7, #1
  40746e:	f1a5 0408 	sub.w	r4, r5, #8
  407472:	18e2      	adds	r2, r4, r3
  407474:	688e      	ldr	r6, [r1, #8]
  407476:	6850      	ldr	r0, [r2, #4]
  407478:	42b2      	cmp	r2, r6
  40747a:	f020 0003 	bic.w	r0, r0, #3
  40747e:	d05e      	beq.n	40753e <_free_r+0xea>
  407480:	07fe      	lsls	r6, r7, #31
  407482:	6050      	str	r0, [r2, #4]
  407484:	d40b      	bmi.n	40749e <_free_r+0x4a>
  407486:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40748a:	1be4      	subs	r4, r4, r7
  40748c:	f101 0e08 	add.w	lr, r1, #8
  407490:	68a5      	ldr	r5, [r4, #8]
  407492:	4575      	cmp	r5, lr
  407494:	443b      	add	r3, r7
  407496:	d06d      	beq.n	407574 <_free_r+0x120>
  407498:	68e7      	ldr	r7, [r4, #12]
  40749a:	60ef      	str	r7, [r5, #12]
  40749c:	60bd      	str	r5, [r7, #8]
  40749e:	1815      	adds	r5, r2, r0
  4074a0:	686d      	ldr	r5, [r5, #4]
  4074a2:	07ed      	lsls	r5, r5, #31
  4074a4:	d53e      	bpl.n	407524 <_free_r+0xd0>
  4074a6:	f043 0201 	orr.w	r2, r3, #1
  4074aa:	6062      	str	r2, [r4, #4]
  4074ac:	50e3      	str	r3, [r4, r3]
  4074ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4074b2:	d217      	bcs.n	4074e4 <_free_r+0x90>
  4074b4:	08db      	lsrs	r3, r3, #3
  4074b6:	1c58      	adds	r0, r3, #1
  4074b8:	109a      	asrs	r2, r3, #2
  4074ba:	684d      	ldr	r5, [r1, #4]
  4074bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4074c0:	60a7      	str	r7, [r4, #8]
  4074c2:	2301      	movs	r3, #1
  4074c4:	4093      	lsls	r3, r2
  4074c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4074ca:	432b      	orrs	r3, r5
  4074cc:	3a08      	subs	r2, #8
  4074ce:	60e2      	str	r2, [r4, #12]
  4074d0:	604b      	str	r3, [r1, #4]
  4074d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4074d6:	60fc      	str	r4, [r7, #12]
  4074d8:	4640      	mov	r0, r8
  4074da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4074de:	f000 be59 	b.w	408194 <__malloc_unlock>
  4074e2:	4770      	bx	lr
  4074e4:	0a5a      	lsrs	r2, r3, #9
  4074e6:	2a04      	cmp	r2, #4
  4074e8:	d852      	bhi.n	407590 <_free_r+0x13c>
  4074ea:	099a      	lsrs	r2, r3, #6
  4074ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4074f0:	00ff      	lsls	r7, r7, #3
  4074f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4074f6:	19c8      	adds	r0, r1, r7
  4074f8:	59ca      	ldr	r2, [r1, r7]
  4074fa:	3808      	subs	r0, #8
  4074fc:	4290      	cmp	r0, r2
  4074fe:	d04f      	beq.n	4075a0 <_free_r+0x14c>
  407500:	6851      	ldr	r1, [r2, #4]
  407502:	f021 0103 	bic.w	r1, r1, #3
  407506:	428b      	cmp	r3, r1
  407508:	d232      	bcs.n	407570 <_free_r+0x11c>
  40750a:	6892      	ldr	r2, [r2, #8]
  40750c:	4290      	cmp	r0, r2
  40750e:	d1f7      	bne.n	407500 <_free_r+0xac>
  407510:	68c3      	ldr	r3, [r0, #12]
  407512:	60a0      	str	r0, [r4, #8]
  407514:	60e3      	str	r3, [r4, #12]
  407516:	609c      	str	r4, [r3, #8]
  407518:	60c4      	str	r4, [r0, #12]
  40751a:	4640      	mov	r0, r8
  40751c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407520:	f000 be38 	b.w	408194 <__malloc_unlock>
  407524:	6895      	ldr	r5, [r2, #8]
  407526:	4f3b      	ldr	r7, [pc, #236]	; (407614 <_free_r+0x1c0>)
  407528:	42bd      	cmp	r5, r7
  40752a:	4403      	add	r3, r0
  40752c:	d040      	beq.n	4075b0 <_free_r+0x15c>
  40752e:	68d0      	ldr	r0, [r2, #12]
  407530:	60e8      	str	r0, [r5, #12]
  407532:	f043 0201 	orr.w	r2, r3, #1
  407536:	6085      	str	r5, [r0, #8]
  407538:	6062      	str	r2, [r4, #4]
  40753a:	50e3      	str	r3, [r4, r3]
  40753c:	e7b7      	b.n	4074ae <_free_r+0x5a>
  40753e:	07ff      	lsls	r7, r7, #31
  407540:	4403      	add	r3, r0
  407542:	d407      	bmi.n	407554 <_free_r+0x100>
  407544:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407548:	1aa4      	subs	r4, r4, r2
  40754a:	4413      	add	r3, r2
  40754c:	68a0      	ldr	r0, [r4, #8]
  40754e:	68e2      	ldr	r2, [r4, #12]
  407550:	60c2      	str	r2, [r0, #12]
  407552:	6090      	str	r0, [r2, #8]
  407554:	4a30      	ldr	r2, [pc, #192]	; (407618 <_free_r+0x1c4>)
  407556:	6812      	ldr	r2, [r2, #0]
  407558:	f043 0001 	orr.w	r0, r3, #1
  40755c:	4293      	cmp	r3, r2
  40755e:	6060      	str	r0, [r4, #4]
  407560:	608c      	str	r4, [r1, #8]
  407562:	d3b9      	bcc.n	4074d8 <_free_r+0x84>
  407564:	4b2d      	ldr	r3, [pc, #180]	; (40761c <_free_r+0x1c8>)
  407566:	4640      	mov	r0, r8
  407568:	6819      	ldr	r1, [r3, #0]
  40756a:	f7ff ff23 	bl	4073b4 <_malloc_trim_r>
  40756e:	e7b3      	b.n	4074d8 <_free_r+0x84>
  407570:	4610      	mov	r0, r2
  407572:	e7cd      	b.n	407510 <_free_r+0xbc>
  407574:	1811      	adds	r1, r2, r0
  407576:	6849      	ldr	r1, [r1, #4]
  407578:	07c9      	lsls	r1, r1, #31
  40757a:	d444      	bmi.n	407606 <_free_r+0x1b2>
  40757c:	6891      	ldr	r1, [r2, #8]
  40757e:	68d2      	ldr	r2, [r2, #12]
  407580:	60ca      	str	r2, [r1, #12]
  407582:	4403      	add	r3, r0
  407584:	f043 0001 	orr.w	r0, r3, #1
  407588:	6091      	str	r1, [r2, #8]
  40758a:	6060      	str	r0, [r4, #4]
  40758c:	50e3      	str	r3, [r4, r3]
  40758e:	e7a3      	b.n	4074d8 <_free_r+0x84>
  407590:	2a14      	cmp	r2, #20
  407592:	d816      	bhi.n	4075c2 <_free_r+0x16e>
  407594:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407598:	00ff      	lsls	r7, r7, #3
  40759a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40759e:	e7aa      	b.n	4074f6 <_free_r+0xa2>
  4075a0:	10aa      	asrs	r2, r5, #2
  4075a2:	2301      	movs	r3, #1
  4075a4:	684d      	ldr	r5, [r1, #4]
  4075a6:	4093      	lsls	r3, r2
  4075a8:	432b      	orrs	r3, r5
  4075aa:	604b      	str	r3, [r1, #4]
  4075ac:	4603      	mov	r3, r0
  4075ae:	e7b0      	b.n	407512 <_free_r+0xbe>
  4075b0:	f043 0201 	orr.w	r2, r3, #1
  4075b4:	614c      	str	r4, [r1, #20]
  4075b6:	610c      	str	r4, [r1, #16]
  4075b8:	60e5      	str	r5, [r4, #12]
  4075ba:	60a5      	str	r5, [r4, #8]
  4075bc:	6062      	str	r2, [r4, #4]
  4075be:	50e3      	str	r3, [r4, r3]
  4075c0:	e78a      	b.n	4074d8 <_free_r+0x84>
  4075c2:	2a54      	cmp	r2, #84	; 0x54
  4075c4:	d806      	bhi.n	4075d4 <_free_r+0x180>
  4075c6:	0b1a      	lsrs	r2, r3, #12
  4075c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4075cc:	00ff      	lsls	r7, r7, #3
  4075ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4075d2:	e790      	b.n	4074f6 <_free_r+0xa2>
  4075d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4075d8:	d806      	bhi.n	4075e8 <_free_r+0x194>
  4075da:	0bda      	lsrs	r2, r3, #15
  4075dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4075e0:	00ff      	lsls	r7, r7, #3
  4075e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4075e6:	e786      	b.n	4074f6 <_free_r+0xa2>
  4075e8:	f240 5054 	movw	r0, #1364	; 0x554
  4075ec:	4282      	cmp	r2, r0
  4075ee:	d806      	bhi.n	4075fe <_free_r+0x1aa>
  4075f0:	0c9a      	lsrs	r2, r3, #18
  4075f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4075f6:	00ff      	lsls	r7, r7, #3
  4075f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4075fc:	e77b      	b.n	4074f6 <_free_r+0xa2>
  4075fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407602:	257e      	movs	r5, #126	; 0x7e
  407604:	e777      	b.n	4074f6 <_free_r+0xa2>
  407606:	f043 0101 	orr.w	r1, r3, #1
  40760a:	6061      	str	r1, [r4, #4]
  40760c:	6013      	str	r3, [r2, #0]
  40760e:	e763      	b.n	4074d8 <_free_r+0x84>
  407610:	204005c0 	.word	0x204005c0
  407614:	204005c8 	.word	0x204005c8
  407618:	204009cc 	.word	0x204009cc
  40761c:	2040c994 	.word	0x2040c994

00407620 <__sfvwrite_r>:
  407620:	6893      	ldr	r3, [r2, #8]
  407622:	2b00      	cmp	r3, #0
  407624:	d073      	beq.n	40770e <__sfvwrite_r+0xee>
  407626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40762a:	898b      	ldrh	r3, [r1, #12]
  40762c:	b083      	sub	sp, #12
  40762e:	460c      	mov	r4, r1
  407630:	0719      	lsls	r1, r3, #28
  407632:	9000      	str	r0, [sp, #0]
  407634:	4616      	mov	r6, r2
  407636:	d526      	bpl.n	407686 <__sfvwrite_r+0x66>
  407638:	6922      	ldr	r2, [r4, #16]
  40763a:	b322      	cbz	r2, 407686 <__sfvwrite_r+0x66>
  40763c:	f013 0002 	ands.w	r0, r3, #2
  407640:	6835      	ldr	r5, [r6, #0]
  407642:	d02c      	beq.n	40769e <__sfvwrite_r+0x7e>
  407644:	f04f 0900 	mov.w	r9, #0
  407648:	4fb0      	ldr	r7, [pc, #704]	; (40790c <__sfvwrite_r+0x2ec>)
  40764a:	46c8      	mov	r8, r9
  40764c:	46b2      	mov	sl, r6
  40764e:	45b8      	cmp	r8, r7
  407650:	4643      	mov	r3, r8
  407652:	464a      	mov	r2, r9
  407654:	bf28      	it	cs
  407656:	463b      	movcs	r3, r7
  407658:	9800      	ldr	r0, [sp, #0]
  40765a:	f1b8 0f00 	cmp.w	r8, #0
  40765e:	d050      	beq.n	407702 <__sfvwrite_r+0xe2>
  407660:	69e1      	ldr	r1, [r4, #28]
  407662:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407664:	47b0      	blx	r6
  407666:	2800      	cmp	r0, #0
  407668:	dd58      	ble.n	40771c <__sfvwrite_r+0xfc>
  40766a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40766e:	1a1b      	subs	r3, r3, r0
  407670:	4481      	add	r9, r0
  407672:	eba8 0800 	sub.w	r8, r8, r0
  407676:	f8ca 3008 	str.w	r3, [sl, #8]
  40767a:	2b00      	cmp	r3, #0
  40767c:	d1e7      	bne.n	40764e <__sfvwrite_r+0x2e>
  40767e:	2000      	movs	r0, #0
  407680:	b003      	add	sp, #12
  407682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407686:	4621      	mov	r1, r4
  407688:	9800      	ldr	r0, [sp, #0]
  40768a:	f7ff fc51 	bl	406f30 <__swsetup_r>
  40768e:	2800      	cmp	r0, #0
  407690:	f040 8133 	bne.w	4078fa <__sfvwrite_r+0x2da>
  407694:	89a3      	ldrh	r3, [r4, #12]
  407696:	6835      	ldr	r5, [r6, #0]
  407698:	f013 0002 	ands.w	r0, r3, #2
  40769c:	d1d2      	bne.n	407644 <__sfvwrite_r+0x24>
  40769e:	f013 0901 	ands.w	r9, r3, #1
  4076a2:	d145      	bne.n	407730 <__sfvwrite_r+0x110>
  4076a4:	464f      	mov	r7, r9
  4076a6:	9601      	str	r6, [sp, #4]
  4076a8:	b337      	cbz	r7, 4076f8 <__sfvwrite_r+0xd8>
  4076aa:	059a      	lsls	r2, r3, #22
  4076ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4076b0:	f140 8083 	bpl.w	4077ba <__sfvwrite_r+0x19a>
  4076b4:	4547      	cmp	r7, r8
  4076b6:	46c3      	mov	fp, r8
  4076b8:	f0c0 80ab 	bcc.w	407812 <__sfvwrite_r+0x1f2>
  4076bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4076c0:	f040 80ac 	bne.w	40781c <__sfvwrite_r+0x1fc>
  4076c4:	6820      	ldr	r0, [r4, #0]
  4076c6:	46ba      	mov	sl, r7
  4076c8:	465a      	mov	r2, fp
  4076ca:	4649      	mov	r1, r9
  4076cc:	f000 fcf8 	bl	4080c0 <memmove>
  4076d0:	68a2      	ldr	r2, [r4, #8]
  4076d2:	6823      	ldr	r3, [r4, #0]
  4076d4:	eba2 0208 	sub.w	r2, r2, r8
  4076d8:	445b      	add	r3, fp
  4076da:	60a2      	str	r2, [r4, #8]
  4076dc:	6023      	str	r3, [r4, #0]
  4076de:	9a01      	ldr	r2, [sp, #4]
  4076e0:	6893      	ldr	r3, [r2, #8]
  4076e2:	eba3 030a 	sub.w	r3, r3, sl
  4076e6:	44d1      	add	r9, sl
  4076e8:	eba7 070a 	sub.w	r7, r7, sl
  4076ec:	6093      	str	r3, [r2, #8]
  4076ee:	2b00      	cmp	r3, #0
  4076f0:	d0c5      	beq.n	40767e <__sfvwrite_r+0x5e>
  4076f2:	89a3      	ldrh	r3, [r4, #12]
  4076f4:	2f00      	cmp	r7, #0
  4076f6:	d1d8      	bne.n	4076aa <__sfvwrite_r+0x8a>
  4076f8:	f8d5 9000 	ldr.w	r9, [r5]
  4076fc:	686f      	ldr	r7, [r5, #4]
  4076fe:	3508      	adds	r5, #8
  407700:	e7d2      	b.n	4076a8 <__sfvwrite_r+0x88>
  407702:	f8d5 9000 	ldr.w	r9, [r5]
  407706:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40770a:	3508      	adds	r5, #8
  40770c:	e79f      	b.n	40764e <__sfvwrite_r+0x2e>
  40770e:	2000      	movs	r0, #0
  407710:	4770      	bx	lr
  407712:	4621      	mov	r1, r4
  407714:	9800      	ldr	r0, [sp, #0]
  407716:	f7ff fd1f 	bl	407158 <_fflush_r>
  40771a:	b370      	cbz	r0, 40777a <__sfvwrite_r+0x15a>
  40771c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407724:	f04f 30ff 	mov.w	r0, #4294967295
  407728:	81a3      	strh	r3, [r4, #12]
  40772a:	b003      	add	sp, #12
  40772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407730:	4681      	mov	r9, r0
  407732:	4633      	mov	r3, r6
  407734:	464e      	mov	r6, r9
  407736:	46a8      	mov	r8, r5
  407738:	469a      	mov	sl, r3
  40773a:	464d      	mov	r5, r9
  40773c:	b34e      	cbz	r6, 407792 <__sfvwrite_r+0x172>
  40773e:	b380      	cbz	r0, 4077a2 <__sfvwrite_r+0x182>
  407740:	6820      	ldr	r0, [r4, #0]
  407742:	6923      	ldr	r3, [r4, #16]
  407744:	6962      	ldr	r2, [r4, #20]
  407746:	45b1      	cmp	r9, r6
  407748:	46cb      	mov	fp, r9
  40774a:	bf28      	it	cs
  40774c:	46b3      	movcs	fp, r6
  40774e:	4298      	cmp	r0, r3
  407750:	465f      	mov	r7, fp
  407752:	d904      	bls.n	40775e <__sfvwrite_r+0x13e>
  407754:	68a3      	ldr	r3, [r4, #8]
  407756:	4413      	add	r3, r2
  407758:	459b      	cmp	fp, r3
  40775a:	f300 80a6 	bgt.w	4078aa <__sfvwrite_r+0x28a>
  40775e:	4593      	cmp	fp, r2
  407760:	db4b      	blt.n	4077fa <__sfvwrite_r+0x1da>
  407762:	4613      	mov	r3, r2
  407764:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407766:	69e1      	ldr	r1, [r4, #28]
  407768:	9800      	ldr	r0, [sp, #0]
  40776a:	462a      	mov	r2, r5
  40776c:	47b8      	blx	r7
  40776e:	1e07      	subs	r7, r0, #0
  407770:	ddd4      	ble.n	40771c <__sfvwrite_r+0xfc>
  407772:	ebb9 0907 	subs.w	r9, r9, r7
  407776:	d0cc      	beq.n	407712 <__sfvwrite_r+0xf2>
  407778:	2001      	movs	r0, #1
  40777a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40777e:	1bdb      	subs	r3, r3, r7
  407780:	443d      	add	r5, r7
  407782:	1bf6      	subs	r6, r6, r7
  407784:	f8ca 3008 	str.w	r3, [sl, #8]
  407788:	2b00      	cmp	r3, #0
  40778a:	f43f af78 	beq.w	40767e <__sfvwrite_r+0x5e>
  40778e:	2e00      	cmp	r6, #0
  407790:	d1d5      	bne.n	40773e <__sfvwrite_r+0x11e>
  407792:	f108 0308 	add.w	r3, r8, #8
  407796:	e913 0060 	ldmdb	r3, {r5, r6}
  40779a:	4698      	mov	r8, r3
  40779c:	3308      	adds	r3, #8
  40779e:	2e00      	cmp	r6, #0
  4077a0:	d0f9      	beq.n	407796 <__sfvwrite_r+0x176>
  4077a2:	4632      	mov	r2, r6
  4077a4:	210a      	movs	r1, #10
  4077a6:	4628      	mov	r0, r5
  4077a8:	f000 fc3a 	bl	408020 <memchr>
  4077ac:	2800      	cmp	r0, #0
  4077ae:	f000 80a1 	beq.w	4078f4 <__sfvwrite_r+0x2d4>
  4077b2:	3001      	adds	r0, #1
  4077b4:	eba0 0905 	sub.w	r9, r0, r5
  4077b8:	e7c2      	b.n	407740 <__sfvwrite_r+0x120>
  4077ba:	6820      	ldr	r0, [r4, #0]
  4077bc:	6923      	ldr	r3, [r4, #16]
  4077be:	4298      	cmp	r0, r3
  4077c0:	d802      	bhi.n	4077c8 <__sfvwrite_r+0x1a8>
  4077c2:	6963      	ldr	r3, [r4, #20]
  4077c4:	429f      	cmp	r7, r3
  4077c6:	d25d      	bcs.n	407884 <__sfvwrite_r+0x264>
  4077c8:	45b8      	cmp	r8, r7
  4077ca:	bf28      	it	cs
  4077cc:	46b8      	movcs	r8, r7
  4077ce:	4642      	mov	r2, r8
  4077d0:	4649      	mov	r1, r9
  4077d2:	f000 fc75 	bl	4080c0 <memmove>
  4077d6:	68a3      	ldr	r3, [r4, #8]
  4077d8:	6822      	ldr	r2, [r4, #0]
  4077da:	eba3 0308 	sub.w	r3, r3, r8
  4077de:	4442      	add	r2, r8
  4077e0:	60a3      	str	r3, [r4, #8]
  4077e2:	6022      	str	r2, [r4, #0]
  4077e4:	b10b      	cbz	r3, 4077ea <__sfvwrite_r+0x1ca>
  4077e6:	46c2      	mov	sl, r8
  4077e8:	e779      	b.n	4076de <__sfvwrite_r+0xbe>
  4077ea:	4621      	mov	r1, r4
  4077ec:	9800      	ldr	r0, [sp, #0]
  4077ee:	f7ff fcb3 	bl	407158 <_fflush_r>
  4077f2:	2800      	cmp	r0, #0
  4077f4:	d192      	bne.n	40771c <__sfvwrite_r+0xfc>
  4077f6:	46c2      	mov	sl, r8
  4077f8:	e771      	b.n	4076de <__sfvwrite_r+0xbe>
  4077fa:	465a      	mov	r2, fp
  4077fc:	4629      	mov	r1, r5
  4077fe:	f000 fc5f 	bl	4080c0 <memmove>
  407802:	68a2      	ldr	r2, [r4, #8]
  407804:	6823      	ldr	r3, [r4, #0]
  407806:	eba2 020b 	sub.w	r2, r2, fp
  40780a:	445b      	add	r3, fp
  40780c:	60a2      	str	r2, [r4, #8]
  40780e:	6023      	str	r3, [r4, #0]
  407810:	e7af      	b.n	407772 <__sfvwrite_r+0x152>
  407812:	6820      	ldr	r0, [r4, #0]
  407814:	46b8      	mov	r8, r7
  407816:	46ba      	mov	sl, r7
  407818:	46bb      	mov	fp, r7
  40781a:	e755      	b.n	4076c8 <__sfvwrite_r+0xa8>
  40781c:	6962      	ldr	r2, [r4, #20]
  40781e:	6820      	ldr	r0, [r4, #0]
  407820:	6921      	ldr	r1, [r4, #16]
  407822:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407826:	eba0 0a01 	sub.w	sl, r0, r1
  40782a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40782e:	f10a 0001 	add.w	r0, sl, #1
  407832:	ea4f 0868 	mov.w	r8, r8, asr #1
  407836:	4438      	add	r0, r7
  407838:	4540      	cmp	r0, r8
  40783a:	4642      	mov	r2, r8
  40783c:	bf84      	itt	hi
  40783e:	4680      	movhi	r8, r0
  407840:	4642      	movhi	r2, r8
  407842:	055b      	lsls	r3, r3, #21
  407844:	d544      	bpl.n	4078d0 <__sfvwrite_r+0x2b0>
  407846:	4611      	mov	r1, r2
  407848:	9800      	ldr	r0, [sp, #0]
  40784a:	f000 f921 	bl	407a90 <_malloc_r>
  40784e:	4683      	mov	fp, r0
  407850:	2800      	cmp	r0, #0
  407852:	d055      	beq.n	407900 <__sfvwrite_r+0x2e0>
  407854:	4652      	mov	r2, sl
  407856:	6921      	ldr	r1, [r4, #16]
  407858:	f7fe fa5c 	bl	405d14 <memcpy>
  40785c:	89a3      	ldrh	r3, [r4, #12]
  40785e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407866:	81a3      	strh	r3, [r4, #12]
  407868:	eb0b 000a 	add.w	r0, fp, sl
  40786c:	eba8 030a 	sub.w	r3, r8, sl
  407870:	f8c4 b010 	str.w	fp, [r4, #16]
  407874:	f8c4 8014 	str.w	r8, [r4, #20]
  407878:	6020      	str	r0, [r4, #0]
  40787a:	60a3      	str	r3, [r4, #8]
  40787c:	46b8      	mov	r8, r7
  40787e:	46ba      	mov	sl, r7
  407880:	46bb      	mov	fp, r7
  407882:	e721      	b.n	4076c8 <__sfvwrite_r+0xa8>
  407884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407888:	42b9      	cmp	r1, r7
  40788a:	bf28      	it	cs
  40788c:	4639      	movcs	r1, r7
  40788e:	464a      	mov	r2, r9
  407890:	fb91 f1f3 	sdiv	r1, r1, r3
  407894:	9800      	ldr	r0, [sp, #0]
  407896:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407898:	fb03 f301 	mul.w	r3, r3, r1
  40789c:	69e1      	ldr	r1, [r4, #28]
  40789e:	47b0      	blx	r6
  4078a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4078a4:	f73f af1b 	bgt.w	4076de <__sfvwrite_r+0xbe>
  4078a8:	e738      	b.n	40771c <__sfvwrite_r+0xfc>
  4078aa:	461a      	mov	r2, r3
  4078ac:	4629      	mov	r1, r5
  4078ae:	9301      	str	r3, [sp, #4]
  4078b0:	f000 fc06 	bl	4080c0 <memmove>
  4078b4:	6822      	ldr	r2, [r4, #0]
  4078b6:	9b01      	ldr	r3, [sp, #4]
  4078b8:	9800      	ldr	r0, [sp, #0]
  4078ba:	441a      	add	r2, r3
  4078bc:	6022      	str	r2, [r4, #0]
  4078be:	4621      	mov	r1, r4
  4078c0:	f7ff fc4a 	bl	407158 <_fflush_r>
  4078c4:	9b01      	ldr	r3, [sp, #4]
  4078c6:	2800      	cmp	r0, #0
  4078c8:	f47f af28 	bne.w	40771c <__sfvwrite_r+0xfc>
  4078cc:	461f      	mov	r7, r3
  4078ce:	e750      	b.n	407772 <__sfvwrite_r+0x152>
  4078d0:	9800      	ldr	r0, [sp, #0]
  4078d2:	f000 fc65 	bl	4081a0 <_realloc_r>
  4078d6:	4683      	mov	fp, r0
  4078d8:	2800      	cmp	r0, #0
  4078da:	d1c5      	bne.n	407868 <__sfvwrite_r+0x248>
  4078dc:	9d00      	ldr	r5, [sp, #0]
  4078de:	6921      	ldr	r1, [r4, #16]
  4078e0:	4628      	mov	r0, r5
  4078e2:	f7ff fdb7 	bl	407454 <_free_r>
  4078e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078ea:	220c      	movs	r2, #12
  4078ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4078f0:	602a      	str	r2, [r5, #0]
  4078f2:	e715      	b.n	407720 <__sfvwrite_r+0x100>
  4078f4:	f106 0901 	add.w	r9, r6, #1
  4078f8:	e722      	b.n	407740 <__sfvwrite_r+0x120>
  4078fa:	f04f 30ff 	mov.w	r0, #4294967295
  4078fe:	e6bf      	b.n	407680 <__sfvwrite_r+0x60>
  407900:	9a00      	ldr	r2, [sp, #0]
  407902:	230c      	movs	r3, #12
  407904:	6013      	str	r3, [r2, #0]
  407906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40790a:	e709      	b.n	407720 <__sfvwrite_r+0x100>
  40790c:	7ffffc00 	.word	0x7ffffc00

00407910 <_fwalk_reent>:
  407910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407914:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407918:	d01f      	beq.n	40795a <_fwalk_reent+0x4a>
  40791a:	4688      	mov	r8, r1
  40791c:	4606      	mov	r6, r0
  40791e:	f04f 0900 	mov.w	r9, #0
  407922:	687d      	ldr	r5, [r7, #4]
  407924:	68bc      	ldr	r4, [r7, #8]
  407926:	3d01      	subs	r5, #1
  407928:	d411      	bmi.n	40794e <_fwalk_reent+0x3e>
  40792a:	89a3      	ldrh	r3, [r4, #12]
  40792c:	2b01      	cmp	r3, #1
  40792e:	f105 35ff 	add.w	r5, r5, #4294967295
  407932:	d908      	bls.n	407946 <_fwalk_reent+0x36>
  407934:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407938:	3301      	adds	r3, #1
  40793a:	4621      	mov	r1, r4
  40793c:	4630      	mov	r0, r6
  40793e:	d002      	beq.n	407946 <_fwalk_reent+0x36>
  407940:	47c0      	blx	r8
  407942:	ea49 0900 	orr.w	r9, r9, r0
  407946:	1c6b      	adds	r3, r5, #1
  407948:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40794c:	d1ed      	bne.n	40792a <_fwalk_reent+0x1a>
  40794e:	683f      	ldr	r7, [r7, #0]
  407950:	2f00      	cmp	r7, #0
  407952:	d1e6      	bne.n	407922 <_fwalk_reent+0x12>
  407954:	4648      	mov	r0, r9
  407956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40795a:	46b9      	mov	r9, r7
  40795c:	4648      	mov	r0, r9
  40795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407962:	bf00      	nop

00407964 <__locale_mb_cur_max>:
  407964:	4b04      	ldr	r3, [pc, #16]	; (407978 <__locale_mb_cur_max+0x14>)
  407966:	4a05      	ldr	r2, [pc, #20]	; (40797c <__locale_mb_cur_max+0x18>)
  407968:	681b      	ldr	r3, [r3, #0]
  40796a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40796c:	2b00      	cmp	r3, #0
  40796e:	bf08      	it	eq
  407970:	4613      	moveq	r3, r2
  407972:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407976:	4770      	bx	lr
  407978:	20400024 	.word	0x20400024
  40797c:	20400454 	.word	0x20400454

00407980 <__retarget_lock_init_recursive>:
  407980:	4770      	bx	lr
  407982:	bf00      	nop

00407984 <__retarget_lock_close_recursive>:
  407984:	4770      	bx	lr
  407986:	bf00      	nop

00407988 <__retarget_lock_acquire_recursive>:
  407988:	4770      	bx	lr
  40798a:	bf00      	nop

0040798c <__retarget_lock_release_recursive>:
  40798c:	4770      	bx	lr
  40798e:	bf00      	nop

00407990 <__swhatbuf_r>:
  407990:	b570      	push	{r4, r5, r6, lr}
  407992:	460c      	mov	r4, r1
  407994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407998:	2900      	cmp	r1, #0
  40799a:	b090      	sub	sp, #64	; 0x40
  40799c:	4615      	mov	r5, r2
  40799e:	461e      	mov	r6, r3
  4079a0:	db14      	blt.n	4079cc <__swhatbuf_r+0x3c>
  4079a2:	aa01      	add	r2, sp, #4
  4079a4:	f000 ff74 	bl	408890 <_fstat_r>
  4079a8:	2800      	cmp	r0, #0
  4079aa:	db0f      	blt.n	4079cc <__swhatbuf_r+0x3c>
  4079ac:	9a02      	ldr	r2, [sp, #8]
  4079ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4079b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4079b6:	fab2 f282 	clz	r2, r2
  4079ba:	0952      	lsrs	r2, r2, #5
  4079bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4079c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4079c4:	6032      	str	r2, [r6, #0]
  4079c6:	602b      	str	r3, [r5, #0]
  4079c8:	b010      	add	sp, #64	; 0x40
  4079ca:	bd70      	pop	{r4, r5, r6, pc}
  4079cc:	89a2      	ldrh	r2, [r4, #12]
  4079ce:	2300      	movs	r3, #0
  4079d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4079d4:	6033      	str	r3, [r6, #0]
  4079d6:	d004      	beq.n	4079e2 <__swhatbuf_r+0x52>
  4079d8:	2240      	movs	r2, #64	; 0x40
  4079da:	4618      	mov	r0, r3
  4079dc:	602a      	str	r2, [r5, #0]
  4079de:	b010      	add	sp, #64	; 0x40
  4079e0:	bd70      	pop	{r4, r5, r6, pc}
  4079e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4079e6:	602b      	str	r3, [r5, #0]
  4079e8:	b010      	add	sp, #64	; 0x40
  4079ea:	bd70      	pop	{r4, r5, r6, pc}

004079ec <__smakebuf_r>:
  4079ec:	898a      	ldrh	r2, [r1, #12]
  4079ee:	0792      	lsls	r2, r2, #30
  4079f0:	460b      	mov	r3, r1
  4079f2:	d506      	bpl.n	407a02 <__smakebuf_r+0x16>
  4079f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4079f8:	2101      	movs	r1, #1
  4079fa:	601a      	str	r2, [r3, #0]
  4079fc:	611a      	str	r2, [r3, #16]
  4079fe:	6159      	str	r1, [r3, #20]
  407a00:	4770      	bx	lr
  407a02:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a04:	b083      	sub	sp, #12
  407a06:	ab01      	add	r3, sp, #4
  407a08:	466a      	mov	r2, sp
  407a0a:	460c      	mov	r4, r1
  407a0c:	4606      	mov	r6, r0
  407a0e:	f7ff ffbf 	bl	407990 <__swhatbuf_r>
  407a12:	9900      	ldr	r1, [sp, #0]
  407a14:	4605      	mov	r5, r0
  407a16:	4630      	mov	r0, r6
  407a18:	f000 f83a 	bl	407a90 <_malloc_r>
  407a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a20:	b1d8      	cbz	r0, 407a5a <__smakebuf_r+0x6e>
  407a22:	9a01      	ldr	r2, [sp, #4]
  407a24:	4f15      	ldr	r7, [pc, #84]	; (407a7c <__smakebuf_r+0x90>)
  407a26:	9900      	ldr	r1, [sp, #0]
  407a28:	63f7      	str	r7, [r6, #60]	; 0x3c
  407a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407a2e:	81a3      	strh	r3, [r4, #12]
  407a30:	6020      	str	r0, [r4, #0]
  407a32:	6120      	str	r0, [r4, #16]
  407a34:	6161      	str	r1, [r4, #20]
  407a36:	b91a      	cbnz	r2, 407a40 <__smakebuf_r+0x54>
  407a38:	432b      	orrs	r3, r5
  407a3a:	81a3      	strh	r3, [r4, #12]
  407a3c:	b003      	add	sp, #12
  407a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a40:	4630      	mov	r0, r6
  407a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407a46:	f000 ff37 	bl	4088b8 <_isatty_r>
  407a4a:	b1a0      	cbz	r0, 407a76 <__smakebuf_r+0x8a>
  407a4c:	89a3      	ldrh	r3, [r4, #12]
  407a4e:	f023 0303 	bic.w	r3, r3, #3
  407a52:	f043 0301 	orr.w	r3, r3, #1
  407a56:	b21b      	sxth	r3, r3
  407a58:	e7ee      	b.n	407a38 <__smakebuf_r+0x4c>
  407a5a:	059a      	lsls	r2, r3, #22
  407a5c:	d4ee      	bmi.n	407a3c <__smakebuf_r+0x50>
  407a5e:	f023 0303 	bic.w	r3, r3, #3
  407a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407a66:	f043 0302 	orr.w	r3, r3, #2
  407a6a:	2101      	movs	r1, #1
  407a6c:	81a3      	strh	r3, [r4, #12]
  407a6e:	6022      	str	r2, [r4, #0]
  407a70:	6122      	str	r2, [r4, #16]
  407a72:	6161      	str	r1, [r4, #20]
  407a74:	e7e2      	b.n	407a3c <__smakebuf_r+0x50>
  407a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a7a:	e7dd      	b.n	407a38 <__smakebuf_r+0x4c>
  407a7c:	004071ad 	.word	0x004071ad

00407a80 <malloc>:
  407a80:	4b02      	ldr	r3, [pc, #8]	; (407a8c <malloc+0xc>)
  407a82:	4601      	mov	r1, r0
  407a84:	6818      	ldr	r0, [r3, #0]
  407a86:	f000 b803 	b.w	407a90 <_malloc_r>
  407a8a:	bf00      	nop
  407a8c:	20400024 	.word	0x20400024

00407a90 <_malloc_r>:
  407a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a94:	f101 060b 	add.w	r6, r1, #11
  407a98:	2e16      	cmp	r6, #22
  407a9a:	b083      	sub	sp, #12
  407a9c:	4605      	mov	r5, r0
  407a9e:	f240 809e 	bls.w	407bde <_malloc_r+0x14e>
  407aa2:	f036 0607 	bics.w	r6, r6, #7
  407aa6:	f100 80bd 	bmi.w	407c24 <_malloc_r+0x194>
  407aaa:	42b1      	cmp	r1, r6
  407aac:	f200 80ba 	bhi.w	407c24 <_malloc_r+0x194>
  407ab0:	f000 fb6a 	bl	408188 <__malloc_lock>
  407ab4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  407ab8:	f0c0 8293 	bcc.w	407fe2 <_malloc_r+0x552>
  407abc:	0a73      	lsrs	r3, r6, #9
  407abe:	f000 80b8 	beq.w	407c32 <_malloc_r+0x1a2>
  407ac2:	2b04      	cmp	r3, #4
  407ac4:	f200 8179 	bhi.w	407dba <_malloc_r+0x32a>
  407ac8:	09b3      	lsrs	r3, r6, #6
  407aca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  407ace:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  407ad2:	00c3      	lsls	r3, r0, #3
  407ad4:	4fbf      	ldr	r7, [pc, #764]	; (407dd4 <_malloc_r+0x344>)
  407ad6:	443b      	add	r3, r7
  407ad8:	f1a3 0108 	sub.w	r1, r3, #8
  407adc:	685c      	ldr	r4, [r3, #4]
  407ade:	42a1      	cmp	r1, r4
  407ae0:	d106      	bne.n	407af0 <_malloc_r+0x60>
  407ae2:	e00c      	b.n	407afe <_malloc_r+0x6e>
  407ae4:	2a00      	cmp	r2, #0
  407ae6:	f280 80aa 	bge.w	407c3e <_malloc_r+0x1ae>
  407aea:	68e4      	ldr	r4, [r4, #12]
  407aec:	42a1      	cmp	r1, r4
  407aee:	d006      	beq.n	407afe <_malloc_r+0x6e>
  407af0:	6863      	ldr	r3, [r4, #4]
  407af2:	f023 0303 	bic.w	r3, r3, #3
  407af6:	1b9a      	subs	r2, r3, r6
  407af8:	2a0f      	cmp	r2, #15
  407afa:	ddf3      	ble.n	407ae4 <_malloc_r+0x54>
  407afc:	4670      	mov	r0, lr
  407afe:	693c      	ldr	r4, [r7, #16]
  407b00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 407de8 <_malloc_r+0x358>
  407b04:	4574      	cmp	r4, lr
  407b06:	f000 81ab 	beq.w	407e60 <_malloc_r+0x3d0>
  407b0a:	6863      	ldr	r3, [r4, #4]
  407b0c:	f023 0303 	bic.w	r3, r3, #3
  407b10:	1b9a      	subs	r2, r3, r6
  407b12:	2a0f      	cmp	r2, #15
  407b14:	f300 8190 	bgt.w	407e38 <_malloc_r+0x3a8>
  407b18:	2a00      	cmp	r2, #0
  407b1a:	f8c7 e014 	str.w	lr, [r7, #20]
  407b1e:	f8c7 e010 	str.w	lr, [r7, #16]
  407b22:	f280 809d 	bge.w	407c60 <_malloc_r+0x1d0>
  407b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407b2a:	f080 8161 	bcs.w	407df0 <_malloc_r+0x360>
  407b2e:	08db      	lsrs	r3, r3, #3
  407b30:	f103 0c01 	add.w	ip, r3, #1
  407b34:	1099      	asrs	r1, r3, #2
  407b36:	687a      	ldr	r2, [r7, #4]
  407b38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  407b3c:	f8c4 8008 	str.w	r8, [r4, #8]
  407b40:	2301      	movs	r3, #1
  407b42:	408b      	lsls	r3, r1
  407b44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  407b48:	4313      	orrs	r3, r2
  407b4a:	3908      	subs	r1, #8
  407b4c:	60e1      	str	r1, [r4, #12]
  407b4e:	607b      	str	r3, [r7, #4]
  407b50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  407b54:	f8c8 400c 	str.w	r4, [r8, #12]
  407b58:	1082      	asrs	r2, r0, #2
  407b5a:	2401      	movs	r4, #1
  407b5c:	4094      	lsls	r4, r2
  407b5e:	429c      	cmp	r4, r3
  407b60:	f200 808b 	bhi.w	407c7a <_malloc_r+0x1ea>
  407b64:	421c      	tst	r4, r3
  407b66:	d106      	bne.n	407b76 <_malloc_r+0xe6>
  407b68:	f020 0003 	bic.w	r0, r0, #3
  407b6c:	0064      	lsls	r4, r4, #1
  407b6e:	421c      	tst	r4, r3
  407b70:	f100 0004 	add.w	r0, r0, #4
  407b74:	d0fa      	beq.n	407b6c <_malloc_r+0xdc>
  407b76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  407b7a:	46cc      	mov	ip, r9
  407b7c:	4680      	mov	r8, r0
  407b7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407b82:	459c      	cmp	ip, r3
  407b84:	d107      	bne.n	407b96 <_malloc_r+0x106>
  407b86:	e16d      	b.n	407e64 <_malloc_r+0x3d4>
  407b88:	2a00      	cmp	r2, #0
  407b8a:	f280 817b 	bge.w	407e84 <_malloc_r+0x3f4>
  407b8e:	68db      	ldr	r3, [r3, #12]
  407b90:	459c      	cmp	ip, r3
  407b92:	f000 8167 	beq.w	407e64 <_malloc_r+0x3d4>
  407b96:	6859      	ldr	r1, [r3, #4]
  407b98:	f021 0103 	bic.w	r1, r1, #3
  407b9c:	1b8a      	subs	r2, r1, r6
  407b9e:	2a0f      	cmp	r2, #15
  407ba0:	ddf2      	ble.n	407b88 <_malloc_r+0xf8>
  407ba2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  407ba6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  407baa:	9300      	str	r3, [sp, #0]
  407bac:	199c      	adds	r4, r3, r6
  407bae:	4628      	mov	r0, r5
  407bb0:	f046 0601 	orr.w	r6, r6, #1
  407bb4:	f042 0501 	orr.w	r5, r2, #1
  407bb8:	605e      	str	r6, [r3, #4]
  407bba:	f8c8 c00c 	str.w	ip, [r8, #12]
  407bbe:	f8cc 8008 	str.w	r8, [ip, #8]
  407bc2:	617c      	str	r4, [r7, #20]
  407bc4:	613c      	str	r4, [r7, #16]
  407bc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  407bca:	f8c4 e008 	str.w	lr, [r4, #8]
  407bce:	6065      	str	r5, [r4, #4]
  407bd0:	505a      	str	r2, [r3, r1]
  407bd2:	f000 fadf 	bl	408194 <__malloc_unlock>
  407bd6:	9b00      	ldr	r3, [sp, #0]
  407bd8:	f103 0408 	add.w	r4, r3, #8
  407bdc:	e01e      	b.n	407c1c <_malloc_r+0x18c>
  407bde:	2910      	cmp	r1, #16
  407be0:	d820      	bhi.n	407c24 <_malloc_r+0x194>
  407be2:	f000 fad1 	bl	408188 <__malloc_lock>
  407be6:	2610      	movs	r6, #16
  407be8:	2318      	movs	r3, #24
  407bea:	2002      	movs	r0, #2
  407bec:	4f79      	ldr	r7, [pc, #484]	; (407dd4 <_malloc_r+0x344>)
  407bee:	443b      	add	r3, r7
  407bf0:	f1a3 0208 	sub.w	r2, r3, #8
  407bf4:	685c      	ldr	r4, [r3, #4]
  407bf6:	4294      	cmp	r4, r2
  407bf8:	f000 813d 	beq.w	407e76 <_malloc_r+0x3e6>
  407bfc:	6863      	ldr	r3, [r4, #4]
  407bfe:	68e1      	ldr	r1, [r4, #12]
  407c00:	68a6      	ldr	r6, [r4, #8]
  407c02:	f023 0303 	bic.w	r3, r3, #3
  407c06:	4423      	add	r3, r4
  407c08:	4628      	mov	r0, r5
  407c0a:	685a      	ldr	r2, [r3, #4]
  407c0c:	60f1      	str	r1, [r6, #12]
  407c0e:	f042 0201 	orr.w	r2, r2, #1
  407c12:	608e      	str	r6, [r1, #8]
  407c14:	605a      	str	r2, [r3, #4]
  407c16:	f000 fabd 	bl	408194 <__malloc_unlock>
  407c1a:	3408      	adds	r4, #8
  407c1c:	4620      	mov	r0, r4
  407c1e:	b003      	add	sp, #12
  407c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c24:	2400      	movs	r4, #0
  407c26:	230c      	movs	r3, #12
  407c28:	4620      	mov	r0, r4
  407c2a:	602b      	str	r3, [r5, #0]
  407c2c:	b003      	add	sp, #12
  407c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c32:	2040      	movs	r0, #64	; 0x40
  407c34:	f44f 7300 	mov.w	r3, #512	; 0x200
  407c38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  407c3c:	e74a      	b.n	407ad4 <_malloc_r+0x44>
  407c3e:	4423      	add	r3, r4
  407c40:	68e1      	ldr	r1, [r4, #12]
  407c42:	685a      	ldr	r2, [r3, #4]
  407c44:	68a6      	ldr	r6, [r4, #8]
  407c46:	f042 0201 	orr.w	r2, r2, #1
  407c4a:	60f1      	str	r1, [r6, #12]
  407c4c:	4628      	mov	r0, r5
  407c4e:	608e      	str	r6, [r1, #8]
  407c50:	605a      	str	r2, [r3, #4]
  407c52:	f000 fa9f 	bl	408194 <__malloc_unlock>
  407c56:	3408      	adds	r4, #8
  407c58:	4620      	mov	r0, r4
  407c5a:	b003      	add	sp, #12
  407c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c60:	4423      	add	r3, r4
  407c62:	4628      	mov	r0, r5
  407c64:	685a      	ldr	r2, [r3, #4]
  407c66:	f042 0201 	orr.w	r2, r2, #1
  407c6a:	605a      	str	r2, [r3, #4]
  407c6c:	f000 fa92 	bl	408194 <__malloc_unlock>
  407c70:	3408      	adds	r4, #8
  407c72:	4620      	mov	r0, r4
  407c74:	b003      	add	sp, #12
  407c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c7a:	68bc      	ldr	r4, [r7, #8]
  407c7c:	6863      	ldr	r3, [r4, #4]
  407c7e:	f023 0803 	bic.w	r8, r3, #3
  407c82:	45b0      	cmp	r8, r6
  407c84:	d304      	bcc.n	407c90 <_malloc_r+0x200>
  407c86:	eba8 0306 	sub.w	r3, r8, r6
  407c8a:	2b0f      	cmp	r3, #15
  407c8c:	f300 8085 	bgt.w	407d9a <_malloc_r+0x30a>
  407c90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407dec <_malloc_r+0x35c>
  407c94:	4b50      	ldr	r3, [pc, #320]	; (407dd8 <_malloc_r+0x348>)
  407c96:	f8d9 2000 	ldr.w	r2, [r9]
  407c9a:	681b      	ldr	r3, [r3, #0]
  407c9c:	3201      	adds	r2, #1
  407c9e:	4433      	add	r3, r6
  407ca0:	eb04 0a08 	add.w	sl, r4, r8
  407ca4:	f000 8155 	beq.w	407f52 <_malloc_r+0x4c2>
  407ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407cac:	330f      	adds	r3, #15
  407cae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  407cb2:	f02b 0b0f 	bic.w	fp, fp, #15
  407cb6:	4659      	mov	r1, fp
  407cb8:	4628      	mov	r0, r5
  407cba:	f000 fc17 	bl	4084ec <_sbrk_r>
  407cbe:	1c41      	adds	r1, r0, #1
  407cc0:	4602      	mov	r2, r0
  407cc2:	f000 80fc 	beq.w	407ebe <_malloc_r+0x42e>
  407cc6:	4582      	cmp	sl, r0
  407cc8:	f200 80f7 	bhi.w	407eba <_malloc_r+0x42a>
  407ccc:	4b43      	ldr	r3, [pc, #268]	; (407ddc <_malloc_r+0x34c>)
  407cce:	6819      	ldr	r1, [r3, #0]
  407cd0:	4459      	add	r1, fp
  407cd2:	6019      	str	r1, [r3, #0]
  407cd4:	f000 814d 	beq.w	407f72 <_malloc_r+0x4e2>
  407cd8:	f8d9 0000 	ldr.w	r0, [r9]
  407cdc:	3001      	adds	r0, #1
  407cde:	bf1b      	ittet	ne
  407ce0:	eba2 0a0a 	subne.w	sl, r2, sl
  407ce4:	4451      	addne	r1, sl
  407ce6:	f8c9 2000 	streq.w	r2, [r9]
  407cea:	6019      	strne	r1, [r3, #0]
  407cec:	f012 0107 	ands.w	r1, r2, #7
  407cf0:	f000 8115 	beq.w	407f1e <_malloc_r+0x48e>
  407cf4:	f1c1 0008 	rsb	r0, r1, #8
  407cf8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407cfc:	4402      	add	r2, r0
  407cfe:	3108      	adds	r1, #8
  407d00:	eb02 090b 	add.w	r9, r2, fp
  407d04:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407d08:	eba1 0909 	sub.w	r9, r1, r9
  407d0c:	4649      	mov	r1, r9
  407d0e:	4628      	mov	r0, r5
  407d10:	9301      	str	r3, [sp, #4]
  407d12:	9200      	str	r2, [sp, #0]
  407d14:	f000 fbea 	bl	4084ec <_sbrk_r>
  407d18:	1c43      	adds	r3, r0, #1
  407d1a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407d1e:	f000 8143 	beq.w	407fa8 <_malloc_r+0x518>
  407d22:	1a80      	subs	r0, r0, r2
  407d24:	4448      	add	r0, r9
  407d26:	f040 0001 	orr.w	r0, r0, #1
  407d2a:	6819      	ldr	r1, [r3, #0]
  407d2c:	60ba      	str	r2, [r7, #8]
  407d2e:	4449      	add	r1, r9
  407d30:	42bc      	cmp	r4, r7
  407d32:	6050      	str	r0, [r2, #4]
  407d34:	6019      	str	r1, [r3, #0]
  407d36:	d017      	beq.n	407d68 <_malloc_r+0x2d8>
  407d38:	f1b8 0f0f 	cmp.w	r8, #15
  407d3c:	f240 80fb 	bls.w	407f36 <_malloc_r+0x4a6>
  407d40:	6860      	ldr	r0, [r4, #4]
  407d42:	f1a8 020c 	sub.w	r2, r8, #12
  407d46:	f022 0207 	bic.w	r2, r2, #7
  407d4a:	eb04 0e02 	add.w	lr, r4, r2
  407d4e:	f000 0001 	and.w	r0, r0, #1
  407d52:	f04f 0c05 	mov.w	ip, #5
  407d56:	4310      	orrs	r0, r2
  407d58:	2a0f      	cmp	r2, #15
  407d5a:	6060      	str	r0, [r4, #4]
  407d5c:	f8ce c004 	str.w	ip, [lr, #4]
  407d60:	f8ce c008 	str.w	ip, [lr, #8]
  407d64:	f200 8117 	bhi.w	407f96 <_malloc_r+0x506>
  407d68:	4b1d      	ldr	r3, [pc, #116]	; (407de0 <_malloc_r+0x350>)
  407d6a:	68bc      	ldr	r4, [r7, #8]
  407d6c:	681a      	ldr	r2, [r3, #0]
  407d6e:	4291      	cmp	r1, r2
  407d70:	bf88      	it	hi
  407d72:	6019      	strhi	r1, [r3, #0]
  407d74:	4b1b      	ldr	r3, [pc, #108]	; (407de4 <_malloc_r+0x354>)
  407d76:	681a      	ldr	r2, [r3, #0]
  407d78:	4291      	cmp	r1, r2
  407d7a:	6862      	ldr	r2, [r4, #4]
  407d7c:	bf88      	it	hi
  407d7e:	6019      	strhi	r1, [r3, #0]
  407d80:	f022 0203 	bic.w	r2, r2, #3
  407d84:	4296      	cmp	r6, r2
  407d86:	eba2 0306 	sub.w	r3, r2, r6
  407d8a:	d801      	bhi.n	407d90 <_malloc_r+0x300>
  407d8c:	2b0f      	cmp	r3, #15
  407d8e:	dc04      	bgt.n	407d9a <_malloc_r+0x30a>
  407d90:	4628      	mov	r0, r5
  407d92:	f000 f9ff 	bl	408194 <__malloc_unlock>
  407d96:	2400      	movs	r4, #0
  407d98:	e740      	b.n	407c1c <_malloc_r+0x18c>
  407d9a:	19a2      	adds	r2, r4, r6
  407d9c:	f043 0301 	orr.w	r3, r3, #1
  407da0:	f046 0601 	orr.w	r6, r6, #1
  407da4:	6066      	str	r6, [r4, #4]
  407da6:	4628      	mov	r0, r5
  407da8:	60ba      	str	r2, [r7, #8]
  407daa:	6053      	str	r3, [r2, #4]
  407dac:	f000 f9f2 	bl	408194 <__malloc_unlock>
  407db0:	3408      	adds	r4, #8
  407db2:	4620      	mov	r0, r4
  407db4:	b003      	add	sp, #12
  407db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407dba:	2b14      	cmp	r3, #20
  407dbc:	d971      	bls.n	407ea2 <_malloc_r+0x412>
  407dbe:	2b54      	cmp	r3, #84	; 0x54
  407dc0:	f200 80a3 	bhi.w	407f0a <_malloc_r+0x47a>
  407dc4:	0b33      	lsrs	r3, r6, #12
  407dc6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  407dca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407dce:	00c3      	lsls	r3, r0, #3
  407dd0:	e680      	b.n	407ad4 <_malloc_r+0x44>
  407dd2:	bf00      	nop
  407dd4:	204005c0 	.word	0x204005c0
  407dd8:	2040c994 	.word	0x2040c994
  407ddc:	2040c964 	.word	0x2040c964
  407de0:	2040c98c 	.word	0x2040c98c
  407de4:	2040c990 	.word	0x2040c990
  407de8:	204005c8 	.word	0x204005c8
  407dec:	204009c8 	.word	0x204009c8
  407df0:	0a5a      	lsrs	r2, r3, #9
  407df2:	2a04      	cmp	r2, #4
  407df4:	d95b      	bls.n	407eae <_malloc_r+0x41e>
  407df6:	2a14      	cmp	r2, #20
  407df8:	f200 80ae 	bhi.w	407f58 <_malloc_r+0x4c8>
  407dfc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407e00:	00c9      	lsls	r1, r1, #3
  407e02:	325b      	adds	r2, #91	; 0x5b
  407e04:	eb07 0c01 	add.w	ip, r7, r1
  407e08:	5879      	ldr	r1, [r7, r1]
  407e0a:	f1ac 0c08 	sub.w	ip, ip, #8
  407e0e:	458c      	cmp	ip, r1
  407e10:	f000 8088 	beq.w	407f24 <_malloc_r+0x494>
  407e14:	684a      	ldr	r2, [r1, #4]
  407e16:	f022 0203 	bic.w	r2, r2, #3
  407e1a:	4293      	cmp	r3, r2
  407e1c:	d273      	bcs.n	407f06 <_malloc_r+0x476>
  407e1e:	6889      	ldr	r1, [r1, #8]
  407e20:	458c      	cmp	ip, r1
  407e22:	d1f7      	bne.n	407e14 <_malloc_r+0x384>
  407e24:	f8dc 200c 	ldr.w	r2, [ip, #12]
  407e28:	687b      	ldr	r3, [r7, #4]
  407e2a:	60e2      	str	r2, [r4, #12]
  407e2c:	f8c4 c008 	str.w	ip, [r4, #8]
  407e30:	6094      	str	r4, [r2, #8]
  407e32:	f8cc 400c 	str.w	r4, [ip, #12]
  407e36:	e68f      	b.n	407b58 <_malloc_r+0xc8>
  407e38:	19a1      	adds	r1, r4, r6
  407e3a:	f046 0c01 	orr.w	ip, r6, #1
  407e3e:	f042 0601 	orr.w	r6, r2, #1
  407e42:	f8c4 c004 	str.w	ip, [r4, #4]
  407e46:	4628      	mov	r0, r5
  407e48:	6179      	str	r1, [r7, #20]
  407e4a:	6139      	str	r1, [r7, #16]
  407e4c:	f8c1 e00c 	str.w	lr, [r1, #12]
  407e50:	f8c1 e008 	str.w	lr, [r1, #8]
  407e54:	604e      	str	r6, [r1, #4]
  407e56:	50e2      	str	r2, [r4, r3]
  407e58:	f000 f99c 	bl	408194 <__malloc_unlock>
  407e5c:	3408      	adds	r4, #8
  407e5e:	e6dd      	b.n	407c1c <_malloc_r+0x18c>
  407e60:	687b      	ldr	r3, [r7, #4]
  407e62:	e679      	b.n	407b58 <_malloc_r+0xc8>
  407e64:	f108 0801 	add.w	r8, r8, #1
  407e68:	f018 0f03 	tst.w	r8, #3
  407e6c:	f10c 0c08 	add.w	ip, ip, #8
  407e70:	f47f ae85 	bne.w	407b7e <_malloc_r+0xee>
  407e74:	e02d      	b.n	407ed2 <_malloc_r+0x442>
  407e76:	68dc      	ldr	r4, [r3, #12]
  407e78:	42a3      	cmp	r3, r4
  407e7a:	bf08      	it	eq
  407e7c:	3002      	addeq	r0, #2
  407e7e:	f43f ae3e 	beq.w	407afe <_malloc_r+0x6e>
  407e82:	e6bb      	b.n	407bfc <_malloc_r+0x16c>
  407e84:	4419      	add	r1, r3
  407e86:	461c      	mov	r4, r3
  407e88:	684a      	ldr	r2, [r1, #4]
  407e8a:	68db      	ldr	r3, [r3, #12]
  407e8c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407e90:	f042 0201 	orr.w	r2, r2, #1
  407e94:	604a      	str	r2, [r1, #4]
  407e96:	4628      	mov	r0, r5
  407e98:	60f3      	str	r3, [r6, #12]
  407e9a:	609e      	str	r6, [r3, #8]
  407e9c:	f000 f97a 	bl	408194 <__malloc_unlock>
  407ea0:	e6bc      	b.n	407c1c <_malloc_r+0x18c>
  407ea2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  407ea6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407eaa:	00c3      	lsls	r3, r0, #3
  407eac:	e612      	b.n	407ad4 <_malloc_r+0x44>
  407eae:	099a      	lsrs	r2, r3, #6
  407eb0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407eb4:	00c9      	lsls	r1, r1, #3
  407eb6:	3238      	adds	r2, #56	; 0x38
  407eb8:	e7a4      	b.n	407e04 <_malloc_r+0x374>
  407eba:	42bc      	cmp	r4, r7
  407ebc:	d054      	beq.n	407f68 <_malloc_r+0x4d8>
  407ebe:	68bc      	ldr	r4, [r7, #8]
  407ec0:	6862      	ldr	r2, [r4, #4]
  407ec2:	f022 0203 	bic.w	r2, r2, #3
  407ec6:	e75d      	b.n	407d84 <_malloc_r+0x2f4>
  407ec8:	f859 3908 	ldr.w	r3, [r9], #-8
  407ecc:	4599      	cmp	r9, r3
  407ece:	f040 8086 	bne.w	407fde <_malloc_r+0x54e>
  407ed2:	f010 0f03 	tst.w	r0, #3
  407ed6:	f100 30ff 	add.w	r0, r0, #4294967295
  407eda:	d1f5      	bne.n	407ec8 <_malloc_r+0x438>
  407edc:	687b      	ldr	r3, [r7, #4]
  407ede:	ea23 0304 	bic.w	r3, r3, r4
  407ee2:	607b      	str	r3, [r7, #4]
  407ee4:	0064      	lsls	r4, r4, #1
  407ee6:	429c      	cmp	r4, r3
  407ee8:	f63f aec7 	bhi.w	407c7a <_malloc_r+0x1ea>
  407eec:	2c00      	cmp	r4, #0
  407eee:	f43f aec4 	beq.w	407c7a <_malloc_r+0x1ea>
  407ef2:	421c      	tst	r4, r3
  407ef4:	4640      	mov	r0, r8
  407ef6:	f47f ae3e 	bne.w	407b76 <_malloc_r+0xe6>
  407efa:	0064      	lsls	r4, r4, #1
  407efc:	421c      	tst	r4, r3
  407efe:	f100 0004 	add.w	r0, r0, #4
  407f02:	d0fa      	beq.n	407efa <_malloc_r+0x46a>
  407f04:	e637      	b.n	407b76 <_malloc_r+0xe6>
  407f06:	468c      	mov	ip, r1
  407f08:	e78c      	b.n	407e24 <_malloc_r+0x394>
  407f0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407f0e:	d815      	bhi.n	407f3c <_malloc_r+0x4ac>
  407f10:	0bf3      	lsrs	r3, r6, #15
  407f12:	f103 0078 	add.w	r0, r3, #120	; 0x78
  407f16:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407f1a:	00c3      	lsls	r3, r0, #3
  407f1c:	e5da      	b.n	407ad4 <_malloc_r+0x44>
  407f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407f22:	e6ed      	b.n	407d00 <_malloc_r+0x270>
  407f24:	687b      	ldr	r3, [r7, #4]
  407f26:	1092      	asrs	r2, r2, #2
  407f28:	2101      	movs	r1, #1
  407f2a:	fa01 f202 	lsl.w	r2, r1, r2
  407f2e:	4313      	orrs	r3, r2
  407f30:	607b      	str	r3, [r7, #4]
  407f32:	4662      	mov	r2, ip
  407f34:	e779      	b.n	407e2a <_malloc_r+0x39a>
  407f36:	2301      	movs	r3, #1
  407f38:	6053      	str	r3, [r2, #4]
  407f3a:	e729      	b.n	407d90 <_malloc_r+0x300>
  407f3c:	f240 5254 	movw	r2, #1364	; 0x554
  407f40:	4293      	cmp	r3, r2
  407f42:	d822      	bhi.n	407f8a <_malloc_r+0x4fa>
  407f44:	0cb3      	lsrs	r3, r6, #18
  407f46:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407f4a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407f4e:	00c3      	lsls	r3, r0, #3
  407f50:	e5c0      	b.n	407ad4 <_malloc_r+0x44>
  407f52:	f103 0b10 	add.w	fp, r3, #16
  407f56:	e6ae      	b.n	407cb6 <_malloc_r+0x226>
  407f58:	2a54      	cmp	r2, #84	; 0x54
  407f5a:	d829      	bhi.n	407fb0 <_malloc_r+0x520>
  407f5c:	0b1a      	lsrs	r2, r3, #12
  407f5e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407f62:	00c9      	lsls	r1, r1, #3
  407f64:	326e      	adds	r2, #110	; 0x6e
  407f66:	e74d      	b.n	407e04 <_malloc_r+0x374>
  407f68:	4b20      	ldr	r3, [pc, #128]	; (407fec <_malloc_r+0x55c>)
  407f6a:	6819      	ldr	r1, [r3, #0]
  407f6c:	4459      	add	r1, fp
  407f6e:	6019      	str	r1, [r3, #0]
  407f70:	e6b2      	b.n	407cd8 <_malloc_r+0x248>
  407f72:	f3ca 000b 	ubfx	r0, sl, #0, #12
  407f76:	2800      	cmp	r0, #0
  407f78:	f47f aeae 	bne.w	407cd8 <_malloc_r+0x248>
  407f7c:	eb08 030b 	add.w	r3, r8, fp
  407f80:	68ba      	ldr	r2, [r7, #8]
  407f82:	f043 0301 	orr.w	r3, r3, #1
  407f86:	6053      	str	r3, [r2, #4]
  407f88:	e6ee      	b.n	407d68 <_malloc_r+0x2d8>
  407f8a:	207f      	movs	r0, #127	; 0x7f
  407f8c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407f90:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  407f94:	e59e      	b.n	407ad4 <_malloc_r+0x44>
  407f96:	f104 0108 	add.w	r1, r4, #8
  407f9a:	4628      	mov	r0, r5
  407f9c:	9300      	str	r3, [sp, #0]
  407f9e:	f7ff fa59 	bl	407454 <_free_r>
  407fa2:	9b00      	ldr	r3, [sp, #0]
  407fa4:	6819      	ldr	r1, [r3, #0]
  407fa6:	e6df      	b.n	407d68 <_malloc_r+0x2d8>
  407fa8:	2001      	movs	r0, #1
  407faa:	f04f 0900 	mov.w	r9, #0
  407fae:	e6bc      	b.n	407d2a <_malloc_r+0x29a>
  407fb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407fb4:	d805      	bhi.n	407fc2 <_malloc_r+0x532>
  407fb6:	0bda      	lsrs	r2, r3, #15
  407fb8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407fbc:	00c9      	lsls	r1, r1, #3
  407fbe:	3277      	adds	r2, #119	; 0x77
  407fc0:	e720      	b.n	407e04 <_malloc_r+0x374>
  407fc2:	f240 5154 	movw	r1, #1364	; 0x554
  407fc6:	428a      	cmp	r2, r1
  407fc8:	d805      	bhi.n	407fd6 <_malloc_r+0x546>
  407fca:	0c9a      	lsrs	r2, r3, #18
  407fcc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407fd0:	00c9      	lsls	r1, r1, #3
  407fd2:	327c      	adds	r2, #124	; 0x7c
  407fd4:	e716      	b.n	407e04 <_malloc_r+0x374>
  407fd6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  407fda:	227e      	movs	r2, #126	; 0x7e
  407fdc:	e712      	b.n	407e04 <_malloc_r+0x374>
  407fde:	687b      	ldr	r3, [r7, #4]
  407fe0:	e780      	b.n	407ee4 <_malloc_r+0x454>
  407fe2:	08f0      	lsrs	r0, r6, #3
  407fe4:	f106 0308 	add.w	r3, r6, #8
  407fe8:	e600      	b.n	407bec <_malloc_r+0x15c>
  407fea:	bf00      	nop
  407fec:	2040c964 	.word	0x2040c964

00407ff0 <__ascii_mbtowc>:
  407ff0:	b082      	sub	sp, #8
  407ff2:	b149      	cbz	r1, 408008 <__ascii_mbtowc+0x18>
  407ff4:	b15a      	cbz	r2, 40800e <__ascii_mbtowc+0x1e>
  407ff6:	b16b      	cbz	r3, 408014 <__ascii_mbtowc+0x24>
  407ff8:	7813      	ldrb	r3, [r2, #0]
  407ffa:	600b      	str	r3, [r1, #0]
  407ffc:	7812      	ldrb	r2, [r2, #0]
  407ffe:	1c10      	adds	r0, r2, #0
  408000:	bf18      	it	ne
  408002:	2001      	movne	r0, #1
  408004:	b002      	add	sp, #8
  408006:	4770      	bx	lr
  408008:	a901      	add	r1, sp, #4
  40800a:	2a00      	cmp	r2, #0
  40800c:	d1f3      	bne.n	407ff6 <__ascii_mbtowc+0x6>
  40800e:	4610      	mov	r0, r2
  408010:	b002      	add	sp, #8
  408012:	4770      	bx	lr
  408014:	f06f 0001 	mvn.w	r0, #1
  408018:	e7f4      	b.n	408004 <__ascii_mbtowc+0x14>
  40801a:	bf00      	nop
  40801c:	0000      	movs	r0, r0
	...

00408020 <memchr>:
  408020:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408024:	2a10      	cmp	r2, #16
  408026:	db2b      	blt.n	408080 <memchr+0x60>
  408028:	f010 0f07 	tst.w	r0, #7
  40802c:	d008      	beq.n	408040 <memchr+0x20>
  40802e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408032:	3a01      	subs	r2, #1
  408034:	428b      	cmp	r3, r1
  408036:	d02d      	beq.n	408094 <memchr+0x74>
  408038:	f010 0f07 	tst.w	r0, #7
  40803c:	b342      	cbz	r2, 408090 <memchr+0x70>
  40803e:	d1f6      	bne.n	40802e <memchr+0xe>
  408040:	b4f0      	push	{r4, r5, r6, r7}
  408042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40804a:	f022 0407 	bic.w	r4, r2, #7
  40804e:	f07f 0700 	mvns.w	r7, #0
  408052:	2300      	movs	r3, #0
  408054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408058:	3c08      	subs	r4, #8
  40805a:	ea85 0501 	eor.w	r5, r5, r1
  40805e:	ea86 0601 	eor.w	r6, r6, r1
  408062:	fa85 f547 	uadd8	r5, r5, r7
  408066:	faa3 f587 	sel	r5, r3, r7
  40806a:	fa86 f647 	uadd8	r6, r6, r7
  40806e:	faa5 f687 	sel	r6, r5, r7
  408072:	b98e      	cbnz	r6, 408098 <memchr+0x78>
  408074:	d1ee      	bne.n	408054 <memchr+0x34>
  408076:	bcf0      	pop	{r4, r5, r6, r7}
  408078:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40807c:	f002 0207 	and.w	r2, r2, #7
  408080:	b132      	cbz	r2, 408090 <memchr+0x70>
  408082:	f810 3b01 	ldrb.w	r3, [r0], #1
  408086:	3a01      	subs	r2, #1
  408088:	ea83 0301 	eor.w	r3, r3, r1
  40808c:	b113      	cbz	r3, 408094 <memchr+0x74>
  40808e:	d1f8      	bne.n	408082 <memchr+0x62>
  408090:	2000      	movs	r0, #0
  408092:	4770      	bx	lr
  408094:	3801      	subs	r0, #1
  408096:	4770      	bx	lr
  408098:	2d00      	cmp	r5, #0
  40809a:	bf06      	itte	eq
  40809c:	4635      	moveq	r5, r6
  40809e:	3803      	subeq	r0, #3
  4080a0:	3807      	subne	r0, #7
  4080a2:	f015 0f01 	tst.w	r5, #1
  4080a6:	d107      	bne.n	4080b8 <memchr+0x98>
  4080a8:	3001      	adds	r0, #1
  4080aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4080ae:	bf02      	ittt	eq
  4080b0:	3001      	addeq	r0, #1
  4080b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4080b6:	3001      	addeq	r0, #1
  4080b8:	bcf0      	pop	{r4, r5, r6, r7}
  4080ba:	3801      	subs	r0, #1
  4080bc:	4770      	bx	lr
  4080be:	bf00      	nop

004080c0 <memmove>:
  4080c0:	4288      	cmp	r0, r1
  4080c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080c4:	d90d      	bls.n	4080e2 <memmove+0x22>
  4080c6:	188b      	adds	r3, r1, r2
  4080c8:	4298      	cmp	r0, r3
  4080ca:	d20a      	bcs.n	4080e2 <memmove+0x22>
  4080cc:	1884      	adds	r4, r0, r2
  4080ce:	2a00      	cmp	r2, #0
  4080d0:	d051      	beq.n	408176 <memmove+0xb6>
  4080d2:	4622      	mov	r2, r4
  4080d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4080d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4080dc:	4299      	cmp	r1, r3
  4080de:	d1f9      	bne.n	4080d4 <memmove+0x14>
  4080e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4080e2:	2a0f      	cmp	r2, #15
  4080e4:	d948      	bls.n	408178 <memmove+0xb8>
  4080e6:	ea41 0300 	orr.w	r3, r1, r0
  4080ea:	079b      	lsls	r3, r3, #30
  4080ec:	d146      	bne.n	40817c <memmove+0xbc>
  4080ee:	f100 0410 	add.w	r4, r0, #16
  4080f2:	f101 0310 	add.w	r3, r1, #16
  4080f6:	4615      	mov	r5, r2
  4080f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4080fc:	f844 6c10 	str.w	r6, [r4, #-16]
  408100:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408104:	f844 6c0c 	str.w	r6, [r4, #-12]
  408108:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40810c:	f844 6c08 	str.w	r6, [r4, #-8]
  408110:	3d10      	subs	r5, #16
  408112:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408116:	f844 6c04 	str.w	r6, [r4, #-4]
  40811a:	2d0f      	cmp	r5, #15
  40811c:	f103 0310 	add.w	r3, r3, #16
  408120:	f104 0410 	add.w	r4, r4, #16
  408124:	d8e8      	bhi.n	4080f8 <memmove+0x38>
  408126:	f1a2 0310 	sub.w	r3, r2, #16
  40812a:	f023 030f 	bic.w	r3, r3, #15
  40812e:	f002 0e0f 	and.w	lr, r2, #15
  408132:	3310      	adds	r3, #16
  408134:	f1be 0f03 	cmp.w	lr, #3
  408138:	4419      	add	r1, r3
  40813a:	4403      	add	r3, r0
  40813c:	d921      	bls.n	408182 <memmove+0xc2>
  40813e:	1f1e      	subs	r6, r3, #4
  408140:	460d      	mov	r5, r1
  408142:	4674      	mov	r4, lr
  408144:	3c04      	subs	r4, #4
  408146:	f855 7b04 	ldr.w	r7, [r5], #4
  40814a:	f846 7f04 	str.w	r7, [r6, #4]!
  40814e:	2c03      	cmp	r4, #3
  408150:	d8f8      	bhi.n	408144 <memmove+0x84>
  408152:	f1ae 0404 	sub.w	r4, lr, #4
  408156:	f024 0403 	bic.w	r4, r4, #3
  40815a:	3404      	adds	r4, #4
  40815c:	4421      	add	r1, r4
  40815e:	4423      	add	r3, r4
  408160:	f002 0203 	and.w	r2, r2, #3
  408164:	b162      	cbz	r2, 408180 <memmove+0xc0>
  408166:	3b01      	subs	r3, #1
  408168:	440a      	add	r2, r1
  40816a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40816e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408172:	428a      	cmp	r2, r1
  408174:	d1f9      	bne.n	40816a <memmove+0xaa>
  408176:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408178:	4603      	mov	r3, r0
  40817a:	e7f3      	b.n	408164 <memmove+0xa4>
  40817c:	4603      	mov	r3, r0
  40817e:	e7f2      	b.n	408166 <memmove+0xa6>
  408180:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408182:	4672      	mov	r2, lr
  408184:	e7ee      	b.n	408164 <memmove+0xa4>
  408186:	bf00      	nop

00408188 <__malloc_lock>:
  408188:	4801      	ldr	r0, [pc, #4]	; (408190 <__malloc_lock+0x8>)
  40818a:	f7ff bbfd 	b.w	407988 <__retarget_lock_acquire_recursive>
  40818e:	bf00      	nop
  408190:	2040cab4 	.word	0x2040cab4

00408194 <__malloc_unlock>:
  408194:	4801      	ldr	r0, [pc, #4]	; (40819c <__malloc_unlock+0x8>)
  408196:	f7ff bbf9 	b.w	40798c <__retarget_lock_release_recursive>
  40819a:	bf00      	nop
  40819c:	2040cab4 	.word	0x2040cab4

004081a0 <_realloc_r>:
  4081a0:	2900      	cmp	r1, #0
  4081a2:	f000 8095 	beq.w	4082d0 <_realloc_r+0x130>
  4081a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081aa:	460d      	mov	r5, r1
  4081ac:	4616      	mov	r6, r2
  4081ae:	b083      	sub	sp, #12
  4081b0:	4680      	mov	r8, r0
  4081b2:	f106 070b 	add.w	r7, r6, #11
  4081b6:	f7ff ffe7 	bl	408188 <__malloc_lock>
  4081ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4081be:	2f16      	cmp	r7, #22
  4081c0:	f02e 0403 	bic.w	r4, lr, #3
  4081c4:	f1a5 0908 	sub.w	r9, r5, #8
  4081c8:	d83c      	bhi.n	408244 <_realloc_r+0xa4>
  4081ca:	2210      	movs	r2, #16
  4081cc:	4617      	mov	r7, r2
  4081ce:	42be      	cmp	r6, r7
  4081d0:	d83d      	bhi.n	40824e <_realloc_r+0xae>
  4081d2:	4294      	cmp	r4, r2
  4081d4:	da43      	bge.n	40825e <_realloc_r+0xbe>
  4081d6:	4bc4      	ldr	r3, [pc, #784]	; (4084e8 <_realloc_r+0x348>)
  4081d8:	6899      	ldr	r1, [r3, #8]
  4081da:	eb09 0004 	add.w	r0, r9, r4
  4081de:	4288      	cmp	r0, r1
  4081e0:	f000 80b4 	beq.w	40834c <_realloc_r+0x1ac>
  4081e4:	6843      	ldr	r3, [r0, #4]
  4081e6:	f023 0101 	bic.w	r1, r3, #1
  4081ea:	4401      	add	r1, r0
  4081ec:	6849      	ldr	r1, [r1, #4]
  4081ee:	07c9      	lsls	r1, r1, #31
  4081f0:	d54c      	bpl.n	40828c <_realloc_r+0xec>
  4081f2:	f01e 0f01 	tst.w	lr, #1
  4081f6:	f000 809b 	beq.w	408330 <_realloc_r+0x190>
  4081fa:	4631      	mov	r1, r6
  4081fc:	4640      	mov	r0, r8
  4081fe:	f7ff fc47 	bl	407a90 <_malloc_r>
  408202:	4606      	mov	r6, r0
  408204:	2800      	cmp	r0, #0
  408206:	d03a      	beq.n	40827e <_realloc_r+0xde>
  408208:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40820c:	f023 0301 	bic.w	r3, r3, #1
  408210:	444b      	add	r3, r9
  408212:	f1a0 0208 	sub.w	r2, r0, #8
  408216:	429a      	cmp	r2, r3
  408218:	f000 8121 	beq.w	40845e <_realloc_r+0x2be>
  40821c:	1f22      	subs	r2, r4, #4
  40821e:	2a24      	cmp	r2, #36	; 0x24
  408220:	f200 8107 	bhi.w	408432 <_realloc_r+0x292>
  408224:	2a13      	cmp	r2, #19
  408226:	f200 80db 	bhi.w	4083e0 <_realloc_r+0x240>
  40822a:	4603      	mov	r3, r0
  40822c:	462a      	mov	r2, r5
  40822e:	6811      	ldr	r1, [r2, #0]
  408230:	6019      	str	r1, [r3, #0]
  408232:	6851      	ldr	r1, [r2, #4]
  408234:	6059      	str	r1, [r3, #4]
  408236:	6892      	ldr	r2, [r2, #8]
  408238:	609a      	str	r2, [r3, #8]
  40823a:	4629      	mov	r1, r5
  40823c:	4640      	mov	r0, r8
  40823e:	f7ff f909 	bl	407454 <_free_r>
  408242:	e01c      	b.n	40827e <_realloc_r+0xde>
  408244:	f027 0707 	bic.w	r7, r7, #7
  408248:	2f00      	cmp	r7, #0
  40824a:	463a      	mov	r2, r7
  40824c:	dabf      	bge.n	4081ce <_realloc_r+0x2e>
  40824e:	2600      	movs	r6, #0
  408250:	230c      	movs	r3, #12
  408252:	4630      	mov	r0, r6
  408254:	f8c8 3000 	str.w	r3, [r8]
  408258:	b003      	add	sp, #12
  40825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40825e:	462e      	mov	r6, r5
  408260:	1be3      	subs	r3, r4, r7
  408262:	2b0f      	cmp	r3, #15
  408264:	d81e      	bhi.n	4082a4 <_realloc_r+0x104>
  408266:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40826a:	f003 0301 	and.w	r3, r3, #1
  40826e:	4323      	orrs	r3, r4
  408270:	444c      	add	r4, r9
  408272:	f8c9 3004 	str.w	r3, [r9, #4]
  408276:	6863      	ldr	r3, [r4, #4]
  408278:	f043 0301 	orr.w	r3, r3, #1
  40827c:	6063      	str	r3, [r4, #4]
  40827e:	4640      	mov	r0, r8
  408280:	f7ff ff88 	bl	408194 <__malloc_unlock>
  408284:	4630      	mov	r0, r6
  408286:	b003      	add	sp, #12
  408288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40828c:	f023 0303 	bic.w	r3, r3, #3
  408290:	18e1      	adds	r1, r4, r3
  408292:	4291      	cmp	r1, r2
  408294:	db1f      	blt.n	4082d6 <_realloc_r+0x136>
  408296:	68c3      	ldr	r3, [r0, #12]
  408298:	6882      	ldr	r2, [r0, #8]
  40829a:	462e      	mov	r6, r5
  40829c:	60d3      	str	r3, [r2, #12]
  40829e:	460c      	mov	r4, r1
  4082a0:	609a      	str	r2, [r3, #8]
  4082a2:	e7dd      	b.n	408260 <_realloc_r+0xc0>
  4082a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4082a8:	eb09 0107 	add.w	r1, r9, r7
  4082ac:	f002 0201 	and.w	r2, r2, #1
  4082b0:	444c      	add	r4, r9
  4082b2:	f043 0301 	orr.w	r3, r3, #1
  4082b6:	4317      	orrs	r7, r2
  4082b8:	f8c9 7004 	str.w	r7, [r9, #4]
  4082bc:	604b      	str	r3, [r1, #4]
  4082be:	6863      	ldr	r3, [r4, #4]
  4082c0:	f043 0301 	orr.w	r3, r3, #1
  4082c4:	3108      	adds	r1, #8
  4082c6:	6063      	str	r3, [r4, #4]
  4082c8:	4640      	mov	r0, r8
  4082ca:	f7ff f8c3 	bl	407454 <_free_r>
  4082ce:	e7d6      	b.n	40827e <_realloc_r+0xde>
  4082d0:	4611      	mov	r1, r2
  4082d2:	f7ff bbdd 	b.w	407a90 <_malloc_r>
  4082d6:	f01e 0f01 	tst.w	lr, #1
  4082da:	d18e      	bne.n	4081fa <_realloc_r+0x5a>
  4082dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4082e0:	eba9 0a01 	sub.w	sl, r9, r1
  4082e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4082e8:	f021 0103 	bic.w	r1, r1, #3
  4082ec:	440b      	add	r3, r1
  4082ee:	4423      	add	r3, r4
  4082f0:	4293      	cmp	r3, r2
  4082f2:	db25      	blt.n	408340 <_realloc_r+0x1a0>
  4082f4:	68c2      	ldr	r2, [r0, #12]
  4082f6:	6881      	ldr	r1, [r0, #8]
  4082f8:	4656      	mov	r6, sl
  4082fa:	60ca      	str	r2, [r1, #12]
  4082fc:	6091      	str	r1, [r2, #8]
  4082fe:	f8da 100c 	ldr.w	r1, [sl, #12]
  408302:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408306:	1f22      	subs	r2, r4, #4
  408308:	2a24      	cmp	r2, #36	; 0x24
  40830a:	60c1      	str	r1, [r0, #12]
  40830c:	6088      	str	r0, [r1, #8]
  40830e:	f200 8094 	bhi.w	40843a <_realloc_r+0x29a>
  408312:	2a13      	cmp	r2, #19
  408314:	d96f      	bls.n	4083f6 <_realloc_r+0x256>
  408316:	6829      	ldr	r1, [r5, #0]
  408318:	f8ca 1008 	str.w	r1, [sl, #8]
  40831c:	6869      	ldr	r1, [r5, #4]
  40831e:	f8ca 100c 	str.w	r1, [sl, #12]
  408322:	2a1b      	cmp	r2, #27
  408324:	f200 80a2 	bhi.w	40846c <_realloc_r+0x2cc>
  408328:	3508      	adds	r5, #8
  40832a:	f10a 0210 	add.w	r2, sl, #16
  40832e:	e063      	b.n	4083f8 <_realloc_r+0x258>
  408330:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408334:	eba9 0a03 	sub.w	sl, r9, r3
  408338:	f8da 1004 	ldr.w	r1, [sl, #4]
  40833c:	f021 0103 	bic.w	r1, r1, #3
  408340:	1863      	adds	r3, r4, r1
  408342:	4293      	cmp	r3, r2
  408344:	f6ff af59 	blt.w	4081fa <_realloc_r+0x5a>
  408348:	4656      	mov	r6, sl
  40834a:	e7d8      	b.n	4082fe <_realloc_r+0x15e>
  40834c:	6841      	ldr	r1, [r0, #4]
  40834e:	f021 0b03 	bic.w	fp, r1, #3
  408352:	44a3      	add	fp, r4
  408354:	f107 0010 	add.w	r0, r7, #16
  408358:	4583      	cmp	fp, r0
  40835a:	da56      	bge.n	40840a <_realloc_r+0x26a>
  40835c:	f01e 0f01 	tst.w	lr, #1
  408360:	f47f af4b 	bne.w	4081fa <_realloc_r+0x5a>
  408364:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408368:	eba9 0a01 	sub.w	sl, r9, r1
  40836c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408370:	f021 0103 	bic.w	r1, r1, #3
  408374:	448b      	add	fp, r1
  408376:	4558      	cmp	r0, fp
  408378:	dce2      	bgt.n	408340 <_realloc_r+0x1a0>
  40837a:	4656      	mov	r6, sl
  40837c:	f8da 100c 	ldr.w	r1, [sl, #12]
  408380:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408384:	1f22      	subs	r2, r4, #4
  408386:	2a24      	cmp	r2, #36	; 0x24
  408388:	60c1      	str	r1, [r0, #12]
  40838a:	6088      	str	r0, [r1, #8]
  40838c:	f200 808f 	bhi.w	4084ae <_realloc_r+0x30e>
  408390:	2a13      	cmp	r2, #19
  408392:	f240 808a 	bls.w	4084aa <_realloc_r+0x30a>
  408396:	6829      	ldr	r1, [r5, #0]
  408398:	f8ca 1008 	str.w	r1, [sl, #8]
  40839c:	6869      	ldr	r1, [r5, #4]
  40839e:	f8ca 100c 	str.w	r1, [sl, #12]
  4083a2:	2a1b      	cmp	r2, #27
  4083a4:	f200 808a 	bhi.w	4084bc <_realloc_r+0x31c>
  4083a8:	3508      	adds	r5, #8
  4083aa:	f10a 0210 	add.w	r2, sl, #16
  4083ae:	6829      	ldr	r1, [r5, #0]
  4083b0:	6011      	str	r1, [r2, #0]
  4083b2:	6869      	ldr	r1, [r5, #4]
  4083b4:	6051      	str	r1, [r2, #4]
  4083b6:	68a9      	ldr	r1, [r5, #8]
  4083b8:	6091      	str	r1, [r2, #8]
  4083ba:	eb0a 0107 	add.w	r1, sl, r7
  4083be:	ebab 0207 	sub.w	r2, fp, r7
  4083c2:	f042 0201 	orr.w	r2, r2, #1
  4083c6:	6099      	str	r1, [r3, #8]
  4083c8:	604a      	str	r2, [r1, #4]
  4083ca:	f8da 3004 	ldr.w	r3, [sl, #4]
  4083ce:	f003 0301 	and.w	r3, r3, #1
  4083d2:	431f      	orrs	r7, r3
  4083d4:	4640      	mov	r0, r8
  4083d6:	f8ca 7004 	str.w	r7, [sl, #4]
  4083da:	f7ff fedb 	bl	408194 <__malloc_unlock>
  4083de:	e751      	b.n	408284 <_realloc_r+0xe4>
  4083e0:	682b      	ldr	r3, [r5, #0]
  4083e2:	6003      	str	r3, [r0, #0]
  4083e4:	686b      	ldr	r3, [r5, #4]
  4083e6:	6043      	str	r3, [r0, #4]
  4083e8:	2a1b      	cmp	r2, #27
  4083ea:	d82d      	bhi.n	408448 <_realloc_r+0x2a8>
  4083ec:	f100 0308 	add.w	r3, r0, #8
  4083f0:	f105 0208 	add.w	r2, r5, #8
  4083f4:	e71b      	b.n	40822e <_realloc_r+0x8e>
  4083f6:	4632      	mov	r2, r6
  4083f8:	6829      	ldr	r1, [r5, #0]
  4083fa:	6011      	str	r1, [r2, #0]
  4083fc:	6869      	ldr	r1, [r5, #4]
  4083fe:	6051      	str	r1, [r2, #4]
  408400:	68a9      	ldr	r1, [r5, #8]
  408402:	6091      	str	r1, [r2, #8]
  408404:	461c      	mov	r4, r3
  408406:	46d1      	mov	r9, sl
  408408:	e72a      	b.n	408260 <_realloc_r+0xc0>
  40840a:	eb09 0107 	add.w	r1, r9, r7
  40840e:	ebab 0b07 	sub.w	fp, fp, r7
  408412:	f04b 0201 	orr.w	r2, fp, #1
  408416:	6099      	str	r1, [r3, #8]
  408418:	604a      	str	r2, [r1, #4]
  40841a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40841e:	f003 0301 	and.w	r3, r3, #1
  408422:	431f      	orrs	r7, r3
  408424:	4640      	mov	r0, r8
  408426:	f845 7c04 	str.w	r7, [r5, #-4]
  40842a:	f7ff feb3 	bl	408194 <__malloc_unlock>
  40842e:	462e      	mov	r6, r5
  408430:	e728      	b.n	408284 <_realloc_r+0xe4>
  408432:	4629      	mov	r1, r5
  408434:	f7ff fe44 	bl	4080c0 <memmove>
  408438:	e6ff      	b.n	40823a <_realloc_r+0x9a>
  40843a:	4629      	mov	r1, r5
  40843c:	4630      	mov	r0, r6
  40843e:	461c      	mov	r4, r3
  408440:	46d1      	mov	r9, sl
  408442:	f7ff fe3d 	bl	4080c0 <memmove>
  408446:	e70b      	b.n	408260 <_realloc_r+0xc0>
  408448:	68ab      	ldr	r3, [r5, #8]
  40844a:	6083      	str	r3, [r0, #8]
  40844c:	68eb      	ldr	r3, [r5, #12]
  40844e:	60c3      	str	r3, [r0, #12]
  408450:	2a24      	cmp	r2, #36	; 0x24
  408452:	d017      	beq.n	408484 <_realloc_r+0x2e4>
  408454:	f100 0310 	add.w	r3, r0, #16
  408458:	f105 0210 	add.w	r2, r5, #16
  40845c:	e6e7      	b.n	40822e <_realloc_r+0x8e>
  40845e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408462:	f023 0303 	bic.w	r3, r3, #3
  408466:	441c      	add	r4, r3
  408468:	462e      	mov	r6, r5
  40846a:	e6f9      	b.n	408260 <_realloc_r+0xc0>
  40846c:	68a9      	ldr	r1, [r5, #8]
  40846e:	f8ca 1010 	str.w	r1, [sl, #16]
  408472:	68e9      	ldr	r1, [r5, #12]
  408474:	f8ca 1014 	str.w	r1, [sl, #20]
  408478:	2a24      	cmp	r2, #36	; 0x24
  40847a:	d00c      	beq.n	408496 <_realloc_r+0x2f6>
  40847c:	3510      	adds	r5, #16
  40847e:	f10a 0218 	add.w	r2, sl, #24
  408482:	e7b9      	b.n	4083f8 <_realloc_r+0x258>
  408484:	692b      	ldr	r3, [r5, #16]
  408486:	6103      	str	r3, [r0, #16]
  408488:	696b      	ldr	r3, [r5, #20]
  40848a:	6143      	str	r3, [r0, #20]
  40848c:	f105 0218 	add.w	r2, r5, #24
  408490:	f100 0318 	add.w	r3, r0, #24
  408494:	e6cb      	b.n	40822e <_realloc_r+0x8e>
  408496:	692a      	ldr	r2, [r5, #16]
  408498:	f8ca 2018 	str.w	r2, [sl, #24]
  40849c:	696a      	ldr	r2, [r5, #20]
  40849e:	f8ca 201c 	str.w	r2, [sl, #28]
  4084a2:	3518      	adds	r5, #24
  4084a4:	f10a 0220 	add.w	r2, sl, #32
  4084a8:	e7a6      	b.n	4083f8 <_realloc_r+0x258>
  4084aa:	4632      	mov	r2, r6
  4084ac:	e77f      	b.n	4083ae <_realloc_r+0x20e>
  4084ae:	4629      	mov	r1, r5
  4084b0:	4630      	mov	r0, r6
  4084b2:	9301      	str	r3, [sp, #4]
  4084b4:	f7ff fe04 	bl	4080c0 <memmove>
  4084b8:	9b01      	ldr	r3, [sp, #4]
  4084ba:	e77e      	b.n	4083ba <_realloc_r+0x21a>
  4084bc:	68a9      	ldr	r1, [r5, #8]
  4084be:	f8ca 1010 	str.w	r1, [sl, #16]
  4084c2:	68e9      	ldr	r1, [r5, #12]
  4084c4:	f8ca 1014 	str.w	r1, [sl, #20]
  4084c8:	2a24      	cmp	r2, #36	; 0x24
  4084ca:	d003      	beq.n	4084d4 <_realloc_r+0x334>
  4084cc:	3510      	adds	r5, #16
  4084ce:	f10a 0218 	add.w	r2, sl, #24
  4084d2:	e76c      	b.n	4083ae <_realloc_r+0x20e>
  4084d4:	692a      	ldr	r2, [r5, #16]
  4084d6:	f8ca 2018 	str.w	r2, [sl, #24]
  4084da:	696a      	ldr	r2, [r5, #20]
  4084dc:	f8ca 201c 	str.w	r2, [sl, #28]
  4084e0:	3518      	adds	r5, #24
  4084e2:	f10a 0220 	add.w	r2, sl, #32
  4084e6:	e762      	b.n	4083ae <_realloc_r+0x20e>
  4084e8:	204005c0 	.word	0x204005c0

004084ec <_sbrk_r>:
  4084ec:	b538      	push	{r3, r4, r5, lr}
  4084ee:	4c07      	ldr	r4, [pc, #28]	; (40850c <_sbrk_r+0x20>)
  4084f0:	2300      	movs	r3, #0
  4084f2:	4605      	mov	r5, r0
  4084f4:	4608      	mov	r0, r1
  4084f6:	6023      	str	r3, [r4, #0]
  4084f8:	f7fd f888 	bl	40560c <_sbrk>
  4084fc:	1c43      	adds	r3, r0, #1
  4084fe:	d000      	beq.n	408502 <_sbrk_r+0x16>
  408500:	bd38      	pop	{r3, r4, r5, pc}
  408502:	6823      	ldr	r3, [r4, #0]
  408504:	2b00      	cmp	r3, #0
  408506:	d0fb      	beq.n	408500 <_sbrk_r+0x14>
  408508:	602b      	str	r3, [r5, #0]
  40850a:	bd38      	pop	{r3, r4, r5, pc}
  40850c:	2040cac8 	.word	0x2040cac8

00408510 <__sread>:
  408510:	b510      	push	{r4, lr}
  408512:	460c      	mov	r4, r1
  408514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408518:	f000 f9f6 	bl	408908 <_read_r>
  40851c:	2800      	cmp	r0, #0
  40851e:	db03      	blt.n	408528 <__sread+0x18>
  408520:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408522:	4403      	add	r3, r0
  408524:	6523      	str	r3, [r4, #80]	; 0x50
  408526:	bd10      	pop	{r4, pc}
  408528:	89a3      	ldrh	r3, [r4, #12]
  40852a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40852e:	81a3      	strh	r3, [r4, #12]
  408530:	bd10      	pop	{r4, pc}
  408532:	bf00      	nop

00408534 <__swrite>:
  408534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408538:	4616      	mov	r6, r2
  40853a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40853e:	461f      	mov	r7, r3
  408540:	05d3      	lsls	r3, r2, #23
  408542:	460c      	mov	r4, r1
  408544:	4605      	mov	r5, r0
  408546:	d507      	bpl.n	408558 <__swrite+0x24>
  408548:	2200      	movs	r2, #0
  40854a:	2302      	movs	r3, #2
  40854c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408550:	f000 f9c4 	bl	4088dc <_lseek_r>
  408554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40855c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408560:	81a2      	strh	r2, [r4, #12]
  408562:	463b      	mov	r3, r7
  408564:	4632      	mov	r2, r6
  408566:	4628      	mov	r0, r5
  408568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40856c:	f000 b8a4 	b.w	4086b8 <_write_r>

00408570 <__sseek>:
  408570:	b510      	push	{r4, lr}
  408572:	460c      	mov	r4, r1
  408574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408578:	f000 f9b0 	bl	4088dc <_lseek_r>
  40857c:	89a3      	ldrh	r3, [r4, #12]
  40857e:	1c42      	adds	r2, r0, #1
  408580:	bf0e      	itee	eq
  408582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40858a:	6520      	strne	r0, [r4, #80]	; 0x50
  40858c:	81a3      	strh	r3, [r4, #12]
  40858e:	bd10      	pop	{r4, pc}

00408590 <__sclose>:
  408590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408594:	f000 b908 	b.w	4087a8 <_close_r>

00408598 <__swbuf_r>:
  408598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40859a:	460d      	mov	r5, r1
  40859c:	4614      	mov	r4, r2
  40859e:	4606      	mov	r6, r0
  4085a0:	b110      	cbz	r0, 4085a8 <__swbuf_r+0x10>
  4085a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4085a4:	2b00      	cmp	r3, #0
  4085a6:	d04b      	beq.n	408640 <__swbuf_r+0xa8>
  4085a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4085ac:	69a3      	ldr	r3, [r4, #24]
  4085ae:	60a3      	str	r3, [r4, #8]
  4085b0:	b291      	uxth	r1, r2
  4085b2:	0708      	lsls	r0, r1, #28
  4085b4:	d539      	bpl.n	40862a <__swbuf_r+0x92>
  4085b6:	6923      	ldr	r3, [r4, #16]
  4085b8:	2b00      	cmp	r3, #0
  4085ba:	d036      	beq.n	40862a <__swbuf_r+0x92>
  4085bc:	b2ed      	uxtb	r5, r5
  4085be:	0489      	lsls	r1, r1, #18
  4085c0:	462f      	mov	r7, r5
  4085c2:	d515      	bpl.n	4085f0 <__swbuf_r+0x58>
  4085c4:	6822      	ldr	r2, [r4, #0]
  4085c6:	6961      	ldr	r1, [r4, #20]
  4085c8:	1ad3      	subs	r3, r2, r3
  4085ca:	428b      	cmp	r3, r1
  4085cc:	da1c      	bge.n	408608 <__swbuf_r+0x70>
  4085ce:	3301      	adds	r3, #1
  4085d0:	68a1      	ldr	r1, [r4, #8]
  4085d2:	1c50      	adds	r0, r2, #1
  4085d4:	3901      	subs	r1, #1
  4085d6:	60a1      	str	r1, [r4, #8]
  4085d8:	6020      	str	r0, [r4, #0]
  4085da:	7015      	strb	r5, [r2, #0]
  4085dc:	6962      	ldr	r2, [r4, #20]
  4085de:	429a      	cmp	r2, r3
  4085e0:	d01a      	beq.n	408618 <__swbuf_r+0x80>
  4085e2:	89a3      	ldrh	r3, [r4, #12]
  4085e4:	07db      	lsls	r3, r3, #31
  4085e6:	d501      	bpl.n	4085ec <__swbuf_r+0x54>
  4085e8:	2d0a      	cmp	r5, #10
  4085ea:	d015      	beq.n	408618 <__swbuf_r+0x80>
  4085ec:	4638      	mov	r0, r7
  4085ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4085f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4085f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4085f6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4085fa:	81a2      	strh	r2, [r4, #12]
  4085fc:	6822      	ldr	r2, [r4, #0]
  4085fe:	6661      	str	r1, [r4, #100]	; 0x64
  408600:	6961      	ldr	r1, [r4, #20]
  408602:	1ad3      	subs	r3, r2, r3
  408604:	428b      	cmp	r3, r1
  408606:	dbe2      	blt.n	4085ce <__swbuf_r+0x36>
  408608:	4621      	mov	r1, r4
  40860a:	4630      	mov	r0, r6
  40860c:	f7fe fda4 	bl	407158 <_fflush_r>
  408610:	b940      	cbnz	r0, 408624 <__swbuf_r+0x8c>
  408612:	6822      	ldr	r2, [r4, #0]
  408614:	2301      	movs	r3, #1
  408616:	e7db      	b.n	4085d0 <__swbuf_r+0x38>
  408618:	4621      	mov	r1, r4
  40861a:	4630      	mov	r0, r6
  40861c:	f7fe fd9c 	bl	407158 <_fflush_r>
  408620:	2800      	cmp	r0, #0
  408622:	d0e3      	beq.n	4085ec <__swbuf_r+0x54>
  408624:	f04f 37ff 	mov.w	r7, #4294967295
  408628:	e7e0      	b.n	4085ec <__swbuf_r+0x54>
  40862a:	4621      	mov	r1, r4
  40862c:	4630      	mov	r0, r6
  40862e:	f7fe fc7f 	bl	406f30 <__swsetup_r>
  408632:	2800      	cmp	r0, #0
  408634:	d1f6      	bne.n	408624 <__swbuf_r+0x8c>
  408636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40863a:	6923      	ldr	r3, [r4, #16]
  40863c:	b291      	uxth	r1, r2
  40863e:	e7bd      	b.n	4085bc <__swbuf_r+0x24>
  408640:	f7fe fde2 	bl	407208 <__sinit>
  408644:	e7b0      	b.n	4085a8 <__swbuf_r+0x10>
  408646:	bf00      	nop

00408648 <_wcrtomb_r>:
  408648:	b5f0      	push	{r4, r5, r6, r7, lr}
  40864a:	4606      	mov	r6, r0
  40864c:	b085      	sub	sp, #20
  40864e:	461f      	mov	r7, r3
  408650:	b189      	cbz	r1, 408676 <_wcrtomb_r+0x2e>
  408652:	4c10      	ldr	r4, [pc, #64]	; (408694 <_wcrtomb_r+0x4c>)
  408654:	4d10      	ldr	r5, [pc, #64]	; (408698 <_wcrtomb_r+0x50>)
  408656:	6824      	ldr	r4, [r4, #0]
  408658:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40865a:	2c00      	cmp	r4, #0
  40865c:	bf08      	it	eq
  40865e:	462c      	moveq	r4, r5
  408660:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408664:	47a0      	blx	r4
  408666:	1c43      	adds	r3, r0, #1
  408668:	d103      	bne.n	408672 <_wcrtomb_r+0x2a>
  40866a:	2200      	movs	r2, #0
  40866c:	238a      	movs	r3, #138	; 0x8a
  40866e:	603a      	str	r2, [r7, #0]
  408670:	6033      	str	r3, [r6, #0]
  408672:	b005      	add	sp, #20
  408674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408676:	460c      	mov	r4, r1
  408678:	4906      	ldr	r1, [pc, #24]	; (408694 <_wcrtomb_r+0x4c>)
  40867a:	4a07      	ldr	r2, [pc, #28]	; (408698 <_wcrtomb_r+0x50>)
  40867c:	6809      	ldr	r1, [r1, #0]
  40867e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408680:	2900      	cmp	r1, #0
  408682:	bf08      	it	eq
  408684:	4611      	moveq	r1, r2
  408686:	4622      	mov	r2, r4
  408688:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40868c:	a901      	add	r1, sp, #4
  40868e:	47a0      	blx	r4
  408690:	e7e9      	b.n	408666 <_wcrtomb_r+0x1e>
  408692:	bf00      	nop
  408694:	20400024 	.word	0x20400024
  408698:	20400454 	.word	0x20400454

0040869c <__ascii_wctomb>:
  40869c:	b121      	cbz	r1, 4086a8 <__ascii_wctomb+0xc>
  40869e:	2aff      	cmp	r2, #255	; 0xff
  4086a0:	d804      	bhi.n	4086ac <__ascii_wctomb+0x10>
  4086a2:	700a      	strb	r2, [r1, #0]
  4086a4:	2001      	movs	r0, #1
  4086a6:	4770      	bx	lr
  4086a8:	4608      	mov	r0, r1
  4086aa:	4770      	bx	lr
  4086ac:	238a      	movs	r3, #138	; 0x8a
  4086ae:	6003      	str	r3, [r0, #0]
  4086b0:	f04f 30ff 	mov.w	r0, #4294967295
  4086b4:	4770      	bx	lr
  4086b6:	bf00      	nop

004086b8 <_write_r>:
  4086b8:	b570      	push	{r4, r5, r6, lr}
  4086ba:	460d      	mov	r5, r1
  4086bc:	4c08      	ldr	r4, [pc, #32]	; (4086e0 <_write_r+0x28>)
  4086be:	4611      	mov	r1, r2
  4086c0:	4606      	mov	r6, r0
  4086c2:	461a      	mov	r2, r3
  4086c4:	4628      	mov	r0, r5
  4086c6:	2300      	movs	r3, #0
  4086c8:	6023      	str	r3, [r4, #0]
  4086ca:	f7fc f97d 	bl	4049c8 <_write>
  4086ce:	1c43      	adds	r3, r0, #1
  4086d0:	d000      	beq.n	4086d4 <_write_r+0x1c>
  4086d2:	bd70      	pop	{r4, r5, r6, pc}
  4086d4:	6823      	ldr	r3, [r4, #0]
  4086d6:	2b00      	cmp	r3, #0
  4086d8:	d0fb      	beq.n	4086d2 <_write_r+0x1a>
  4086da:	6033      	str	r3, [r6, #0]
  4086dc:	bd70      	pop	{r4, r5, r6, pc}
  4086de:	bf00      	nop
  4086e0:	2040cac8 	.word	0x2040cac8

004086e4 <__register_exitproc>:
  4086e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4086e8:	4d2c      	ldr	r5, [pc, #176]	; (40879c <__register_exitproc+0xb8>)
  4086ea:	4606      	mov	r6, r0
  4086ec:	6828      	ldr	r0, [r5, #0]
  4086ee:	4698      	mov	r8, r3
  4086f0:	460f      	mov	r7, r1
  4086f2:	4691      	mov	r9, r2
  4086f4:	f7ff f948 	bl	407988 <__retarget_lock_acquire_recursive>
  4086f8:	4b29      	ldr	r3, [pc, #164]	; (4087a0 <__register_exitproc+0xbc>)
  4086fa:	681c      	ldr	r4, [r3, #0]
  4086fc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408700:	2b00      	cmp	r3, #0
  408702:	d03e      	beq.n	408782 <__register_exitproc+0x9e>
  408704:	685a      	ldr	r2, [r3, #4]
  408706:	2a1f      	cmp	r2, #31
  408708:	dc1c      	bgt.n	408744 <__register_exitproc+0x60>
  40870a:	f102 0e01 	add.w	lr, r2, #1
  40870e:	b176      	cbz	r6, 40872e <__register_exitproc+0x4a>
  408710:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408714:	2401      	movs	r4, #1
  408716:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40871a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40871e:	4094      	lsls	r4, r2
  408720:	4320      	orrs	r0, r4
  408722:	2e02      	cmp	r6, #2
  408724:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408728:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40872c:	d023      	beq.n	408776 <__register_exitproc+0x92>
  40872e:	3202      	adds	r2, #2
  408730:	f8c3 e004 	str.w	lr, [r3, #4]
  408734:	6828      	ldr	r0, [r5, #0]
  408736:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40873a:	f7ff f927 	bl	40798c <__retarget_lock_release_recursive>
  40873e:	2000      	movs	r0, #0
  408740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408744:	4b17      	ldr	r3, [pc, #92]	; (4087a4 <__register_exitproc+0xc0>)
  408746:	b30b      	cbz	r3, 40878c <__register_exitproc+0xa8>
  408748:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40874c:	f7ff f998 	bl	407a80 <malloc>
  408750:	4603      	mov	r3, r0
  408752:	b1d8      	cbz	r0, 40878c <__register_exitproc+0xa8>
  408754:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408758:	6002      	str	r2, [r0, #0]
  40875a:	2100      	movs	r1, #0
  40875c:	6041      	str	r1, [r0, #4]
  40875e:	460a      	mov	r2, r1
  408760:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408764:	f04f 0e01 	mov.w	lr, #1
  408768:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40876c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408770:	2e00      	cmp	r6, #0
  408772:	d0dc      	beq.n	40872e <__register_exitproc+0x4a>
  408774:	e7cc      	b.n	408710 <__register_exitproc+0x2c>
  408776:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40877a:	430c      	orrs	r4, r1
  40877c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408780:	e7d5      	b.n	40872e <__register_exitproc+0x4a>
  408782:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408786:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40878a:	e7bb      	b.n	408704 <__register_exitproc+0x20>
  40878c:	6828      	ldr	r0, [r5, #0]
  40878e:	f7ff f8fd 	bl	40798c <__retarget_lock_release_recursive>
  408792:	f04f 30ff 	mov.w	r0, #4294967295
  408796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40879a:	bf00      	nop
  40879c:	20400450 	.word	0x20400450
  4087a0:	00409b24 	.word	0x00409b24
  4087a4:	00407a81 	.word	0x00407a81

004087a8 <_close_r>:
  4087a8:	b538      	push	{r3, r4, r5, lr}
  4087aa:	4c07      	ldr	r4, [pc, #28]	; (4087c8 <_close_r+0x20>)
  4087ac:	2300      	movs	r3, #0
  4087ae:	4605      	mov	r5, r0
  4087b0:	4608      	mov	r0, r1
  4087b2:	6023      	str	r3, [r4, #0]
  4087b4:	f7fc ff46 	bl	405644 <_close>
  4087b8:	1c43      	adds	r3, r0, #1
  4087ba:	d000      	beq.n	4087be <_close_r+0x16>
  4087bc:	bd38      	pop	{r3, r4, r5, pc}
  4087be:	6823      	ldr	r3, [r4, #0]
  4087c0:	2b00      	cmp	r3, #0
  4087c2:	d0fb      	beq.n	4087bc <_close_r+0x14>
  4087c4:	602b      	str	r3, [r5, #0]
  4087c6:	bd38      	pop	{r3, r4, r5, pc}
  4087c8:	2040cac8 	.word	0x2040cac8

004087cc <_fclose_r>:
  4087cc:	b570      	push	{r4, r5, r6, lr}
  4087ce:	b159      	cbz	r1, 4087e8 <_fclose_r+0x1c>
  4087d0:	4605      	mov	r5, r0
  4087d2:	460c      	mov	r4, r1
  4087d4:	b110      	cbz	r0, 4087dc <_fclose_r+0x10>
  4087d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4087d8:	2b00      	cmp	r3, #0
  4087da:	d03c      	beq.n	408856 <_fclose_r+0x8a>
  4087dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4087de:	07d8      	lsls	r0, r3, #31
  4087e0:	d505      	bpl.n	4087ee <_fclose_r+0x22>
  4087e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087e6:	b92b      	cbnz	r3, 4087f4 <_fclose_r+0x28>
  4087e8:	2600      	movs	r6, #0
  4087ea:	4630      	mov	r0, r6
  4087ec:	bd70      	pop	{r4, r5, r6, pc}
  4087ee:	89a3      	ldrh	r3, [r4, #12]
  4087f0:	0599      	lsls	r1, r3, #22
  4087f2:	d53c      	bpl.n	40886e <_fclose_r+0xa2>
  4087f4:	4621      	mov	r1, r4
  4087f6:	4628      	mov	r0, r5
  4087f8:	f7fe fc0e 	bl	407018 <__sflush_r>
  4087fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4087fe:	4606      	mov	r6, r0
  408800:	b133      	cbz	r3, 408810 <_fclose_r+0x44>
  408802:	69e1      	ldr	r1, [r4, #28]
  408804:	4628      	mov	r0, r5
  408806:	4798      	blx	r3
  408808:	2800      	cmp	r0, #0
  40880a:	bfb8      	it	lt
  40880c:	f04f 36ff 	movlt.w	r6, #4294967295
  408810:	89a3      	ldrh	r3, [r4, #12]
  408812:	061a      	lsls	r2, r3, #24
  408814:	d422      	bmi.n	40885c <_fclose_r+0x90>
  408816:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408818:	b141      	cbz	r1, 40882c <_fclose_r+0x60>
  40881a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40881e:	4299      	cmp	r1, r3
  408820:	d002      	beq.n	408828 <_fclose_r+0x5c>
  408822:	4628      	mov	r0, r5
  408824:	f7fe fe16 	bl	407454 <_free_r>
  408828:	2300      	movs	r3, #0
  40882a:	6323      	str	r3, [r4, #48]	; 0x30
  40882c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40882e:	b121      	cbz	r1, 40883a <_fclose_r+0x6e>
  408830:	4628      	mov	r0, r5
  408832:	f7fe fe0f 	bl	407454 <_free_r>
  408836:	2300      	movs	r3, #0
  408838:	6463      	str	r3, [r4, #68]	; 0x44
  40883a:	f7fe fd11 	bl	407260 <__sfp_lock_acquire>
  40883e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408840:	2200      	movs	r2, #0
  408842:	07db      	lsls	r3, r3, #31
  408844:	81a2      	strh	r2, [r4, #12]
  408846:	d50e      	bpl.n	408866 <_fclose_r+0x9a>
  408848:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40884a:	f7ff f89b 	bl	407984 <__retarget_lock_close_recursive>
  40884e:	f7fe fd0d 	bl	40726c <__sfp_lock_release>
  408852:	4630      	mov	r0, r6
  408854:	bd70      	pop	{r4, r5, r6, pc}
  408856:	f7fe fcd7 	bl	407208 <__sinit>
  40885a:	e7bf      	b.n	4087dc <_fclose_r+0x10>
  40885c:	6921      	ldr	r1, [r4, #16]
  40885e:	4628      	mov	r0, r5
  408860:	f7fe fdf8 	bl	407454 <_free_r>
  408864:	e7d7      	b.n	408816 <_fclose_r+0x4a>
  408866:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408868:	f7ff f890 	bl	40798c <__retarget_lock_release_recursive>
  40886c:	e7ec      	b.n	408848 <_fclose_r+0x7c>
  40886e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408870:	f7ff f88a 	bl	407988 <__retarget_lock_acquire_recursive>
  408874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408878:	2b00      	cmp	r3, #0
  40887a:	d1bb      	bne.n	4087f4 <_fclose_r+0x28>
  40887c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40887e:	f016 0601 	ands.w	r6, r6, #1
  408882:	d1b1      	bne.n	4087e8 <_fclose_r+0x1c>
  408884:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408886:	f7ff f881 	bl	40798c <__retarget_lock_release_recursive>
  40888a:	4630      	mov	r0, r6
  40888c:	bd70      	pop	{r4, r5, r6, pc}
  40888e:	bf00      	nop

00408890 <_fstat_r>:
  408890:	b538      	push	{r3, r4, r5, lr}
  408892:	460b      	mov	r3, r1
  408894:	4c07      	ldr	r4, [pc, #28]	; (4088b4 <_fstat_r+0x24>)
  408896:	4605      	mov	r5, r0
  408898:	4611      	mov	r1, r2
  40889a:	4618      	mov	r0, r3
  40889c:	2300      	movs	r3, #0
  40889e:	6023      	str	r3, [r4, #0]
  4088a0:	f7fc fed3 	bl	40564a <_fstat>
  4088a4:	1c43      	adds	r3, r0, #1
  4088a6:	d000      	beq.n	4088aa <_fstat_r+0x1a>
  4088a8:	bd38      	pop	{r3, r4, r5, pc}
  4088aa:	6823      	ldr	r3, [r4, #0]
  4088ac:	2b00      	cmp	r3, #0
  4088ae:	d0fb      	beq.n	4088a8 <_fstat_r+0x18>
  4088b0:	602b      	str	r3, [r5, #0]
  4088b2:	bd38      	pop	{r3, r4, r5, pc}
  4088b4:	2040cac8 	.word	0x2040cac8

004088b8 <_isatty_r>:
  4088b8:	b538      	push	{r3, r4, r5, lr}
  4088ba:	4c07      	ldr	r4, [pc, #28]	; (4088d8 <_isatty_r+0x20>)
  4088bc:	2300      	movs	r3, #0
  4088be:	4605      	mov	r5, r0
  4088c0:	4608      	mov	r0, r1
  4088c2:	6023      	str	r3, [r4, #0]
  4088c4:	f7fc fec6 	bl	405654 <_isatty>
  4088c8:	1c43      	adds	r3, r0, #1
  4088ca:	d000      	beq.n	4088ce <_isatty_r+0x16>
  4088cc:	bd38      	pop	{r3, r4, r5, pc}
  4088ce:	6823      	ldr	r3, [r4, #0]
  4088d0:	2b00      	cmp	r3, #0
  4088d2:	d0fb      	beq.n	4088cc <_isatty_r+0x14>
  4088d4:	602b      	str	r3, [r5, #0]
  4088d6:	bd38      	pop	{r3, r4, r5, pc}
  4088d8:	2040cac8 	.word	0x2040cac8

004088dc <_lseek_r>:
  4088dc:	b570      	push	{r4, r5, r6, lr}
  4088de:	460d      	mov	r5, r1
  4088e0:	4c08      	ldr	r4, [pc, #32]	; (408904 <_lseek_r+0x28>)
  4088e2:	4611      	mov	r1, r2
  4088e4:	4606      	mov	r6, r0
  4088e6:	461a      	mov	r2, r3
  4088e8:	4628      	mov	r0, r5
  4088ea:	2300      	movs	r3, #0
  4088ec:	6023      	str	r3, [r4, #0]
  4088ee:	f7fc feb3 	bl	405658 <_lseek>
  4088f2:	1c43      	adds	r3, r0, #1
  4088f4:	d000      	beq.n	4088f8 <_lseek_r+0x1c>
  4088f6:	bd70      	pop	{r4, r5, r6, pc}
  4088f8:	6823      	ldr	r3, [r4, #0]
  4088fa:	2b00      	cmp	r3, #0
  4088fc:	d0fb      	beq.n	4088f6 <_lseek_r+0x1a>
  4088fe:	6033      	str	r3, [r6, #0]
  408900:	bd70      	pop	{r4, r5, r6, pc}
  408902:	bf00      	nop
  408904:	2040cac8 	.word	0x2040cac8

00408908 <_read_r>:
  408908:	b570      	push	{r4, r5, r6, lr}
  40890a:	460d      	mov	r5, r1
  40890c:	4c08      	ldr	r4, [pc, #32]	; (408930 <_read_r+0x28>)
  40890e:	4611      	mov	r1, r2
  408910:	4606      	mov	r6, r0
  408912:	461a      	mov	r2, r3
  408914:	4628      	mov	r0, r5
  408916:	2300      	movs	r3, #0
  408918:	6023      	str	r3, [r4, #0]
  40891a:	f7fc f837 	bl	40498c <_read>
  40891e:	1c43      	adds	r3, r0, #1
  408920:	d000      	beq.n	408924 <_read_r+0x1c>
  408922:	bd70      	pop	{r4, r5, r6, pc}
  408924:	6823      	ldr	r3, [r4, #0]
  408926:	2b00      	cmp	r3, #0
  408928:	d0fb      	beq.n	408922 <_read_r+0x1a>
  40892a:	6033      	str	r3, [r6, #0]
  40892c:	bd70      	pop	{r4, r5, r6, pc}
  40892e:	bf00      	nop
  408930:	2040cac8 	.word	0x2040cac8

00408934 <__aeabi_uldivmod>:
  408934:	b953      	cbnz	r3, 40894c <__aeabi_uldivmod+0x18>
  408936:	b94a      	cbnz	r2, 40894c <__aeabi_uldivmod+0x18>
  408938:	2900      	cmp	r1, #0
  40893a:	bf08      	it	eq
  40893c:	2800      	cmpeq	r0, #0
  40893e:	bf1c      	itt	ne
  408940:	f04f 31ff 	movne.w	r1, #4294967295
  408944:	f04f 30ff 	movne.w	r0, #4294967295
  408948:	f000 b97a 	b.w	408c40 <__aeabi_idiv0>
  40894c:	f1ad 0c08 	sub.w	ip, sp, #8
  408950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408954:	f000 f806 	bl	408964 <__udivmoddi4>
  408958:	f8dd e004 	ldr.w	lr, [sp, #4]
  40895c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408960:	b004      	add	sp, #16
  408962:	4770      	bx	lr

00408964 <__udivmoddi4>:
  408964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408968:	468c      	mov	ip, r1
  40896a:	460d      	mov	r5, r1
  40896c:	4604      	mov	r4, r0
  40896e:	9e08      	ldr	r6, [sp, #32]
  408970:	2b00      	cmp	r3, #0
  408972:	d151      	bne.n	408a18 <__udivmoddi4+0xb4>
  408974:	428a      	cmp	r2, r1
  408976:	4617      	mov	r7, r2
  408978:	d96d      	bls.n	408a56 <__udivmoddi4+0xf2>
  40897a:	fab2 fe82 	clz	lr, r2
  40897e:	f1be 0f00 	cmp.w	lr, #0
  408982:	d00b      	beq.n	40899c <__udivmoddi4+0x38>
  408984:	f1ce 0c20 	rsb	ip, lr, #32
  408988:	fa01 f50e 	lsl.w	r5, r1, lr
  40898c:	fa20 fc0c 	lsr.w	ip, r0, ip
  408990:	fa02 f70e 	lsl.w	r7, r2, lr
  408994:	ea4c 0c05 	orr.w	ip, ip, r5
  408998:	fa00 f40e 	lsl.w	r4, r0, lr
  40899c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4089a0:	0c25      	lsrs	r5, r4, #16
  4089a2:	fbbc f8fa 	udiv	r8, ip, sl
  4089a6:	fa1f f987 	uxth.w	r9, r7
  4089aa:	fb0a cc18 	mls	ip, sl, r8, ip
  4089ae:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4089b2:	fb08 f309 	mul.w	r3, r8, r9
  4089b6:	42ab      	cmp	r3, r5
  4089b8:	d90a      	bls.n	4089d0 <__udivmoddi4+0x6c>
  4089ba:	19ed      	adds	r5, r5, r7
  4089bc:	f108 32ff 	add.w	r2, r8, #4294967295
  4089c0:	f080 8123 	bcs.w	408c0a <__udivmoddi4+0x2a6>
  4089c4:	42ab      	cmp	r3, r5
  4089c6:	f240 8120 	bls.w	408c0a <__udivmoddi4+0x2a6>
  4089ca:	f1a8 0802 	sub.w	r8, r8, #2
  4089ce:	443d      	add	r5, r7
  4089d0:	1aed      	subs	r5, r5, r3
  4089d2:	b2a4      	uxth	r4, r4
  4089d4:	fbb5 f0fa 	udiv	r0, r5, sl
  4089d8:	fb0a 5510 	mls	r5, sl, r0, r5
  4089dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4089e0:	fb00 f909 	mul.w	r9, r0, r9
  4089e4:	45a1      	cmp	r9, r4
  4089e6:	d909      	bls.n	4089fc <__udivmoddi4+0x98>
  4089e8:	19e4      	adds	r4, r4, r7
  4089ea:	f100 33ff 	add.w	r3, r0, #4294967295
  4089ee:	f080 810a 	bcs.w	408c06 <__udivmoddi4+0x2a2>
  4089f2:	45a1      	cmp	r9, r4
  4089f4:	f240 8107 	bls.w	408c06 <__udivmoddi4+0x2a2>
  4089f8:	3802      	subs	r0, #2
  4089fa:	443c      	add	r4, r7
  4089fc:	eba4 0409 	sub.w	r4, r4, r9
  408a00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408a04:	2100      	movs	r1, #0
  408a06:	2e00      	cmp	r6, #0
  408a08:	d061      	beq.n	408ace <__udivmoddi4+0x16a>
  408a0a:	fa24 f40e 	lsr.w	r4, r4, lr
  408a0e:	2300      	movs	r3, #0
  408a10:	6034      	str	r4, [r6, #0]
  408a12:	6073      	str	r3, [r6, #4]
  408a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a18:	428b      	cmp	r3, r1
  408a1a:	d907      	bls.n	408a2c <__udivmoddi4+0xc8>
  408a1c:	2e00      	cmp	r6, #0
  408a1e:	d054      	beq.n	408aca <__udivmoddi4+0x166>
  408a20:	2100      	movs	r1, #0
  408a22:	e886 0021 	stmia.w	r6, {r0, r5}
  408a26:	4608      	mov	r0, r1
  408a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a2c:	fab3 f183 	clz	r1, r3
  408a30:	2900      	cmp	r1, #0
  408a32:	f040 808e 	bne.w	408b52 <__udivmoddi4+0x1ee>
  408a36:	42ab      	cmp	r3, r5
  408a38:	d302      	bcc.n	408a40 <__udivmoddi4+0xdc>
  408a3a:	4282      	cmp	r2, r0
  408a3c:	f200 80fa 	bhi.w	408c34 <__udivmoddi4+0x2d0>
  408a40:	1a84      	subs	r4, r0, r2
  408a42:	eb65 0503 	sbc.w	r5, r5, r3
  408a46:	2001      	movs	r0, #1
  408a48:	46ac      	mov	ip, r5
  408a4a:	2e00      	cmp	r6, #0
  408a4c:	d03f      	beq.n	408ace <__udivmoddi4+0x16a>
  408a4e:	e886 1010 	stmia.w	r6, {r4, ip}
  408a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a56:	b912      	cbnz	r2, 408a5e <__udivmoddi4+0xfa>
  408a58:	2701      	movs	r7, #1
  408a5a:	fbb7 f7f2 	udiv	r7, r7, r2
  408a5e:	fab7 fe87 	clz	lr, r7
  408a62:	f1be 0f00 	cmp.w	lr, #0
  408a66:	d134      	bne.n	408ad2 <__udivmoddi4+0x16e>
  408a68:	1beb      	subs	r3, r5, r7
  408a6a:	0c3a      	lsrs	r2, r7, #16
  408a6c:	fa1f fc87 	uxth.w	ip, r7
  408a70:	2101      	movs	r1, #1
  408a72:	fbb3 f8f2 	udiv	r8, r3, r2
  408a76:	0c25      	lsrs	r5, r4, #16
  408a78:	fb02 3318 	mls	r3, r2, r8, r3
  408a7c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408a80:	fb0c f308 	mul.w	r3, ip, r8
  408a84:	42ab      	cmp	r3, r5
  408a86:	d907      	bls.n	408a98 <__udivmoddi4+0x134>
  408a88:	19ed      	adds	r5, r5, r7
  408a8a:	f108 30ff 	add.w	r0, r8, #4294967295
  408a8e:	d202      	bcs.n	408a96 <__udivmoddi4+0x132>
  408a90:	42ab      	cmp	r3, r5
  408a92:	f200 80d1 	bhi.w	408c38 <__udivmoddi4+0x2d4>
  408a96:	4680      	mov	r8, r0
  408a98:	1aed      	subs	r5, r5, r3
  408a9a:	b2a3      	uxth	r3, r4
  408a9c:	fbb5 f0f2 	udiv	r0, r5, r2
  408aa0:	fb02 5510 	mls	r5, r2, r0, r5
  408aa4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408aa8:	fb0c fc00 	mul.w	ip, ip, r0
  408aac:	45a4      	cmp	ip, r4
  408aae:	d907      	bls.n	408ac0 <__udivmoddi4+0x15c>
  408ab0:	19e4      	adds	r4, r4, r7
  408ab2:	f100 33ff 	add.w	r3, r0, #4294967295
  408ab6:	d202      	bcs.n	408abe <__udivmoddi4+0x15a>
  408ab8:	45a4      	cmp	ip, r4
  408aba:	f200 80b8 	bhi.w	408c2e <__udivmoddi4+0x2ca>
  408abe:	4618      	mov	r0, r3
  408ac0:	eba4 040c 	sub.w	r4, r4, ip
  408ac4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408ac8:	e79d      	b.n	408a06 <__udivmoddi4+0xa2>
  408aca:	4631      	mov	r1, r6
  408acc:	4630      	mov	r0, r6
  408ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ad2:	f1ce 0420 	rsb	r4, lr, #32
  408ad6:	fa05 f30e 	lsl.w	r3, r5, lr
  408ada:	fa07 f70e 	lsl.w	r7, r7, lr
  408ade:	fa20 f804 	lsr.w	r8, r0, r4
  408ae2:	0c3a      	lsrs	r2, r7, #16
  408ae4:	fa25 f404 	lsr.w	r4, r5, r4
  408ae8:	ea48 0803 	orr.w	r8, r8, r3
  408aec:	fbb4 f1f2 	udiv	r1, r4, r2
  408af0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408af4:	fb02 4411 	mls	r4, r2, r1, r4
  408af8:	fa1f fc87 	uxth.w	ip, r7
  408afc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408b00:	fb01 f30c 	mul.w	r3, r1, ip
  408b04:	42ab      	cmp	r3, r5
  408b06:	fa00 f40e 	lsl.w	r4, r0, lr
  408b0a:	d909      	bls.n	408b20 <__udivmoddi4+0x1bc>
  408b0c:	19ed      	adds	r5, r5, r7
  408b0e:	f101 30ff 	add.w	r0, r1, #4294967295
  408b12:	f080 808a 	bcs.w	408c2a <__udivmoddi4+0x2c6>
  408b16:	42ab      	cmp	r3, r5
  408b18:	f240 8087 	bls.w	408c2a <__udivmoddi4+0x2c6>
  408b1c:	3902      	subs	r1, #2
  408b1e:	443d      	add	r5, r7
  408b20:	1aeb      	subs	r3, r5, r3
  408b22:	fa1f f588 	uxth.w	r5, r8
  408b26:	fbb3 f0f2 	udiv	r0, r3, r2
  408b2a:	fb02 3310 	mls	r3, r2, r0, r3
  408b2e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408b32:	fb00 f30c 	mul.w	r3, r0, ip
  408b36:	42ab      	cmp	r3, r5
  408b38:	d907      	bls.n	408b4a <__udivmoddi4+0x1e6>
  408b3a:	19ed      	adds	r5, r5, r7
  408b3c:	f100 38ff 	add.w	r8, r0, #4294967295
  408b40:	d26f      	bcs.n	408c22 <__udivmoddi4+0x2be>
  408b42:	42ab      	cmp	r3, r5
  408b44:	d96d      	bls.n	408c22 <__udivmoddi4+0x2be>
  408b46:	3802      	subs	r0, #2
  408b48:	443d      	add	r5, r7
  408b4a:	1aeb      	subs	r3, r5, r3
  408b4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408b50:	e78f      	b.n	408a72 <__udivmoddi4+0x10e>
  408b52:	f1c1 0720 	rsb	r7, r1, #32
  408b56:	fa22 f807 	lsr.w	r8, r2, r7
  408b5a:	408b      	lsls	r3, r1
  408b5c:	fa05 f401 	lsl.w	r4, r5, r1
  408b60:	ea48 0303 	orr.w	r3, r8, r3
  408b64:	fa20 fe07 	lsr.w	lr, r0, r7
  408b68:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408b6c:	40fd      	lsrs	r5, r7
  408b6e:	ea4e 0e04 	orr.w	lr, lr, r4
  408b72:	fbb5 f9fc 	udiv	r9, r5, ip
  408b76:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408b7a:	fb0c 5519 	mls	r5, ip, r9, r5
  408b7e:	fa1f f883 	uxth.w	r8, r3
  408b82:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408b86:	fb09 f408 	mul.w	r4, r9, r8
  408b8a:	42ac      	cmp	r4, r5
  408b8c:	fa02 f201 	lsl.w	r2, r2, r1
  408b90:	fa00 fa01 	lsl.w	sl, r0, r1
  408b94:	d908      	bls.n	408ba8 <__udivmoddi4+0x244>
  408b96:	18ed      	adds	r5, r5, r3
  408b98:	f109 30ff 	add.w	r0, r9, #4294967295
  408b9c:	d243      	bcs.n	408c26 <__udivmoddi4+0x2c2>
  408b9e:	42ac      	cmp	r4, r5
  408ba0:	d941      	bls.n	408c26 <__udivmoddi4+0x2c2>
  408ba2:	f1a9 0902 	sub.w	r9, r9, #2
  408ba6:	441d      	add	r5, r3
  408ba8:	1b2d      	subs	r5, r5, r4
  408baa:	fa1f fe8e 	uxth.w	lr, lr
  408bae:	fbb5 f0fc 	udiv	r0, r5, ip
  408bb2:	fb0c 5510 	mls	r5, ip, r0, r5
  408bb6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408bba:	fb00 f808 	mul.w	r8, r0, r8
  408bbe:	45a0      	cmp	r8, r4
  408bc0:	d907      	bls.n	408bd2 <__udivmoddi4+0x26e>
  408bc2:	18e4      	adds	r4, r4, r3
  408bc4:	f100 35ff 	add.w	r5, r0, #4294967295
  408bc8:	d229      	bcs.n	408c1e <__udivmoddi4+0x2ba>
  408bca:	45a0      	cmp	r8, r4
  408bcc:	d927      	bls.n	408c1e <__udivmoddi4+0x2ba>
  408bce:	3802      	subs	r0, #2
  408bd0:	441c      	add	r4, r3
  408bd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408bd6:	eba4 0408 	sub.w	r4, r4, r8
  408bda:	fba0 8902 	umull	r8, r9, r0, r2
  408bde:	454c      	cmp	r4, r9
  408be0:	46c6      	mov	lr, r8
  408be2:	464d      	mov	r5, r9
  408be4:	d315      	bcc.n	408c12 <__udivmoddi4+0x2ae>
  408be6:	d012      	beq.n	408c0e <__udivmoddi4+0x2aa>
  408be8:	b156      	cbz	r6, 408c00 <__udivmoddi4+0x29c>
  408bea:	ebba 030e 	subs.w	r3, sl, lr
  408bee:	eb64 0405 	sbc.w	r4, r4, r5
  408bf2:	fa04 f707 	lsl.w	r7, r4, r7
  408bf6:	40cb      	lsrs	r3, r1
  408bf8:	431f      	orrs	r7, r3
  408bfa:	40cc      	lsrs	r4, r1
  408bfc:	6037      	str	r7, [r6, #0]
  408bfe:	6074      	str	r4, [r6, #4]
  408c00:	2100      	movs	r1, #0
  408c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c06:	4618      	mov	r0, r3
  408c08:	e6f8      	b.n	4089fc <__udivmoddi4+0x98>
  408c0a:	4690      	mov	r8, r2
  408c0c:	e6e0      	b.n	4089d0 <__udivmoddi4+0x6c>
  408c0e:	45c2      	cmp	sl, r8
  408c10:	d2ea      	bcs.n	408be8 <__udivmoddi4+0x284>
  408c12:	ebb8 0e02 	subs.w	lr, r8, r2
  408c16:	eb69 0503 	sbc.w	r5, r9, r3
  408c1a:	3801      	subs	r0, #1
  408c1c:	e7e4      	b.n	408be8 <__udivmoddi4+0x284>
  408c1e:	4628      	mov	r0, r5
  408c20:	e7d7      	b.n	408bd2 <__udivmoddi4+0x26e>
  408c22:	4640      	mov	r0, r8
  408c24:	e791      	b.n	408b4a <__udivmoddi4+0x1e6>
  408c26:	4681      	mov	r9, r0
  408c28:	e7be      	b.n	408ba8 <__udivmoddi4+0x244>
  408c2a:	4601      	mov	r1, r0
  408c2c:	e778      	b.n	408b20 <__udivmoddi4+0x1bc>
  408c2e:	3802      	subs	r0, #2
  408c30:	443c      	add	r4, r7
  408c32:	e745      	b.n	408ac0 <__udivmoddi4+0x15c>
  408c34:	4608      	mov	r0, r1
  408c36:	e708      	b.n	408a4a <__udivmoddi4+0xe6>
  408c38:	f1a8 0802 	sub.w	r8, r8, #2
  408c3c:	443d      	add	r5, r7
  408c3e:	e72b      	b.n	408a98 <__udivmoddi4+0x134>

00408c40 <__aeabi_idiv0>:
  408c40:	4770      	bx	lr
  408c42:	bf00      	nop
  408c44:	454c4449 	.word	0x454c4449
  408c48:	00000000 	.word	0x00000000
  408c4c:	51726d54 	.word	0x51726d54
  408c50:	00000000 	.word	0x00000000
  408c54:	20726d54 	.word	0x20726d54
  408c58:	00637653 	.word	0x00637653

00408c5c <__FUNCTION__.11288>:
  408c5c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  408c6c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  408c7c:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  408c8c:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

00408c9c <__FUNCTION__.9901>:
  408c9c:	5f666968 646e6573 00000000              hif_send....

00408ca8 <__FUNCTION__.9911>:
  408ca8:	5f666968 00727369                       hif_isr.

00408cb0 <__FUNCTION__.9917>:
  408cb0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00408cc0 <__FUNCTION__.9932>:
  408cc0:	5f666968 65636572 00657669              hif_receive.

00408ccc <__FUNCTION__.9947>:
  408ccc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  408cdc:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  408cec:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  408cfc:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  408d0c:	73657264 75622073 61662073 000a6c69     dress bus fail..
  408d1c:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  408d2c:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  408d3c:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  408d4c:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  408d5c:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  408d6c:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  408d7c:	61207473 64207070 276e6469 65732074     st app didn't se
  408d8c:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  408d9c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  408dac:	66696828 61462029 2065736c 65746e69     (hif) False inte
  408dbc:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  408dcc:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  408ddc:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  408dec:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  408dfc:	7075656b 65687420 69686320 00000a70     keup the chip...
  408e0c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  408e1c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  408e2c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  408e3c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  408e4c:	696c6176 72612064 656d7567 000a746e     valid argument..
  408e5c:	20505041 75716552 65747365 69532064     APP Requested Si
  408e6c:	6920657a 616c2073 72656772 61687420     ze is larger tha
  408e7c:	6874206e 65722065 65766963 75622064     n the recived bu
  408e8c:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  408e9c:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  408eac:	64412064 73657264 65622073 646e6f79     d Address beyond
  408ebc:	65687420 63657220 64657669 66756220      the recived buf
  408ecc:	20726566 72646461 20737365 20646e61     fer address and 
  408edc:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  408eec:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  408efc:	6b617720 74207075 63206568 0a706968      wakup the chip.
  408f0c:	00000000                                ....

00408f10 <__FUNCTION__.9874>:
  408f10:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00408f1c <__FUNCTION__.9898>:
  408f1c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00408f2c <__FUNCTION__.9926>:
  408f2c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  408f3c:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  408f4c:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  408f5c:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  408f6c:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  408f7c:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  408f8c:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  408f9c:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  408fac:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  408fbc:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  408fcc:	20706557 2079656b 65646e69 64252078     Wep key index %d
  408fdc:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  408fec:	2079656b 676e656c 25206874 00000a64     key length %d...
  408ffc:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40900c:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40901c:	656e6966 65732064 79742063 000a6570     fined sec type..
  40902c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40903c:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40904c:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40905c:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40906c:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40907c:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40908c:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040909c <__FUNCTION__.9711>:
  40909c:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

004090ac <__FUNCTION__.9805>:
  4090ac:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  4090bc:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  4090cc:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  4090dc:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  4090ec:	00000000 6f727245 68772072 20656c69     ....Error while 
  4090fc:	64616572 20676e69 0a676572 00000000     reading reg.....
  40910c:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40911c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40912c:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40913c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40914c:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40915c:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40916c:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  40917c:	0000000a                                ....

00409180 <__FUNCTION__.9792>:
  409180:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040918c <__FUNCTION__.9799>:
  40918c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40919c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  4091ac:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  4091bc:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  4091cc:	73616c66 69642068 6c626173 61662065     flash disable fa
  4091dc:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  4091ec:	6c696166 696e6920 75622074 00000a73     fail init bus...
  4091fc:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40920c:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40921c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40922c:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40923c:	20444920 0a786c25 00000000               ID %lx.....

00409248 <__FUNCTION__.9176>:
  409248:	5f697073 00646d63                       spi_cmd.

00409250 <__FUNCTION__.9184>:
  409250:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040925c <__FUNCTION__.9200>:
  40925c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040926c <__FUNCTION__.9215>:
  40926c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040927c <__FUNCTION__.9225>:
  40927c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040928c <__FUNCTION__.9233>:
  40928c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040929c <__FUNCTION__.9242>:
  40929c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

004092ac <__FUNCTION__.9250>:
  4092ac:	735f6d6e 725f6970 00646165              nm_spi_read.

004092b8 <__FUNCTION__.9267>:
  4092b8:	735f6d6e 695f6970 0074696e              nm_spi_init.

004092c4 <crc7_syndrome_table>:
  4092c4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  4092d4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  4092e4:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  4092f4:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  409304:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  409314:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  409324:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  409334:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  409344:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  409354:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  409364:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  409374:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  409384:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  409394:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  4093a4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  4093b4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  4093c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4093d4:	6e692064 6e726574 72206c61 20646165     d internal read 
  4093e4:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  4093f4:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  409404:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  409414:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409424:	6e692064 6e726574 72206c61 20646165     d internal read 
  409434:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  409444:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409454:	6e692064 6e726574 77206c61 65746972     d internal write
  409464:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  409474:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409484:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  409494:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  4094a4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4094b4:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  4094c4:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  4094d4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4094e4:	65722064 6e6f7073 202c6573 64616572     d response, read
  4094f4:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  409504:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409514:	656c6961 6c622064 206b636f 61746164     ailed block data
  409524:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  409534:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409544:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  409554:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  409564:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  409574:	7220646d 6f707365 2c65736e 69727720     md response, wri
  409584:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  409594:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  4095a4:	656c6961 61642064 62206174 6b636f6c     ailed data block
  4095b4:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  4095c4:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  4095d4:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  4095e4:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  4095f4:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  409604:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409614:	61642064 62206174 6b636f6c 63726320     d data block crc
  409624:	69727720 202c6574 20737562 6f727265      write, bus erro
  409634:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  409644:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  409654:	61746164 69727720 2e2e6574 00000a2e     data write......
  409664:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409674:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  409684:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  409694:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4096a4:	65722064 6e6f7073 72206573 2c646165     d response read,
  4096b4:	73756220 72726520 2e2e726f 00000a2e      bus error......
  4096c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4096d4:	61642064 72206174 6f707365 2065736e     d data response 
  4096e4:	64616572 7562202c 72652073 2e726f72     read, bus error.
  4096f4:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409704:	656c6961 61642064 72206174 6f707365     ailed data respo
  409714:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  409724:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  409734:	656c6961 61642064 62206174 6b636f6c     ailed data block
  409744:	61657220 62202c64 65207375 726f7272      read, bus error
  409754:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  409764:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  409774:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  409784:	65207375 726f7272 0a2e2e2e 00000000     us error........
  409794:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4097a4:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  4097b4:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  4097c4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4097d4:	65722064 6e6f7073 202c6573 64616572     d response, read
  4097e4:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  4097f4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409804:	61642064 72206174 2e646165 000a2e2e     d data read.....
  409814:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409824:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  409834:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  409844:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409854:	65722064 6e6f7073 202c6573 74697277     d response, writ
  409864:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  409874:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  409884:	253c2074 000a3e64 57202d2d 31434e49     t <%d>..-- WINC1
  409894:	20303035 74616577 20726568 65696c63     500 weather clie
  4098a4:	6520746e 706d6178 2d20656c 2d0a0d2d     nt example --..-
  4098b4:	4153202d 3037454d 4c50582d 2d2d2044     - SAME70-XPLD --
  4098c4:	2d2d0a0d 6d6f4320 656c6970 4d203a64     ..-- Compiled: M
  4098d4:	32207961 30322037 31203931 32303a39     ay 27 2019 19:02
  4098e4:	2039353a 0a0d2d2d 00000000 69666957     :59 --......Wifi
  4098f4:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  409904:	65746165 66695720 61742069 0a0d6b73     eate Wifi task..
  409914:	00000000 6f736572 5f65766c 203a6263     ....resolve_cb: 
  409924:	49207325 64612050 73657264 73692073     %s IP address is
  409934:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
  409944:	00000000 6b636f73 6d5f7465 635f6773     ....socket_msg_c
  409954:	656e6e6f 000a7463 54534f50 48202f20     onnect..POST / H
  409964:	2f505454 0d312e31 6341200a 74706563     TTP/1.1.. Accept
  409974:	2f2a203a 0d0a0d2a 0000000a 646e6573     : */*.......send
  409984:	00000a20 6b636f73 635f7465 63203a62      ...socket_cb: c
  409994:	656e6e6f 65207463 726f7272 000a0d21     onnect error!...
  4099a4:	6b636f73 635f7465 72203a62 20766365     socket_cb: recv 
  4099b4:	6f727265 0a0d2172 00000000 6e69616d     error!......main
  4099c4:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
  4099d4:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
  4099e4:	0000000a 6f685069 0000656e 6e69616d     ....iPhone..main
  4099f4:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
  409a04:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
  409a14:	72626173 6d616e69 00000062 2e323731     sabrinamb...172.
  409a24:	312e3032 34312e30 00000000 74656e49     20.10.14....Inet
  409a34:	6f746120 203a206e 00006425 6b636f73      aton : %d..sock
  409a44:	69207465 2074696e 0000000a 6e69616d     et init ....main
  409a54:	6166203a 64656c69 206f7420 61657263     : failed to crea
  409a64:	54206574 63205043 6e65696c 6f732074     te TCP client so
  409a74:	74656b63 72726520 0d21726f 0000000a     cket error!.....
  409a84:	6b636f73 63207465 656e6e6f 6e697463     socket connectin
  409a94:	00000a67 6f727265 00000a72 63617473     g...error...stac
  409aa4:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  409ab4:	00000a0d 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  409ac4:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
  409ad4:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  409ae4:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
  409af4:	0a0d4445 00000000 69666977 3a62635f     ED......wifi_cb:
  409b04:	20504920 72646461 20737365 25207369      IP address is %
  409b14:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......

00409b24 <_global_impure_ptr>:
  409b24:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  409b34:	46454443 00000000 33323130 37363534     CDEF....01234567
  409b44:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409b54:	0000296c                                l)..

00409b58 <blanks.7217>:
  409b58:	20202020 20202020 20202020 20202020                     

00409b68 <zeroes.7218>:
  409b68:	30303030 30303030 30303030 30303030     0000000000000000
  409b78:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409b88 <_ctype_>:
  409b88:	20202000 20202020 28282020 20282828     .         ((((( 
  409b98:	20202020 20202020 20202020 20202020                     
  409ba8:	10108820 10101010 10101010 10101010      ...............
  409bb8:	04040410 04040404 10040404 10101010     ................
  409bc8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409bd8:	01010101 01010101 01010101 10101010     ................
  409be8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409bf8:	02020202 02020202 02020202 10101010     ................
  409c08:	00000020 00000000 00000000 00000000      ...............
	...

00409c8c <_init>:
  409c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c8e:	bf00      	nop
  409c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409c92:	bc08      	pop	{r3}
  409c94:	469e      	mov	lr, r3
  409c96:	4770      	bx	lr

00409c98 <__init_array_start>:
  409c98:	00406ff9 	.word	0x00406ff9

00409c9c <__frame_dummy_init_array_entry>:
  409c9c:	00400165                                e.@.

00409ca0 <_fini>:
  409ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409ca2:	bf00      	nop
  409ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409ca6:	bc08      	pop	{r3}
  409ca8:	469e      	mov	lr, r3
  409caa:	4770      	bx	lr

00409cac <__fini_array_start>:
  409cac:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <tcp_client_socket>:
20400020:	00ff 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	caa4 2040                                   ..@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	869d 0040 7ff1 0040 0000 0000 9b88 0040     ..@...@.......@.
20400544:	9b84 0040 9944 0040 9944 0040 9944 0040     ..@.D.@.D.@.D.@.
20400554:	9944 0040 9944 0040 9944 0040 9944 0040     D.@.D.@.D.@.D.@.
20400564:	9944 0040 9944 0040 ffff ffff ffff ffff     D.@.D.@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
